
Game-on-4X20-LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002636  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000146  00800060  00002636  000026aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001ae8  00000000  00000000  000027f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d0b  00000000  00000000  000042d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00004fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f1  00000000  00000000  00005183  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000228e  00000000  00000000  00005374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012ca  00000000  00000000  00007602  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010d4  00000000  00000000  000088cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  000099a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c9  00000000  00000000  00009b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ea  00000000  00000000  00009e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a713  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 92 10 	call	0x2124	; 0x2124 <main>
      7a:	0c 94 19 13 	jmp	0x2632	; 0x2632 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e2 12 	jmp	0x25c4	; 0x25c4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ae e9       	ldi	r26, 0x9E	; 158
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ee 12 	jmp	0x25dc	; 0x25dc <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 ed 04 	call	0x9da	; 0x9da <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ee 12 	jmp	0x25dc	; 0x25dc <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 ed 04 	call	0x9da	; 0x9da <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e2 12 	jmp	0x25c4	; 0x25c4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8e e9       	ldi	r24, 0x9E	; 158
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 ed 04 	call	0x9da	; 0x9da <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__epilogue_restores__>

00000622 <__nesf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ee 12 	jmp	0x25dc	; 0x25dc <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__nesf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__nesf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__nesf2+0x58>
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__epilogue_restores__+0x18>

00000682 <__gtsf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 ee 12 	jmp	0x25dc	; 0x25dc <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gtsf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gtsf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gtsf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__epilogue_restores__+0x18>

000006e2 <__gesf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 ee 12 	jmp	0x25dc	; 0x25dc <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__gesf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__gesf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__gesf2+0x58>
     738:	8f ef       	ldi	r24, 0xFF	; 255
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__epilogue_restores__+0x18>

00000742 <__ltsf2>:
     742:	a8 e1       	ldi	r26, 0x18	; 24
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 ee 12 	jmp	0x25dc	; 0x25dc <__prologue_saves__+0x18>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	2d 83       	std	Y+5, r18	; 0x05
     758:	3e 83       	std	Y+6, r19	; 0x06
     75a:	4f 83       	std	Y+7, r20	; 0x07
     75c:	58 87       	std	Y+8, r21	; 0x08
     75e:	89 e0       	ldi	r24, 0x09	; 9
     760:	e8 2e       	mov	r14, r24
     762:	f1 2c       	mov	r15, r1
     764:	ec 0e       	add	r14, r28
     766:	fd 1e       	adc	r15, r29
     768:	ce 01       	movw	r24, r28
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	b7 01       	movw	r22, r14
     76e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     772:	8e 01       	movw	r16, r28
     774:	0f 5e       	subi	r16, 0xEF	; 239
     776:	1f 4f       	sbci	r17, 0xFF	; 255
     778:	ce 01       	movw	r24, r28
     77a:	05 96       	adiw	r24, 0x05	; 5
     77c:	b8 01       	movw	r22, r16
     77e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     782:	89 85       	ldd	r24, Y+9	; 0x09
     784:	82 30       	cpi	r24, 0x02	; 2
     786:	40 f0       	brcs	.+16     	; 0x798 <__ltsf2+0x56>
     788:	89 89       	ldd	r24, Y+17	; 0x11
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	28 f0       	brcs	.+10     	; 0x798 <__ltsf2+0x56>
     78e:	c7 01       	movw	r24, r14
     790:	b8 01       	movw	r22, r16
     792:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fpcmp_parts_f>
     796:	01 c0       	rjmp	.+2      	; 0x79a <__ltsf2+0x58>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	68 96       	adiw	r28, 0x18	; 24
     79c:	e6 e0       	ldi	r30, 0x06	; 6
     79e:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__epilogue_restores__+0x18>

000007a2 <__fixsfsi>:
     7a2:	ac e0       	ldi	r26, 0x0C	; 12
     7a4:	b0 e0       	ldi	r27, 0x00	; 0
     7a6:	e7 ed       	ldi	r30, 0xD7	; 215
     7a8:	f3 e0       	ldi	r31, 0x03	; 3
     7aa:	0c 94 f2 12 	jmp	0x25e4	; 0x25e4 <__prologue_saves__+0x20>
     7ae:	69 83       	std	Y+1, r22	; 0x01
     7b0:	7a 83       	std	Y+2, r23	; 0x02
     7b2:	8b 83       	std	Y+3, r24	; 0x03
     7b4:	9c 83       	std	Y+4, r25	; 0x04
     7b6:	ce 01       	movw	r24, r28
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	be 01       	movw	r22, r28
     7bc:	6b 5f       	subi	r22, 0xFB	; 251
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	0e 94 c2 05 	call	0xb84	; 0xb84 <__unpack_f>
     7c4:	8d 81       	ldd	r24, Y+5	; 0x05
     7c6:	82 30       	cpi	r24, 0x02	; 2
     7c8:	61 f1       	breq	.+88     	; 0x822 <__fixsfsi+0x80>
     7ca:	82 30       	cpi	r24, 0x02	; 2
     7cc:	50 f1       	brcs	.+84     	; 0x822 <__fixsfsi+0x80>
     7ce:	84 30       	cpi	r24, 0x04	; 4
     7d0:	21 f4       	brne	.+8      	; 0x7da <__fixsfsi+0x38>
     7d2:	8e 81       	ldd	r24, Y+6	; 0x06
     7d4:	88 23       	and	r24, r24
     7d6:	51 f1       	breq	.+84     	; 0x82c <__fixsfsi+0x8a>
     7d8:	2e c0       	rjmp	.+92     	; 0x836 <__fixsfsi+0x94>
     7da:	2f 81       	ldd	r18, Y+7	; 0x07
     7dc:	38 85       	ldd	r19, Y+8	; 0x08
     7de:	37 fd       	sbrc	r19, 7
     7e0:	20 c0       	rjmp	.+64     	; 0x822 <__fixsfsi+0x80>
     7e2:	6e 81       	ldd	r22, Y+6	; 0x06
     7e4:	2f 31       	cpi	r18, 0x1F	; 31
     7e6:	31 05       	cpc	r19, r1
     7e8:	1c f0       	brlt	.+6      	; 0x7f0 <__fixsfsi+0x4e>
     7ea:	66 23       	and	r22, r22
     7ec:	f9 f0       	breq	.+62     	; 0x82c <__fixsfsi+0x8a>
     7ee:	23 c0       	rjmp	.+70     	; 0x836 <__fixsfsi+0x94>
     7f0:	8e e1       	ldi	r24, 0x1E	; 30
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	82 1b       	sub	r24, r18
     7f6:	93 0b       	sbc	r25, r19
     7f8:	29 85       	ldd	r18, Y+9	; 0x09
     7fa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7fc:	4b 85       	ldd	r20, Y+11	; 0x0b
     7fe:	5c 85       	ldd	r21, Y+12	; 0x0c
     800:	04 c0       	rjmp	.+8      	; 0x80a <__fixsfsi+0x68>
     802:	56 95       	lsr	r21
     804:	47 95       	ror	r20
     806:	37 95       	ror	r19
     808:	27 95       	ror	r18
     80a:	8a 95       	dec	r24
     80c:	d2 f7       	brpl	.-12     	; 0x802 <__fixsfsi+0x60>
     80e:	66 23       	and	r22, r22
     810:	b1 f0       	breq	.+44     	; 0x83e <__fixsfsi+0x9c>
     812:	50 95       	com	r21
     814:	40 95       	com	r20
     816:	30 95       	com	r19
     818:	21 95       	neg	r18
     81a:	3f 4f       	sbci	r19, 0xFF	; 255
     81c:	4f 4f       	sbci	r20, 0xFF	; 255
     81e:	5f 4f       	sbci	r21, 0xFF	; 255
     820:	0e c0       	rjmp	.+28     	; 0x83e <__fixsfsi+0x9c>
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	30 e0       	ldi	r19, 0x00	; 0
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	09 c0       	rjmp	.+18     	; 0x83e <__fixsfsi+0x9c>
     82c:	2f ef       	ldi	r18, 0xFF	; 255
     82e:	3f ef       	ldi	r19, 0xFF	; 255
     830:	4f ef       	ldi	r20, 0xFF	; 255
     832:	5f e7       	ldi	r21, 0x7F	; 127
     834:	04 c0       	rjmp	.+8      	; 0x83e <__fixsfsi+0x9c>
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	40 e0       	ldi	r20, 0x00	; 0
     83c:	50 e8       	ldi	r21, 0x80	; 128
     83e:	b9 01       	movw	r22, r18
     840:	ca 01       	movw	r24, r20
     842:	2c 96       	adiw	r28, 0x0c	; 12
     844:	e2 e0       	ldi	r30, 0x02	; 2
     846:	0c 94 0e 13 	jmp	0x261c	; 0x261c <__epilogue_restores__+0x20>

0000084a <__floatunsisf>:
     84a:	a8 e0       	ldi	r26, 0x08	; 8
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__prologue_saves__+0x10>
     856:	7b 01       	movw	r14, r22
     858:	8c 01       	movw	r16, r24
     85a:	61 15       	cp	r22, r1
     85c:	71 05       	cpc	r23, r1
     85e:	81 05       	cpc	r24, r1
     860:	91 05       	cpc	r25, r1
     862:	19 f4       	brne	.+6      	; 0x86a <__stack+0xb>
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	89 83       	std	Y+1, r24	; 0x01
     868:	60 c0       	rjmp	.+192    	; 0x92a <__stack+0xcb>
     86a:	83 e0       	ldi	r24, 0x03	; 3
     86c:	89 83       	std	Y+1, r24	; 0x01
     86e:	8e e1       	ldi	r24, 0x1E	; 30
     870:	c8 2e       	mov	r12, r24
     872:	d1 2c       	mov	r13, r1
     874:	dc 82       	std	Y+4, r13	; 0x04
     876:	cb 82       	std	Y+3, r12	; 0x03
     878:	ed 82       	std	Y+5, r14	; 0x05
     87a:	fe 82       	std	Y+6, r15	; 0x06
     87c:	0f 83       	std	Y+7, r16	; 0x07
     87e:	18 87       	std	Y+8, r17	; 0x08
     880:	c8 01       	movw	r24, r16
     882:	b7 01       	movw	r22, r14
     884:	0e 94 9e 04 	call	0x93c	; 0x93c <__clzsi2>
     888:	fc 01       	movw	r30, r24
     88a:	31 97       	sbiw	r30, 0x01	; 1
     88c:	f7 ff       	sbrs	r31, 7
     88e:	3b c0       	rjmp	.+118    	; 0x906 <__stack+0xa7>
     890:	22 27       	eor	r18, r18
     892:	33 27       	eor	r19, r19
     894:	2e 1b       	sub	r18, r30
     896:	3f 0b       	sbc	r19, r31
     898:	57 01       	movw	r10, r14
     89a:	68 01       	movw	r12, r16
     89c:	02 2e       	mov	r0, r18
     89e:	04 c0       	rjmp	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	d6 94       	lsr	r13
     8a2:	c7 94       	ror	r12
     8a4:	b7 94       	ror	r11
     8a6:	a7 94       	ror	r10
     8a8:	0a 94       	dec	r0
     8aa:	d2 f7       	brpl	.-12     	; 0x8a0 <__stack+0x41>
     8ac:	40 e0       	ldi	r20, 0x00	; 0
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	a0 e0       	ldi	r26, 0x00	; 0
     8ba:	b0 e0       	ldi	r27, 0x00	; 0
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	88 0f       	add	r24, r24
     8c0:	99 1f       	adc	r25, r25
     8c2:	aa 1f       	adc	r26, r26
     8c4:	bb 1f       	adc	r27, r27
     8c6:	2a 95       	dec	r18
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	a1 09       	sbc	r26, r1
     8ce:	b1 09       	sbc	r27, r1
     8d0:	8e 21       	and	r24, r14
     8d2:	9f 21       	and	r25, r15
     8d4:	a0 23       	and	r26, r16
     8d6:	b1 23       	and	r27, r17
     8d8:	00 97       	sbiw	r24, 0x00	; 0
     8da:	a1 05       	cpc	r26, r1
     8dc:	b1 05       	cpc	r27, r1
     8de:	21 f0       	breq	.+8      	; 0x8e8 <__stack+0x89>
     8e0:	41 e0       	ldi	r20, 0x01	; 1
     8e2:	50 e0       	ldi	r21, 0x00	; 0
     8e4:	60 e0       	ldi	r22, 0x00	; 0
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	4a 29       	or	r20, r10
     8ea:	5b 29       	or	r21, r11
     8ec:	6c 29       	or	r22, r12
     8ee:	7d 29       	or	r23, r13
     8f0:	4d 83       	std	Y+5, r20	; 0x05
     8f2:	5e 83       	std	Y+6, r21	; 0x06
     8f4:	6f 83       	std	Y+7, r22	; 0x07
     8f6:	78 87       	std	Y+8, r23	; 0x08
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	8e 1b       	sub	r24, r30
     8fe:	9f 0b       	sbc	r25, r31
     900:	9c 83       	std	Y+4, r25	; 0x04
     902:	8b 83       	std	Y+3, r24	; 0x03
     904:	12 c0       	rjmp	.+36     	; 0x92a <__stack+0xcb>
     906:	30 97       	sbiw	r30, 0x00	; 0
     908:	81 f0       	breq	.+32     	; 0x92a <__stack+0xcb>
     90a:	0e 2e       	mov	r0, r30
     90c:	04 c0       	rjmp	.+8      	; 0x916 <__stack+0xb7>
     90e:	ee 0c       	add	r14, r14
     910:	ff 1c       	adc	r15, r15
     912:	00 1f       	adc	r16, r16
     914:	11 1f       	adc	r17, r17
     916:	0a 94       	dec	r0
     918:	d2 f7       	brpl	.-12     	; 0x90e <__stack+0xaf>
     91a:	ed 82       	std	Y+5, r14	; 0x05
     91c:	fe 82       	std	Y+6, r15	; 0x06
     91e:	0f 83       	std	Y+7, r16	; 0x07
     920:	18 87       	std	Y+8, r17	; 0x08
     922:	ce 1a       	sub	r12, r30
     924:	df 0a       	sbc	r13, r31
     926:	dc 82       	std	Y+4, r13	; 0x04
     928:	cb 82       	std	Y+3, r12	; 0x03
     92a:	1a 82       	std	Y+2, r1	; 0x02
     92c:	ce 01       	movw	r24, r28
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	0e 94 ed 04 	call	0x9da	; 0x9da <__pack_f>
     934:	28 96       	adiw	r28, 0x08	; 8
     936:	ea e0       	ldi	r30, 0x0A	; 10
     938:	0c 94 06 13 	jmp	0x260c	; 0x260c <__epilogue_restores__+0x10>

0000093c <__clzsi2>:
     93c:	ef 92       	push	r14
     93e:	ff 92       	push	r15
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	7b 01       	movw	r14, r22
     946:	8c 01       	movw	r16, r24
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	e8 16       	cp	r14, r24
     94c:	80 e0       	ldi	r24, 0x00	; 0
     94e:	f8 06       	cpc	r15, r24
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	08 07       	cpc	r16, r24
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	18 07       	cpc	r17, r24
     958:	88 f4       	brcc	.+34     	; 0x97c <__clzsi2+0x40>
     95a:	8f ef       	ldi	r24, 0xFF	; 255
     95c:	e8 16       	cp	r14, r24
     95e:	f1 04       	cpc	r15, r1
     960:	01 05       	cpc	r16, r1
     962:	11 05       	cpc	r17, r1
     964:	31 f0       	breq	.+12     	; 0x972 <__clzsi2+0x36>
     966:	28 f0       	brcs	.+10     	; 0x972 <__clzsi2+0x36>
     968:	88 e0       	ldi	r24, 0x08	; 8
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	a0 e0       	ldi	r26, 0x00	; 0
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	17 c0       	rjmp	.+46     	; 0x9a0 <__clzsi2+0x64>
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	a0 e0       	ldi	r26, 0x00	; 0
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	12 c0       	rjmp	.+36     	; 0x9a0 <__clzsi2+0x64>
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	e8 16       	cp	r14, r24
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	f8 06       	cpc	r15, r24
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	08 07       	cpc	r16, r24
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	18 07       	cpc	r17, r24
     98c:	28 f0       	brcs	.+10     	; 0x998 <__clzsi2+0x5c>
     98e:	88 e1       	ldi	r24, 0x18	; 24
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	a0 e0       	ldi	r26, 0x00	; 0
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__clzsi2+0x64>
     998:	80 e1       	ldi	r24, 0x10	; 16
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	a0 e0       	ldi	r26, 0x00	; 0
     99e:	b0 e0       	ldi	r27, 0x00	; 0
     9a0:	20 e2       	ldi	r18, 0x20	; 32
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	28 1b       	sub	r18, r24
     9aa:	39 0b       	sbc	r19, r25
     9ac:	4a 0b       	sbc	r20, r26
     9ae:	5b 0b       	sbc	r21, r27
     9b0:	04 c0       	rjmp	.+8      	; 0x9ba <__clzsi2+0x7e>
     9b2:	16 95       	lsr	r17
     9b4:	07 95       	ror	r16
     9b6:	f7 94       	ror	r15
     9b8:	e7 94       	ror	r14
     9ba:	8a 95       	dec	r24
     9bc:	d2 f7       	brpl	.-12     	; 0x9b2 <__clzsi2+0x76>
     9be:	f7 01       	movw	r30, r14
     9c0:	ea 55       	subi	r30, 0x5A	; 90
     9c2:	ff 4f       	sbci	r31, 0xFF	; 255
     9c4:	80 81       	ld	r24, Z
     9c6:	28 1b       	sub	r18, r24
     9c8:	31 09       	sbc	r19, r1
     9ca:	41 09       	sbc	r20, r1
     9cc:	51 09       	sbc	r21, r1
     9ce:	c9 01       	movw	r24, r18
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	08 95       	ret

000009da <__pack_f>:
     9da:	df 92       	push	r13
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	fc 01       	movw	r30, r24
     9e6:	e4 80       	ldd	r14, Z+4	; 0x04
     9e8:	f5 80       	ldd	r15, Z+5	; 0x05
     9ea:	06 81       	ldd	r16, Z+6	; 0x06
     9ec:	17 81       	ldd	r17, Z+7	; 0x07
     9ee:	d1 80       	ldd	r13, Z+1	; 0x01
     9f0:	80 81       	ld	r24, Z
     9f2:	82 30       	cpi	r24, 0x02	; 2
     9f4:	48 f4       	brcc	.+18     	; 0xa08 <__pack_f+0x2e>
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	a0 e1       	ldi	r26, 0x10	; 16
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e8 2a       	or	r14, r24
     a00:	f9 2a       	or	r15, r25
     a02:	0a 2b       	or	r16, r26
     a04:	1b 2b       	or	r17, r27
     a06:	a5 c0       	rjmp	.+330    	; 0xb52 <__pack_f+0x178>
     a08:	84 30       	cpi	r24, 0x04	; 4
     a0a:	09 f4       	brne	.+2      	; 0xa0e <__pack_f+0x34>
     a0c:	9f c0       	rjmp	.+318    	; 0xb4c <__pack_f+0x172>
     a0e:	82 30       	cpi	r24, 0x02	; 2
     a10:	21 f4       	brne	.+8      	; 0xa1a <__pack_f+0x40>
     a12:	ee 24       	eor	r14, r14
     a14:	ff 24       	eor	r15, r15
     a16:	87 01       	movw	r16, r14
     a18:	05 c0       	rjmp	.+10     	; 0xa24 <__pack_f+0x4a>
     a1a:	e1 14       	cp	r14, r1
     a1c:	f1 04       	cpc	r15, r1
     a1e:	01 05       	cpc	r16, r1
     a20:	11 05       	cpc	r17, r1
     a22:	19 f4       	brne	.+6      	; 0xa2a <__pack_f+0x50>
     a24:	e0 e0       	ldi	r30, 0x00	; 0
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	96 c0       	rjmp	.+300    	; 0xb56 <__pack_f+0x17c>
     a2a:	62 81       	ldd	r22, Z+2	; 0x02
     a2c:	73 81       	ldd	r23, Z+3	; 0x03
     a2e:	9f ef       	ldi	r25, 0xFF	; 255
     a30:	62 38       	cpi	r22, 0x82	; 130
     a32:	79 07       	cpc	r23, r25
     a34:	0c f0       	brlt	.+2      	; 0xa38 <__pack_f+0x5e>
     a36:	5b c0       	rjmp	.+182    	; 0xaee <__pack_f+0x114>
     a38:	22 e8       	ldi	r18, 0x82	; 130
     a3a:	3f ef       	ldi	r19, 0xFF	; 255
     a3c:	26 1b       	sub	r18, r22
     a3e:	37 0b       	sbc	r19, r23
     a40:	2a 31       	cpi	r18, 0x1A	; 26
     a42:	31 05       	cpc	r19, r1
     a44:	2c f0       	brlt	.+10     	; 0xa50 <__pack_f+0x76>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	2a c0       	rjmp	.+84     	; 0xaa4 <__pack_f+0xca>
     a50:	b8 01       	movw	r22, r16
     a52:	a7 01       	movw	r20, r14
     a54:	02 2e       	mov	r0, r18
     a56:	04 c0       	rjmp	.+8      	; 0xa60 <__pack_f+0x86>
     a58:	76 95       	lsr	r23
     a5a:	67 95       	ror	r22
     a5c:	57 95       	ror	r21
     a5e:	47 95       	ror	r20
     a60:	0a 94       	dec	r0
     a62:	d2 f7       	brpl	.-12     	; 0xa58 <__pack_f+0x7e>
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	a0 e0       	ldi	r26, 0x00	; 0
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	04 c0       	rjmp	.+8      	; 0xa76 <__pack_f+0x9c>
     a6e:	88 0f       	add	r24, r24
     a70:	99 1f       	adc	r25, r25
     a72:	aa 1f       	adc	r26, r26
     a74:	bb 1f       	adc	r27, r27
     a76:	2a 95       	dec	r18
     a78:	d2 f7       	brpl	.-12     	; 0xa6e <__pack_f+0x94>
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	a1 09       	sbc	r26, r1
     a7e:	b1 09       	sbc	r27, r1
     a80:	8e 21       	and	r24, r14
     a82:	9f 21       	and	r25, r15
     a84:	a0 23       	and	r26, r16
     a86:	b1 23       	and	r27, r17
     a88:	00 97       	sbiw	r24, 0x00	; 0
     a8a:	a1 05       	cpc	r26, r1
     a8c:	b1 05       	cpc	r27, r1
     a8e:	21 f0       	breq	.+8      	; 0xa98 <__pack_f+0xbe>
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	9a 01       	movw	r18, r20
     a9a:	ab 01       	movw	r20, r22
     a9c:	28 2b       	or	r18, r24
     a9e:	39 2b       	or	r19, r25
     aa0:	4a 2b       	or	r20, r26
     aa2:	5b 2b       	or	r21, r27
     aa4:	da 01       	movw	r26, r20
     aa6:	c9 01       	movw	r24, r18
     aa8:	8f 77       	andi	r24, 0x7F	; 127
     aaa:	90 70       	andi	r25, 0x00	; 0
     aac:	a0 70       	andi	r26, 0x00	; 0
     aae:	b0 70       	andi	r27, 0x00	; 0
     ab0:	80 34       	cpi	r24, 0x40	; 64
     ab2:	91 05       	cpc	r25, r1
     ab4:	a1 05       	cpc	r26, r1
     ab6:	b1 05       	cpc	r27, r1
     ab8:	39 f4       	brne	.+14     	; 0xac8 <__pack_f+0xee>
     aba:	27 ff       	sbrs	r18, 7
     abc:	09 c0       	rjmp	.+18     	; 0xad0 <__pack_f+0xf6>
     abe:	20 5c       	subi	r18, 0xC0	; 192
     ac0:	3f 4f       	sbci	r19, 0xFF	; 255
     ac2:	4f 4f       	sbci	r20, 0xFF	; 255
     ac4:	5f 4f       	sbci	r21, 0xFF	; 255
     ac6:	04 c0       	rjmp	.+8      	; 0xad0 <__pack_f+0xf6>
     ac8:	21 5c       	subi	r18, 0xC1	; 193
     aca:	3f 4f       	sbci	r19, 0xFF	; 255
     acc:	4f 4f       	sbci	r20, 0xFF	; 255
     ace:	5f 4f       	sbci	r21, 0xFF	; 255
     ad0:	e0 e0       	ldi	r30, 0x00	; 0
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	20 30       	cpi	r18, 0x00	; 0
     ad6:	a0 e0       	ldi	r26, 0x00	; 0
     ad8:	3a 07       	cpc	r19, r26
     ada:	a0 e0       	ldi	r26, 0x00	; 0
     adc:	4a 07       	cpc	r20, r26
     ade:	a0 e4       	ldi	r26, 0x40	; 64
     ae0:	5a 07       	cpc	r21, r26
     ae2:	10 f0       	brcs	.+4      	; 0xae8 <__pack_f+0x10e>
     ae4:	e1 e0       	ldi	r30, 0x01	; 1
     ae6:	f0 e0       	ldi	r31, 0x00	; 0
     ae8:	79 01       	movw	r14, r18
     aea:	8a 01       	movw	r16, r20
     aec:	27 c0       	rjmp	.+78     	; 0xb3c <__pack_f+0x162>
     aee:	60 38       	cpi	r22, 0x80	; 128
     af0:	71 05       	cpc	r23, r1
     af2:	64 f5       	brge	.+88     	; 0xb4c <__pack_f+0x172>
     af4:	fb 01       	movw	r30, r22
     af6:	e1 58       	subi	r30, 0x81	; 129
     af8:	ff 4f       	sbci	r31, 0xFF	; 255
     afa:	d8 01       	movw	r26, r16
     afc:	c7 01       	movw	r24, r14
     afe:	8f 77       	andi	r24, 0x7F	; 127
     b00:	90 70       	andi	r25, 0x00	; 0
     b02:	a0 70       	andi	r26, 0x00	; 0
     b04:	b0 70       	andi	r27, 0x00	; 0
     b06:	80 34       	cpi	r24, 0x40	; 64
     b08:	91 05       	cpc	r25, r1
     b0a:	a1 05       	cpc	r26, r1
     b0c:	b1 05       	cpc	r27, r1
     b0e:	39 f4       	brne	.+14     	; 0xb1e <__pack_f+0x144>
     b10:	e7 fe       	sbrs	r14, 7
     b12:	0d c0       	rjmp	.+26     	; 0xb2e <__pack_f+0x154>
     b14:	80 e4       	ldi	r24, 0x40	; 64
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	a0 e0       	ldi	r26, 0x00	; 0
     b1a:	b0 e0       	ldi	r27, 0x00	; 0
     b1c:	04 c0       	rjmp	.+8      	; 0xb26 <__pack_f+0x14c>
     b1e:	8f e3       	ldi	r24, 0x3F	; 63
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	e8 0e       	add	r14, r24
     b28:	f9 1e       	adc	r15, r25
     b2a:	0a 1f       	adc	r16, r26
     b2c:	1b 1f       	adc	r17, r27
     b2e:	17 ff       	sbrs	r17, 7
     b30:	05 c0       	rjmp	.+10     	; 0xb3c <__pack_f+0x162>
     b32:	16 95       	lsr	r17
     b34:	07 95       	ror	r16
     b36:	f7 94       	ror	r15
     b38:	e7 94       	ror	r14
     b3a:	31 96       	adiw	r30, 0x01	; 1
     b3c:	87 e0       	ldi	r24, 0x07	; 7
     b3e:	16 95       	lsr	r17
     b40:	07 95       	ror	r16
     b42:	f7 94       	ror	r15
     b44:	e7 94       	ror	r14
     b46:	8a 95       	dec	r24
     b48:	d1 f7       	brne	.-12     	; 0xb3e <__pack_f+0x164>
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <__pack_f+0x17c>
     b4c:	ee 24       	eor	r14, r14
     b4e:	ff 24       	eor	r15, r15
     b50:	87 01       	movw	r16, r14
     b52:	ef ef       	ldi	r30, 0xFF	; 255
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	6e 2f       	mov	r22, r30
     b58:	67 95       	ror	r22
     b5a:	66 27       	eor	r22, r22
     b5c:	67 95       	ror	r22
     b5e:	90 2f       	mov	r25, r16
     b60:	9f 77       	andi	r25, 0x7F	; 127
     b62:	d7 94       	ror	r13
     b64:	dd 24       	eor	r13, r13
     b66:	d7 94       	ror	r13
     b68:	8e 2f       	mov	r24, r30
     b6a:	86 95       	lsr	r24
     b6c:	49 2f       	mov	r20, r25
     b6e:	46 2b       	or	r20, r22
     b70:	58 2f       	mov	r21, r24
     b72:	5d 29       	or	r21, r13
     b74:	b7 01       	movw	r22, r14
     b76:	ca 01       	movw	r24, r20
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	ff 90       	pop	r15
     b7e:	ef 90       	pop	r14
     b80:	df 90       	pop	r13
     b82:	08 95       	ret

00000b84 <__unpack_f>:
     b84:	fc 01       	movw	r30, r24
     b86:	db 01       	movw	r26, r22
     b88:	40 81       	ld	r20, Z
     b8a:	51 81       	ldd	r21, Z+1	; 0x01
     b8c:	22 81       	ldd	r18, Z+2	; 0x02
     b8e:	62 2f       	mov	r22, r18
     b90:	6f 77       	andi	r22, 0x7F	; 127
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	22 1f       	adc	r18, r18
     b96:	22 27       	eor	r18, r18
     b98:	22 1f       	adc	r18, r18
     b9a:	93 81       	ldd	r25, Z+3	; 0x03
     b9c:	89 2f       	mov	r24, r25
     b9e:	88 0f       	add	r24, r24
     ba0:	82 2b       	or	r24, r18
     ba2:	28 2f       	mov	r18, r24
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	99 1f       	adc	r25, r25
     ba8:	99 27       	eor	r25, r25
     baa:	99 1f       	adc	r25, r25
     bac:	11 96       	adiw	r26, 0x01	; 1
     bae:	9c 93       	st	X, r25
     bb0:	11 97       	sbiw	r26, 0x01	; 1
     bb2:	21 15       	cp	r18, r1
     bb4:	31 05       	cpc	r19, r1
     bb6:	a9 f5       	brne	.+106    	; 0xc22 <__unpack_f+0x9e>
     bb8:	41 15       	cp	r20, r1
     bba:	51 05       	cpc	r21, r1
     bbc:	61 05       	cpc	r22, r1
     bbe:	71 05       	cpc	r23, r1
     bc0:	11 f4       	brne	.+4      	; 0xbc6 <__unpack_f+0x42>
     bc2:	82 e0       	ldi	r24, 0x02	; 2
     bc4:	37 c0       	rjmp	.+110    	; 0xc34 <__unpack_f+0xb0>
     bc6:	82 e8       	ldi	r24, 0x82	; 130
     bc8:	9f ef       	ldi	r25, 0xFF	; 255
     bca:	13 96       	adiw	r26, 0x03	; 3
     bcc:	9c 93       	st	X, r25
     bce:	8e 93       	st	-X, r24
     bd0:	12 97       	sbiw	r26, 0x02	; 2
     bd2:	9a 01       	movw	r18, r20
     bd4:	ab 01       	movw	r20, r22
     bd6:	67 e0       	ldi	r22, 0x07	; 7
     bd8:	22 0f       	add	r18, r18
     bda:	33 1f       	adc	r19, r19
     bdc:	44 1f       	adc	r20, r20
     bde:	55 1f       	adc	r21, r21
     be0:	6a 95       	dec	r22
     be2:	d1 f7       	brne	.-12     	; 0xbd8 <__unpack_f+0x54>
     be4:	83 e0       	ldi	r24, 0x03	; 3
     be6:	8c 93       	st	X, r24
     be8:	0d c0       	rjmp	.+26     	; 0xc04 <__unpack_f+0x80>
     bea:	22 0f       	add	r18, r18
     bec:	33 1f       	adc	r19, r19
     bee:	44 1f       	adc	r20, r20
     bf0:	55 1f       	adc	r21, r21
     bf2:	12 96       	adiw	r26, 0x02	; 2
     bf4:	8d 91       	ld	r24, X+
     bf6:	9c 91       	ld	r25, X
     bf8:	13 97       	sbiw	r26, 0x03	; 3
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	13 96       	adiw	r26, 0x03	; 3
     bfe:	9c 93       	st	X, r25
     c00:	8e 93       	st	-X, r24
     c02:	12 97       	sbiw	r26, 0x02	; 2
     c04:	20 30       	cpi	r18, 0x00	; 0
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	38 07       	cpc	r19, r24
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	48 07       	cpc	r20, r24
     c0e:	80 e4       	ldi	r24, 0x40	; 64
     c10:	58 07       	cpc	r21, r24
     c12:	58 f3       	brcs	.-42     	; 0xbea <__unpack_f+0x66>
     c14:	14 96       	adiw	r26, 0x04	; 4
     c16:	2d 93       	st	X+, r18
     c18:	3d 93       	st	X+, r19
     c1a:	4d 93       	st	X+, r20
     c1c:	5c 93       	st	X, r21
     c1e:	17 97       	sbiw	r26, 0x07	; 7
     c20:	08 95       	ret
     c22:	2f 3f       	cpi	r18, 0xFF	; 255
     c24:	31 05       	cpc	r19, r1
     c26:	79 f4       	brne	.+30     	; 0xc46 <__unpack_f+0xc2>
     c28:	41 15       	cp	r20, r1
     c2a:	51 05       	cpc	r21, r1
     c2c:	61 05       	cpc	r22, r1
     c2e:	71 05       	cpc	r23, r1
     c30:	19 f4       	brne	.+6      	; 0xc38 <__unpack_f+0xb4>
     c32:	84 e0       	ldi	r24, 0x04	; 4
     c34:	8c 93       	st	X, r24
     c36:	08 95       	ret
     c38:	64 ff       	sbrs	r22, 4
     c3a:	03 c0       	rjmp	.+6      	; 0xc42 <__unpack_f+0xbe>
     c3c:	81 e0       	ldi	r24, 0x01	; 1
     c3e:	8c 93       	st	X, r24
     c40:	12 c0       	rjmp	.+36     	; 0xc66 <__unpack_f+0xe2>
     c42:	1c 92       	st	X, r1
     c44:	10 c0       	rjmp	.+32     	; 0xc66 <__unpack_f+0xe2>
     c46:	2f 57       	subi	r18, 0x7F	; 127
     c48:	30 40       	sbci	r19, 0x00	; 0
     c4a:	13 96       	adiw	r26, 0x03	; 3
     c4c:	3c 93       	st	X, r19
     c4e:	2e 93       	st	-X, r18
     c50:	12 97       	sbiw	r26, 0x02	; 2
     c52:	83 e0       	ldi	r24, 0x03	; 3
     c54:	8c 93       	st	X, r24
     c56:	87 e0       	ldi	r24, 0x07	; 7
     c58:	44 0f       	add	r20, r20
     c5a:	55 1f       	adc	r21, r21
     c5c:	66 1f       	adc	r22, r22
     c5e:	77 1f       	adc	r23, r23
     c60:	8a 95       	dec	r24
     c62:	d1 f7       	brne	.-12     	; 0xc58 <__unpack_f+0xd4>
     c64:	70 64       	ori	r23, 0x40	; 64
     c66:	14 96       	adiw	r26, 0x04	; 4
     c68:	4d 93       	st	X+, r20
     c6a:	5d 93       	st	X+, r21
     c6c:	6d 93       	st	X+, r22
     c6e:	7c 93       	st	X, r23
     c70:	17 97       	sbiw	r26, 0x07	; 7
     c72:	08 95       	ret

00000c74 <__fpcmp_parts_f>:
     c74:	1f 93       	push	r17
     c76:	dc 01       	movw	r26, r24
     c78:	fb 01       	movw	r30, r22
     c7a:	9c 91       	ld	r25, X
     c7c:	92 30       	cpi	r25, 0x02	; 2
     c7e:	08 f4       	brcc	.+2      	; 0xc82 <__fpcmp_parts_f+0xe>
     c80:	47 c0       	rjmp	.+142    	; 0xd10 <__fpcmp_parts_f+0x9c>
     c82:	80 81       	ld	r24, Z
     c84:	82 30       	cpi	r24, 0x02	; 2
     c86:	08 f4       	brcc	.+2      	; 0xc8a <__fpcmp_parts_f+0x16>
     c88:	43 c0       	rjmp	.+134    	; 0xd10 <__fpcmp_parts_f+0x9c>
     c8a:	94 30       	cpi	r25, 0x04	; 4
     c8c:	51 f4       	brne	.+20     	; 0xca2 <__fpcmp_parts_f+0x2e>
     c8e:	11 96       	adiw	r26, 0x01	; 1
     c90:	1c 91       	ld	r17, X
     c92:	84 30       	cpi	r24, 0x04	; 4
     c94:	99 f5       	brne	.+102    	; 0xcfc <__fpcmp_parts_f+0x88>
     c96:	81 81       	ldd	r24, Z+1	; 0x01
     c98:	68 2f       	mov	r22, r24
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	61 1b       	sub	r22, r17
     c9e:	71 09       	sbc	r23, r1
     ca0:	3f c0       	rjmp	.+126    	; 0xd20 <__fpcmp_parts_f+0xac>
     ca2:	84 30       	cpi	r24, 0x04	; 4
     ca4:	21 f0       	breq	.+8      	; 0xcae <__fpcmp_parts_f+0x3a>
     ca6:	92 30       	cpi	r25, 0x02	; 2
     ca8:	31 f4       	brne	.+12     	; 0xcb6 <__fpcmp_parts_f+0x42>
     caa:	82 30       	cpi	r24, 0x02	; 2
     cac:	b9 f1       	breq	.+110    	; 0xd1c <__fpcmp_parts_f+0xa8>
     cae:	81 81       	ldd	r24, Z+1	; 0x01
     cb0:	88 23       	and	r24, r24
     cb2:	89 f1       	breq	.+98     	; 0xd16 <__fpcmp_parts_f+0xa2>
     cb4:	2d c0       	rjmp	.+90     	; 0xd10 <__fpcmp_parts_f+0x9c>
     cb6:	11 96       	adiw	r26, 0x01	; 1
     cb8:	1c 91       	ld	r17, X
     cba:	11 97       	sbiw	r26, 0x01	; 1
     cbc:	82 30       	cpi	r24, 0x02	; 2
     cbe:	f1 f0       	breq	.+60     	; 0xcfc <__fpcmp_parts_f+0x88>
     cc0:	81 81       	ldd	r24, Z+1	; 0x01
     cc2:	18 17       	cp	r17, r24
     cc4:	d9 f4       	brne	.+54     	; 0xcfc <__fpcmp_parts_f+0x88>
     cc6:	12 96       	adiw	r26, 0x02	; 2
     cc8:	2d 91       	ld	r18, X+
     cca:	3c 91       	ld	r19, X
     ccc:	13 97       	sbiw	r26, 0x03	; 3
     cce:	82 81       	ldd	r24, Z+2	; 0x02
     cd0:	93 81       	ldd	r25, Z+3	; 0x03
     cd2:	82 17       	cp	r24, r18
     cd4:	93 07       	cpc	r25, r19
     cd6:	94 f0       	brlt	.+36     	; 0xcfc <__fpcmp_parts_f+0x88>
     cd8:	28 17       	cp	r18, r24
     cda:	39 07       	cpc	r19, r25
     cdc:	bc f0       	brlt	.+46     	; 0xd0c <__fpcmp_parts_f+0x98>
     cde:	14 96       	adiw	r26, 0x04	; 4
     ce0:	8d 91       	ld	r24, X+
     ce2:	9d 91       	ld	r25, X+
     ce4:	0d 90       	ld	r0, X+
     ce6:	bc 91       	ld	r27, X
     ce8:	a0 2d       	mov	r26, r0
     cea:	24 81       	ldd	r18, Z+4	; 0x04
     cec:	35 81       	ldd	r19, Z+5	; 0x05
     cee:	46 81       	ldd	r20, Z+6	; 0x06
     cf0:	57 81       	ldd	r21, Z+7	; 0x07
     cf2:	28 17       	cp	r18, r24
     cf4:	39 07       	cpc	r19, r25
     cf6:	4a 07       	cpc	r20, r26
     cf8:	5b 07       	cpc	r21, r27
     cfa:	18 f4       	brcc	.+6      	; 0xd02 <__fpcmp_parts_f+0x8e>
     cfc:	11 23       	and	r17, r17
     cfe:	41 f0       	breq	.+16     	; 0xd10 <__fpcmp_parts_f+0x9c>
     d00:	0a c0       	rjmp	.+20     	; 0xd16 <__fpcmp_parts_f+0xa2>
     d02:	82 17       	cp	r24, r18
     d04:	93 07       	cpc	r25, r19
     d06:	a4 07       	cpc	r26, r20
     d08:	b5 07       	cpc	r27, r21
     d0a:	40 f4       	brcc	.+16     	; 0xd1c <__fpcmp_parts_f+0xa8>
     d0c:	11 23       	and	r17, r17
     d0e:	19 f0       	breq	.+6      	; 0xd16 <__fpcmp_parts_f+0xa2>
     d10:	61 e0       	ldi	r22, 0x01	; 1
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	05 c0       	rjmp	.+10     	; 0xd20 <__fpcmp_parts_f+0xac>
     d16:	6f ef       	ldi	r22, 0xFF	; 255
     d18:	7f ef       	ldi	r23, 0xFF	; 255
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <__fpcmp_parts_f+0xac>
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	cb 01       	movw	r24, r22
     d22:	1f 91       	pop	r17
     d24:	08 95       	ret

00000d26 <CLCD_voidClearDisplay>:
#include "CLCD_interface.h"
#include "DIO_interface.h"


void CLCD_voidClearDisplay()
{
     d26:	df 93       	push	r29
     d28:	cf 93       	push	r28
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(CLCD_CMD_CLEAR_DISPLAY);
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	0e 94 31 07 	call	0xe62	; 0xe62 <CLCD_voidSendCommand>
}
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	cd b7       	in	r28, 0x3d	; 61
     d40:	de b7       	in	r29, 0x3e	; 62
     d42:	2e 97       	sbiw	r28, 0x0e	; 14
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	a0 e2       	ldi	r26, 0x20	; 32
     d54:	b2 e4       	ldi	r27, 0x42	; 66
     d56:	8b 87       	std	Y+11, r24	; 0x0b
     d58:	9c 87       	std	Y+12, r25	; 0x0c
     d5a:	ad 87       	std	Y+13, r26	; 0x0d
     d5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d60:	7c 85       	ldd	r23, Y+12	; 0x0c
     d62:	8d 85       	ldd	r24, Y+13	; 0x0d
     d64:	9e 85       	ldd	r25, Y+14	; 0x0e
     d66:	20 e0       	ldi	r18, 0x00	; 0
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	4a ef       	ldi	r20, 0xFA	; 250
     d6c:	54 e4       	ldi	r21, 0x44	; 68
     d6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	8f 83       	std	Y+7, r24	; 0x07
     d78:	98 87       	std	Y+8, r25	; 0x08
     d7a:	a9 87       	std	Y+9, r26	; 0x09
     d7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d7e:	6f 81       	ldd	r22, Y+7	; 0x07
     d80:	78 85       	ldd	r23, Y+8	; 0x08
     d82:	89 85       	ldd	r24, Y+9	; 0x09
     d84:	9a 85       	ldd	r25, Y+10	; 0x0a
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 e8       	ldi	r20, 0x80	; 128
     d8c:	5f e3       	ldi	r21, 0x3F	; 63
     d8e:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
     d92:	88 23       	and	r24, r24
     d94:	2c f4       	brge	.+10     	; 0xda0 <CLCD_voidInit+0x66>
		__ticks = 1;
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	9e 83       	std	Y+6, r25	; 0x06
     d9c:	8d 83       	std	Y+5, r24	; 0x05
     d9e:	3f c0       	rjmp	.+126    	; 0xe1e <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     da0:	6f 81       	ldd	r22, Y+7	; 0x07
     da2:	78 85       	ldd	r23, Y+8	; 0x08
     da4:	89 85       	ldd	r24, Y+9	; 0x09
     da6:	9a 85       	ldd	r25, Y+10	; 0x0a
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	3f ef       	ldi	r19, 0xFF	; 255
     dac:	4f e7       	ldi	r20, 0x7F	; 127
     dae:	57 e4       	ldi	r21, 0x47	; 71
     db0:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
     db4:	18 16       	cp	r1, r24
     db6:	4c f5       	brge	.+82     	; 0xe0a <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     db8:	6b 85       	ldd	r22, Y+11	; 0x0b
     dba:	7c 85       	ldd	r23, Y+12	; 0x0c
     dbc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dbe:	9e 85       	ldd	r25, Y+14	; 0x0e
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	40 e2       	ldi	r20, 0x20	; 32
     dc6:	51 e4       	ldi	r21, 0x41	; 65
     dc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	bc 01       	movw	r22, r24
     dd2:	cd 01       	movw	r24, r26
     dd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	9e 83       	std	Y+6, r25	; 0x06
     dde:	8d 83       	std	Y+5, r24	; 0x05
     de0:	0f c0       	rjmp	.+30     	; 0xe00 <CLCD_voidInit+0xc6>
     de2:	88 ec       	ldi	r24, 0xC8	; 200
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	9c 83       	std	Y+4, r25	; 0x04
     de8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	9c 81       	ldd	r25, Y+4	; 0x04
     dee:	01 97       	sbiw	r24, 0x01	; 1
     df0:	f1 f7       	brne	.-4      	; 0xdee <CLCD_voidInit+0xb4>
     df2:	9c 83       	std	Y+4, r25	; 0x04
     df4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	9e 81       	ldd	r25, Y+6	; 0x06
     dfa:	01 97       	sbiw	r24, 0x01	; 1
     dfc:	9e 83       	std	Y+6, r25	; 0x06
     dfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e00:	8d 81       	ldd	r24, Y+5	; 0x05
     e02:	9e 81       	ldd	r25, Y+6	; 0x06
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	69 f7       	brne	.-38     	; 0xde2 <CLCD_voidInit+0xa8>
     e08:	14 c0       	rjmp	.+40     	; 0xe32 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e0a:	6f 81       	ldd	r22, Y+7	; 0x07
     e0c:	78 85       	ldd	r23, Y+8	; 0x08
     e0e:	89 85       	ldd	r24, Y+9	; 0x09
     e10:	9a 85       	ldd	r25, Y+10	; 0x0a
     e12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	9e 83       	std	Y+6, r25	; 0x06
     e1c:	8d 83       	std	Y+5, r24	; 0x05
     e1e:	8d 81       	ldd	r24, Y+5	; 0x05
     e20:	9e 81       	ldd	r25, Y+6	; 0x06
     e22:	9a 83       	std	Y+2, r25	; 0x02
     e24:	89 83       	std	Y+1, r24	; 0x01
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	9a 81       	ldd	r25, Y+2	; 0x02
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <CLCD_voidInit+0xf0>
     e2e:	9a 83       	std	Y+2, r25	; 0x02
     e30:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(40);

	CLCD_voidSendCommand(CLCD_CMD_RETURN_HOME);
     e32:	82 e0       	ldi	r24, 0x02	; 2
     e34:	0e 94 31 07 	call	0xe62	; 0xe62 <CLCD_voidSendCommand>

	/*Function Set Command
	 * 8 bit mode
	 * Activate the 2 lines
	 * Font Type is 5x8 (5x7) */
	CLCD_voidSendCommand(CLCD_CMD_FUNCTION_SET);
     e38:	88 e2       	ldi	r24, 0x28	; 40
     e3a:	0e 94 31 07 	call	0xe62	; 0xe62 <CLCD_voidSendCommand>

	/*Display ON/OFF Control Command
	 *set display: ON
	 *Cursor is Disabled
	 *Cursor Blinking is OFF  */
	CLCD_voidSendCommand(CLCD_CMD_DISPLAY_ON_OFF_CTRL);
     e3e:	8c e0       	ldi	r24, 0x0C	; 12
     e40:	0e 94 31 07 	call	0xe62	; 0xe62 <CLCD_voidSendCommand>

	/*Clearing LCD Display*/
	CLCD_voidSendCommand(CLCD_CMD_CLEAR_DISPLAY);
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	0e 94 31 07 	call	0xe62	; 0xe62 <CLCD_voidSendCommand>

	/*Entry mode Set*/
	CLCD_voidSendCommand(CLCD_CMD_ENTRY_MODE_SET);
     e4a:	86 e0       	ldi	r24, 0x06	; 6
     e4c:	0e 94 31 07 	call	0xe62	; 0xe62 <CLCD_voidSendCommand>

}
     e50:	2e 96       	adiw	r28, 0x0e	; 14
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	f8 94       	cli
     e56:	de bf       	out	0x3e, r29	; 62
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	cd bf       	out	0x3d, r28	; 61
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <CLCD_voidSendCommand>:


void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	e9 97       	sbiw	r28, 0x39	; 57
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	89 af       	std	Y+57, r24	; 0x39
	/*SET RS PIN TO LOW*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	63 e0       	ldi	r22, 0x03	; 3
     e7c:	40 e0       	ldi	r20, 0x00	; 0
     e7e:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
	_delay_ms(2);

	#elif CLCD_MODE == 4

	/*READING THE COMMAD FROM DATA PORT*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4,GET_BIT(Copy_u8Command,4));
     e82:	89 ad       	ldd	r24, Y+57	; 0x39
     e84:	82 95       	swap	r24
     e86:	8f 70       	andi	r24, 0x0F	; 15
     e88:	98 2f       	mov	r25, r24
     e8a:	91 70       	andi	r25, 0x01	; 1
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	49 2f       	mov	r20, r25
     e92:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5,GET_BIT(Copy_u8Command,5));
     e96:	89 ad       	ldd	r24, Y+57	; 0x39
     e98:	82 95       	swap	r24
     e9a:	86 95       	lsr	r24
     e9c:	87 70       	andi	r24, 0x07	; 7
     e9e:	98 2f       	mov	r25, r24
     ea0:	91 70       	andi	r25, 0x01	; 1
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	61 e0       	ldi	r22, 0x01	; 1
     ea6:	49 2f       	mov	r20, r25
     ea8:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6,GET_BIT(Copy_u8Command,6));
     eac:	89 ad       	ldd	r24, Y+57	; 0x39
     eae:	82 95       	swap	r24
     eb0:	86 95       	lsr	r24
     eb2:	86 95       	lsr	r24
     eb4:	83 70       	andi	r24, 0x03	; 3
     eb6:	98 2f       	mov	r25, r24
     eb8:	91 70       	andi	r25, 0x01	; 1
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	62 e0       	ldi	r22, 0x02	; 2
     ebe:	49 2f       	mov	r20, r25
     ec0:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7,GET_BIT(Copy_u8Command,7));
     ec4:	89 ad       	ldd	r24, Y+57	; 0x39
     ec6:	98 2f       	mov	r25, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	99 27       	eor	r25, r25
     ecc:	99 1f       	adc	r25, r25
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	64 e0       	ldi	r22, 0x04	; 4
     ed2:	49 2f       	mov	r20, r25
     ed4:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>


	/*ENABLE PULSE*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	62 e0       	ldi	r22, 0x02	; 2
     edc:	41 e0       	ldi	r20, 0x01	; 1
     ede:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	a0 e0       	ldi	r26, 0x00	; 0
     ee8:	b0 e4       	ldi	r27, 0x40	; 64
     eea:	8d ab       	std	Y+53, r24	; 0x35
     eec:	9e ab       	std	Y+54, r25	; 0x36
     eee:	af ab       	std	Y+55, r26	; 0x37
     ef0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef2:	6d a9       	ldd	r22, Y+53	; 0x35
     ef4:	7e a9       	ldd	r23, Y+54	; 0x36
     ef6:	8f a9       	ldd	r24, Y+55	; 0x37
     ef8:	98 ad       	ldd	r25, Y+56	; 0x38
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	4a ef       	ldi	r20, 0xFA	; 250
     f00:	54 e4       	ldi	r21, 0x44	; 68
     f02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	89 ab       	std	Y+49, r24	; 0x31
     f0c:	9a ab       	std	Y+50, r25	; 0x32
     f0e:	ab ab       	std	Y+51, r26	; 0x33
     f10:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f12:	69 a9       	ldd	r22, Y+49	; 0x31
     f14:	7a a9       	ldd	r23, Y+50	; 0x32
     f16:	8b a9       	ldd	r24, Y+51	; 0x33
     f18:	9c a9       	ldd	r25, Y+52	; 0x34
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e8       	ldi	r20, 0x80	; 128
     f20:	5f e3       	ldi	r21, 0x3F	; 63
     f22:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
     f26:	88 23       	and	r24, r24
     f28:	2c f4       	brge	.+10     	; 0xf34 <CLCD_voidSendCommand+0xd2>
		__ticks = 1;
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	98 ab       	std	Y+48, r25	; 0x30
     f30:	8f a7       	std	Y+47, r24	; 0x2f
     f32:	3f c0       	rjmp	.+126    	; 0xfb2 <CLCD_voidSendCommand+0x150>
	else if (__tmp > 65535)
     f34:	69 a9       	ldd	r22, Y+49	; 0x31
     f36:	7a a9       	ldd	r23, Y+50	; 0x32
     f38:	8b a9       	ldd	r24, Y+51	; 0x33
     f3a:	9c a9       	ldd	r25, Y+52	; 0x34
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	3f ef       	ldi	r19, 0xFF	; 255
     f40:	4f e7       	ldi	r20, 0x7F	; 127
     f42:	57 e4       	ldi	r21, 0x47	; 71
     f44:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
     f48:	18 16       	cp	r1, r24
     f4a:	4c f5       	brge	.+82     	; 0xf9e <CLCD_voidSendCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4c:	6d a9       	ldd	r22, Y+53	; 0x35
     f4e:	7e a9       	ldd	r23, Y+54	; 0x36
     f50:	8f a9       	ldd	r24, Y+55	; 0x37
     f52:	98 ad       	ldd	r25, Y+56	; 0x38
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e2       	ldi	r20, 0x20	; 32
     f5a:	51 e4       	ldi	r21, 0x41	; 65
     f5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	bc 01       	movw	r22, r24
     f66:	cd 01       	movw	r24, r26
     f68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	98 ab       	std	Y+48, r25	; 0x30
     f72:	8f a7       	std	Y+47, r24	; 0x2f
     f74:	0f c0       	rjmp	.+30     	; 0xf94 <CLCD_voidSendCommand+0x132>
     f76:	88 ec       	ldi	r24, 0xC8	; 200
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	9e a7       	std	Y+46, r25	; 0x2e
     f7c:	8d a7       	std	Y+45, r24	; 0x2d
     f7e:	8d a5       	ldd	r24, Y+45	; 0x2d
     f80:	9e a5       	ldd	r25, Y+46	; 0x2e
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	f1 f7       	brne	.-4      	; 0xf82 <CLCD_voidSendCommand+0x120>
     f86:	9e a7       	std	Y+46, r25	; 0x2e
     f88:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8a:	8f a5       	ldd	r24, Y+47	; 0x2f
     f8c:	98 a9       	ldd	r25, Y+48	; 0x30
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	98 ab       	std	Y+48, r25	; 0x30
     f92:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f94:	8f a5       	ldd	r24, Y+47	; 0x2f
     f96:	98 a9       	ldd	r25, Y+48	; 0x30
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	69 f7       	brne	.-38     	; 0xf76 <CLCD_voidSendCommand+0x114>
     f9c:	14 c0       	rjmp	.+40     	; 0xfc6 <CLCD_voidSendCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9e:	69 a9       	ldd	r22, Y+49	; 0x31
     fa0:	7a a9       	ldd	r23, Y+50	; 0x32
     fa2:	8b a9       	ldd	r24, Y+51	; 0x33
     fa4:	9c a9       	ldd	r25, Y+52	; 0x34
     fa6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	98 ab       	std	Y+48, r25	; 0x30
     fb0:	8f a7       	std	Y+47, r24	; 0x2f
     fb2:	8f a5       	ldd	r24, Y+47	; 0x2f
     fb4:	98 a9       	ldd	r25, Y+48	; 0x30
     fb6:	9c a7       	std	Y+44, r25	; 0x2c
     fb8:	8b a7       	std	Y+43, r24	; 0x2b
     fba:	8b a5       	ldd	r24, Y+43	; 0x2b
     fbc:	9c a5       	ldd	r25, Y+44	; 0x2c
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <CLCD_voidSendCommand+0x15c>
     fc2:	9c a7       	std	Y+44, r25	; 0x2c
     fc4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	62 e0       	ldi	r22, 0x02	; 2
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a0 e0       	ldi	r26, 0x00	; 0
     fd6:	b0 e4       	ldi	r27, 0x40	; 64
     fd8:	8f a3       	std	Y+39, r24	; 0x27
     fda:	98 a7       	std	Y+40, r25	; 0x28
     fdc:	a9 a7       	std	Y+41, r26	; 0x29
     fde:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe0:	6f a1       	ldd	r22, Y+39	; 0x27
     fe2:	78 a5       	ldd	r23, Y+40	; 0x28
     fe4:	89 a5       	ldd	r24, Y+41	; 0x29
     fe6:	9a a5       	ldd	r25, Y+42	; 0x2a
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	4a ef       	ldi	r20, 0xFA	; 250
     fee:	54 e4       	ldi	r21, 0x44	; 68
     ff0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	8b a3       	std	Y+35, r24	; 0x23
     ffa:	9c a3       	std	Y+36, r25	; 0x24
     ffc:	ad a3       	std	Y+37, r26	; 0x25
     ffe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1000:	6b a1       	ldd	r22, Y+35	; 0x23
    1002:	7c a1       	ldd	r23, Y+36	; 0x24
    1004:	8d a1       	ldd	r24, Y+37	; 0x25
    1006:	9e a1       	ldd	r25, Y+38	; 0x26
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e8       	ldi	r20, 0x80	; 128
    100e:	5f e3       	ldi	r21, 0x3F	; 63
    1010:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    1014:	88 23       	and	r24, r24
    1016:	2c f4       	brge	.+10     	; 0x1022 <CLCD_voidSendCommand+0x1c0>
		__ticks = 1;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	9a a3       	std	Y+34, r25	; 0x22
    101e:	89 a3       	std	Y+33, r24	; 0x21
    1020:	3f c0       	rjmp	.+126    	; 0x10a0 <CLCD_voidSendCommand+0x23e>
	else if (__tmp > 65535)
    1022:	6b a1       	ldd	r22, Y+35	; 0x23
    1024:	7c a1       	ldd	r23, Y+36	; 0x24
    1026:	8d a1       	ldd	r24, Y+37	; 0x25
    1028:	9e a1       	ldd	r25, Y+38	; 0x26
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	3f ef       	ldi	r19, 0xFF	; 255
    102e:	4f e7       	ldi	r20, 0x7F	; 127
    1030:	57 e4       	ldi	r21, 0x47	; 71
    1032:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1036:	18 16       	cp	r1, r24
    1038:	4c f5       	brge	.+82     	; 0x108c <CLCD_voidSendCommand+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103a:	6f a1       	ldd	r22, Y+39	; 0x27
    103c:	78 a5       	ldd	r23, Y+40	; 0x28
    103e:	89 a5       	ldd	r24, Y+41	; 0x29
    1040:	9a a5       	ldd	r25, Y+42	; 0x2a
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e2       	ldi	r20, 0x20	; 32
    1048:	51 e4       	ldi	r21, 0x41	; 65
    104a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	bc 01       	movw	r22, r24
    1054:	cd 01       	movw	r24, r26
    1056:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	9a a3       	std	Y+34, r25	; 0x22
    1060:	89 a3       	std	Y+33, r24	; 0x21
    1062:	0f c0       	rjmp	.+30     	; 0x1082 <CLCD_voidSendCommand+0x220>
    1064:	88 ec       	ldi	r24, 0xC8	; 200
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	98 a3       	std	Y+32, r25	; 0x20
    106a:	8f 8f       	std	Y+31, r24	; 0x1f
    106c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    106e:	98 a1       	ldd	r25, Y+32	; 0x20
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <CLCD_voidSendCommand+0x20e>
    1074:	98 a3       	std	Y+32, r25	; 0x20
    1076:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1078:	89 a1       	ldd	r24, Y+33	; 0x21
    107a:	9a a1       	ldd	r25, Y+34	; 0x22
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	9a a3       	std	Y+34, r25	; 0x22
    1080:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1082:	89 a1       	ldd	r24, Y+33	; 0x21
    1084:	9a a1       	ldd	r25, Y+34	; 0x22
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	69 f7       	brne	.-38     	; 0x1064 <CLCD_voidSendCommand+0x202>
    108a:	14 c0       	rjmp	.+40     	; 0x10b4 <CLCD_voidSendCommand+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108c:	6b a1       	ldd	r22, Y+35	; 0x23
    108e:	7c a1       	ldd	r23, Y+36	; 0x24
    1090:	8d a1       	ldd	r24, Y+37	; 0x25
    1092:	9e a1       	ldd	r25, Y+38	; 0x26
    1094:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	9a a3       	std	Y+34, r25	; 0x22
    109e:	89 a3       	std	Y+33, r24	; 0x21
    10a0:	89 a1       	ldd	r24, Y+33	; 0x21
    10a2:	9a a1       	ldd	r25, Y+34	; 0x22
    10a4:	9e 8f       	std	Y+30, r25	; 0x1e
    10a6:	8d 8f       	std	Y+29, r24	; 0x1d
    10a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <CLCD_voidSendCommand+0x24a>
    10b0:	9e 8f       	std	Y+30, r25	; 0x1e
    10b2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	/*READING THE COMMAD FROM DATA PORT*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4,GET_BIT(Copy_u8Command,0));
    10b4:	89 ad       	ldd	r24, Y+57	; 0x39
    10b6:	98 2f       	mov	r25, r24
    10b8:	91 70       	andi	r25, 0x01	; 1
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	49 2f       	mov	r20, r25
    10c0:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5,GET_BIT(Copy_u8Command,1));
    10c4:	89 ad       	ldd	r24, Y+57	; 0x39
    10c6:	86 95       	lsr	r24
    10c8:	98 2f       	mov	r25, r24
    10ca:	91 70       	andi	r25, 0x01	; 1
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	61 e0       	ldi	r22, 0x01	; 1
    10d0:	49 2f       	mov	r20, r25
    10d2:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6,GET_BIT(Copy_u8Command,2));
    10d6:	89 ad       	ldd	r24, Y+57	; 0x39
    10d8:	86 95       	lsr	r24
    10da:	86 95       	lsr	r24
    10dc:	98 2f       	mov	r25, r24
    10de:	91 70       	andi	r25, 0x01	; 1
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	62 e0       	ldi	r22, 0x02	; 2
    10e4:	49 2f       	mov	r20, r25
    10e6:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7,GET_BIT(Copy_u8Command,3));
    10ea:	89 ad       	ldd	r24, Y+57	; 0x39
    10ec:	86 95       	lsr	r24
    10ee:	86 95       	lsr	r24
    10f0:	86 95       	lsr	r24
    10f2:	98 2f       	mov	r25, r24
    10f4:	91 70       	andi	r25, 0x01	; 1
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	64 e0       	ldi	r22, 0x04	; 4
    10fa:	49 2f       	mov	r20, r25
    10fc:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>

	/*ENABLE PULSE*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	62 e0       	ldi	r22, 0x02	; 2
    1104:	41 e0       	ldi	r20, 0x01	; 1
    1106:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	a0 e0       	ldi	r26, 0x00	; 0
    1110:	b0 e4       	ldi	r27, 0x40	; 64
    1112:	89 8f       	std	Y+25, r24	; 0x19
    1114:	9a 8f       	std	Y+26, r25	; 0x1a
    1116:	ab 8f       	std	Y+27, r26	; 0x1b
    1118:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    111a:	69 8d       	ldd	r22, Y+25	; 0x19
    111c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    111e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1120:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	4a ef       	ldi	r20, 0xFA	; 250
    1128:	54 e4       	ldi	r21, 0x44	; 68
    112a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	8d 8b       	std	Y+21, r24	; 0x15
    1134:	9e 8b       	std	Y+22, r25	; 0x16
    1136:	af 8b       	std	Y+23, r26	; 0x17
    1138:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    113a:	6d 89       	ldd	r22, Y+21	; 0x15
    113c:	7e 89       	ldd	r23, Y+22	; 0x16
    113e:	8f 89       	ldd	r24, Y+23	; 0x17
    1140:	98 8d       	ldd	r25, Y+24	; 0x18
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	40 e8       	ldi	r20, 0x80	; 128
    1148:	5f e3       	ldi	r21, 0x3F	; 63
    114a:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    114e:	88 23       	and	r24, r24
    1150:	2c f4       	brge	.+10     	; 0x115c <CLCD_voidSendCommand+0x2fa>
		__ticks = 1;
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	9c 8b       	std	Y+20, r25	; 0x14
    1158:	8b 8b       	std	Y+19, r24	; 0x13
    115a:	3f c0       	rjmp	.+126    	; 0x11da <CLCD_voidSendCommand+0x378>
	else if (__tmp > 65535)
    115c:	6d 89       	ldd	r22, Y+21	; 0x15
    115e:	7e 89       	ldd	r23, Y+22	; 0x16
    1160:	8f 89       	ldd	r24, Y+23	; 0x17
    1162:	98 8d       	ldd	r25, Y+24	; 0x18
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	3f ef       	ldi	r19, 0xFF	; 255
    1168:	4f e7       	ldi	r20, 0x7F	; 127
    116a:	57 e4       	ldi	r21, 0x47	; 71
    116c:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    1170:	18 16       	cp	r1, r24
    1172:	4c f5       	brge	.+82     	; 0x11c6 <CLCD_voidSendCommand+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1174:	69 8d       	ldd	r22, Y+25	; 0x19
    1176:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1178:	8b 8d       	ldd	r24, Y+27	; 0x1b
    117a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	40 e2       	ldi	r20, 0x20	; 32
    1182:	51 e4       	ldi	r21, 0x41	; 65
    1184:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	bc 01       	movw	r22, r24
    118e:	cd 01       	movw	r24, r26
    1190:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1194:	dc 01       	movw	r26, r24
    1196:	cb 01       	movw	r24, r22
    1198:	9c 8b       	std	Y+20, r25	; 0x14
    119a:	8b 8b       	std	Y+19, r24	; 0x13
    119c:	0f c0       	rjmp	.+30     	; 0x11bc <CLCD_voidSendCommand+0x35a>
    119e:	88 ec       	ldi	r24, 0xC8	; 200
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	9a 8b       	std	Y+18, r25	; 0x12
    11a4:	89 8b       	std	Y+17, r24	; 0x11
    11a6:	89 89       	ldd	r24, Y+17	; 0x11
    11a8:	9a 89       	ldd	r25, Y+18	; 0x12
    11aa:	01 97       	sbiw	r24, 0x01	; 1
    11ac:	f1 f7       	brne	.-4      	; 0x11aa <CLCD_voidSendCommand+0x348>
    11ae:	9a 8b       	std	Y+18, r25	; 0x12
    11b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b2:	8b 89       	ldd	r24, Y+19	; 0x13
    11b4:	9c 89       	ldd	r25, Y+20	; 0x14
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	9c 8b       	std	Y+20, r25	; 0x14
    11ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11bc:	8b 89       	ldd	r24, Y+19	; 0x13
    11be:	9c 89       	ldd	r25, Y+20	; 0x14
    11c0:	00 97       	sbiw	r24, 0x00	; 0
    11c2:	69 f7       	brne	.-38     	; 0x119e <CLCD_voidSendCommand+0x33c>
    11c4:	14 c0       	rjmp	.+40     	; 0x11ee <CLCD_voidSendCommand+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c6:	6d 89       	ldd	r22, Y+21	; 0x15
    11c8:	7e 89       	ldd	r23, Y+22	; 0x16
    11ca:	8f 89       	ldd	r24, Y+23	; 0x17
    11cc:	98 8d       	ldd	r25, Y+24	; 0x18
    11ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	9c 8b       	std	Y+20, r25	; 0x14
    11d8:	8b 8b       	std	Y+19, r24	; 0x13
    11da:	8b 89       	ldd	r24, Y+19	; 0x13
    11dc:	9c 89       	ldd	r25, Y+20	; 0x14
    11de:	98 8b       	std	Y+16, r25	; 0x10
    11e0:	8f 87       	std	Y+15, r24	; 0x0f
    11e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e4:	98 89       	ldd	r25, Y+16	; 0x10
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <CLCD_voidSendCommand+0x384>
    11ea:	98 8b       	std	Y+16, r25	; 0x10
    11ec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	62 e0       	ldi	r22, 0x02	; 2
    11f2:	40 e0       	ldi	r20, 0x00	; 0
    11f4:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	a0 e0       	ldi	r26, 0x00	; 0
    11fe:	b0 e4       	ldi	r27, 0x40	; 64
    1200:	8b 87       	std	Y+11, r24	; 0x0b
    1202:	9c 87       	std	Y+12, r25	; 0x0c
    1204:	ad 87       	std	Y+13, r26	; 0x0d
    1206:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1208:	6b 85       	ldd	r22, Y+11	; 0x0b
    120a:	7c 85       	ldd	r23, Y+12	; 0x0c
    120c:	8d 85       	ldd	r24, Y+13	; 0x0d
    120e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	4a ef       	ldi	r20, 0xFA	; 250
    1216:	54 e4       	ldi	r21, 0x44	; 68
    1218:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	8f 83       	std	Y+7, r24	; 0x07
    1222:	98 87       	std	Y+8, r25	; 0x08
    1224:	a9 87       	std	Y+9, r26	; 0x09
    1226:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1228:	6f 81       	ldd	r22, Y+7	; 0x07
    122a:	78 85       	ldd	r23, Y+8	; 0x08
    122c:	89 85       	ldd	r24, Y+9	; 0x09
    122e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e8       	ldi	r20, 0x80	; 128
    1236:	5f e3       	ldi	r21, 0x3F	; 63
    1238:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    123c:	88 23       	and	r24, r24
    123e:	2c f4       	brge	.+10     	; 0x124a <CLCD_voidSendCommand+0x3e8>
		__ticks = 1;
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	9e 83       	std	Y+6, r25	; 0x06
    1246:	8d 83       	std	Y+5, r24	; 0x05
    1248:	3f c0       	rjmp	.+126    	; 0x12c8 <CLCD_voidSendCommand+0x466>
	else if (__tmp > 65535)
    124a:	6f 81       	ldd	r22, Y+7	; 0x07
    124c:	78 85       	ldd	r23, Y+8	; 0x08
    124e:	89 85       	ldd	r24, Y+9	; 0x09
    1250:	9a 85       	ldd	r25, Y+10	; 0x0a
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	3f ef       	ldi	r19, 0xFF	; 255
    1256:	4f e7       	ldi	r20, 0x7F	; 127
    1258:	57 e4       	ldi	r21, 0x47	; 71
    125a:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    125e:	18 16       	cp	r1, r24
    1260:	4c f5       	brge	.+82     	; 0x12b4 <CLCD_voidSendCommand+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1262:	6b 85       	ldd	r22, Y+11	; 0x0b
    1264:	7c 85       	ldd	r23, Y+12	; 0x0c
    1266:	8d 85       	ldd	r24, Y+13	; 0x0d
    1268:	9e 85       	ldd	r25, Y+14	; 0x0e
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e2       	ldi	r20, 0x20	; 32
    1270:	51 e4       	ldi	r21, 0x41	; 65
    1272:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	bc 01       	movw	r22, r24
    127c:	cd 01       	movw	r24, r26
    127e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	9e 83       	std	Y+6, r25	; 0x06
    1288:	8d 83       	std	Y+5, r24	; 0x05
    128a:	0f c0       	rjmp	.+30     	; 0x12aa <CLCD_voidSendCommand+0x448>
    128c:	88 ec       	ldi	r24, 0xC8	; 200
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	9c 83       	std	Y+4, r25	; 0x04
    1292:	8b 83       	std	Y+3, r24	; 0x03
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	9c 81       	ldd	r25, Y+4	; 0x04
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	f1 f7       	brne	.-4      	; 0x1298 <CLCD_voidSendCommand+0x436>
    129c:	9c 83       	std	Y+4, r25	; 0x04
    129e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a0:	8d 81       	ldd	r24, Y+5	; 0x05
    12a2:	9e 81       	ldd	r25, Y+6	; 0x06
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	9e 83       	std	Y+6, r25	; 0x06
    12a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12aa:	8d 81       	ldd	r24, Y+5	; 0x05
    12ac:	9e 81       	ldd	r25, Y+6	; 0x06
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	69 f7       	brne	.-38     	; 0x128c <CLCD_voidSendCommand+0x42a>
    12b2:	14 c0       	rjmp	.+40     	; 0x12dc <CLCD_voidSendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b4:	6f 81       	ldd	r22, Y+7	; 0x07
    12b6:	78 85       	ldd	r23, Y+8	; 0x08
    12b8:	89 85       	ldd	r24, Y+9	; 0x09
    12ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    12bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	9e 83       	std	Y+6, r25	; 0x06
    12c6:	8d 83       	std	Y+5, r24	; 0x05
    12c8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ca:	9e 81       	ldd	r25, Y+6	; 0x06
    12cc:	9a 83       	std	Y+2, r25	; 0x02
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	9a 81       	ldd	r25, Y+2	; 0x02
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <CLCD_voidSendCommand+0x472>
    12d8:	9a 83       	std	Y+2, r25	; 0x02
    12da:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	#else
	#endif

}
    12dc:	e9 96       	adiw	r28, 0x39	; 57
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	e9 97       	sbiw	r28, 0x39	; 57
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	89 af       	std	Y+57, r24	; 0x39
	/*SET RS PIN TO HIGH*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	63 e0       	ldi	r22, 0x03	; 3
    1308:	41 e0       	ldi	r20, 0x01	; 1
    130a:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
	_delay_ms(2);

	#elif CLCD_MODE == 4
	/*READING THE COMMAD FROM DATA PORT*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4,GET_BIT(Copy_u8Data,4));
    130e:	89 ad       	ldd	r24, Y+57	; 0x39
    1310:	82 95       	swap	r24
    1312:	8f 70       	andi	r24, 0x0F	; 15
    1314:	98 2f       	mov	r25, r24
    1316:	91 70       	andi	r25, 0x01	; 1
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	49 2f       	mov	r20, r25
    131e:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5,GET_BIT(Copy_u8Data,5));
    1322:	89 ad       	ldd	r24, Y+57	; 0x39
    1324:	82 95       	swap	r24
    1326:	86 95       	lsr	r24
    1328:	87 70       	andi	r24, 0x07	; 7
    132a:	98 2f       	mov	r25, r24
    132c:	91 70       	andi	r25, 0x01	; 1
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	61 e0       	ldi	r22, 0x01	; 1
    1332:	49 2f       	mov	r20, r25
    1334:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6,GET_BIT(Copy_u8Data,6));
    1338:	89 ad       	ldd	r24, Y+57	; 0x39
    133a:	82 95       	swap	r24
    133c:	86 95       	lsr	r24
    133e:	86 95       	lsr	r24
    1340:	83 70       	andi	r24, 0x03	; 3
    1342:	98 2f       	mov	r25, r24
    1344:	91 70       	andi	r25, 0x01	; 1
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	62 e0       	ldi	r22, 0x02	; 2
    134a:	49 2f       	mov	r20, r25
    134c:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7,GET_BIT(Copy_u8Data,7));
    1350:	89 ad       	ldd	r24, Y+57	; 0x39
    1352:	98 2f       	mov	r25, r24
    1354:	99 1f       	adc	r25, r25
    1356:	99 27       	eor	r25, r25
    1358:	99 1f       	adc	r25, r25
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	64 e0       	ldi	r22, 0x04	; 4
    135e:	49 2f       	mov	r20, r25
    1360:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>


	/*ENABLE PULSE*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	62 e0       	ldi	r22, 0x02	; 2
    1368:	41 e0       	ldi	r20, 0x01	; 1
    136a:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	a0 e0       	ldi	r26, 0x00	; 0
    1374:	b0 e4       	ldi	r27, 0x40	; 64
    1376:	8d ab       	std	Y+53, r24	; 0x35
    1378:	9e ab       	std	Y+54, r25	; 0x36
    137a:	af ab       	std	Y+55, r26	; 0x37
    137c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    137e:	6d a9       	ldd	r22, Y+53	; 0x35
    1380:	7e a9       	ldd	r23, Y+54	; 0x36
    1382:	8f a9       	ldd	r24, Y+55	; 0x37
    1384:	98 ad       	ldd	r25, Y+56	; 0x38
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	4a ef       	ldi	r20, 0xFA	; 250
    138c:	54 e4       	ldi	r21, 0x44	; 68
    138e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	89 ab       	std	Y+49, r24	; 0x31
    1398:	9a ab       	std	Y+50, r25	; 0x32
    139a:	ab ab       	std	Y+51, r26	; 0x33
    139c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    139e:	69 a9       	ldd	r22, Y+49	; 0x31
    13a0:	7a a9       	ldd	r23, Y+50	; 0x32
    13a2:	8b a9       	ldd	r24, Y+51	; 0x33
    13a4:	9c a9       	ldd	r25, Y+52	; 0x34
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	40 e8       	ldi	r20, 0x80	; 128
    13ac:	5f e3       	ldi	r21, 0x3F	; 63
    13ae:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    13b2:	88 23       	and	r24, r24
    13b4:	2c f4       	brge	.+10     	; 0x13c0 <CLCD_voidSendData+0xd2>
		__ticks = 1;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	98 ab       	std	Y+48, r25	; 0x30
    13bc:	8f a7       	std	Y+47, r24	; 0x2f
    13be:	3f c0       	rjmp	.+126    	; 0x143e <CLCD_voidSendData+0x150>
	else if (__tmp > 65535)
    13c0:	69 a9       	ldd	r22, Y+49	; 0x31
    13c2:	7a a9       	ldd	r23, Y+50	; 0x32
    13c4:	8b a9       	ldd	r24, Y+51	; 0x33
    13c6:	9c a9       	ldd	r25, Y+52	; 0x34
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	3f ef       	ldi	r19, 0xFF	; 255
    13cc:	4f e7       	ldi	r20, 0x7F	; 127
    13ce:	57 e4       	ldi	r21, 0x47	; 71
    13d0:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    13d4:	18 16       	cp	r1, r24
    13d6:	4c f5       	brge	.+82     	; 0x142a <CLCD_voidSendData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d8:	6d a9       	ldd	r22, Y+53	; 0x35
    13da:	7e a9       	ldd	r23, Y+54	; 0x36
    13dc:	8f a9       	ldd	r24, Y+55	; 0x37
    13de:	98 ad       	ldd	r25, Y+56	; 0x38
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e2       	ldi	r20, 0x20	; 32
    13e6:	51 e4       	ldi	r21, 0x41	; 65
    13e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	bc 01       	movw	r22, r24
    13f2:	cd 01       	movw	r24, r26
    13f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	98 ab       	std	Y+48, r25	; 0x30
    13fe:	8f a7       	std	Y+47, r24	; 0x2f
    1400:	0f c0       	rjmp	.+30     	; 0x1420 <CLCD_voidSendData+0x132>
    1402:	88 ec       	ldi	r24, 0xC8	; 200
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	9e a7       	std	Y+46, r25	; 0x2e
    1408:	8d a7       	std	Y+45, r24	; 0x2d
    140a:	8d a5       	ldd	r24, Y+45	; 0x2d
    140c:	9e a5       	ldd	r25, Y+46	; 0x2e
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	f1 f7       	brne	.-4      	; 0x140e <CLCD_voidSendData+0x120>
    1412:	9e a7       	std	Y+46, r25	; 0x2e
    1414:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1416:	8f a5       	ldd	r24, Y+47	; 0x2f
    1418:	98 a9       	ldd	r25, Y+48	; 0x30
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	98 ab       	std	Y+48, r25	; 0x30
    141e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1420:	8f a5       	ldd	r24, Y+47	; 0x2f
    1422:	98 a9       	ldd	r25, Y+48	; 0x30
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	69 f7       	brne	.-38     	; 0x1402 <CLCD_voidSendData+0x114>
    1428:	14 c0       	rjmp	.+40     	; 0x1452 <CLCD_voidSendData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142a:	69 a9       	ldd	r22, Y+49	; 0x31
    142c:	7a a9       	ldd	r23, Y+50	; 0x32
    142e:	8b a9       	ldd	r24, Y+51	; 0x33
    1430:	9c a9       	ldd	r25, Y+52	; 0x34
    1432:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	98 ab       	std	Y+48, r25	; 0x30
    143c:	8f a7       	std	Y+47, r24	; 0x2f
    143e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1440:	98 a9       	ldd	r25, Y+48	; 0x30
    1442:	9c a7       	std	Y+44, r25	; 0x2c
    1444:	8b a7       	std	Y+43, r24	; 0x2b
    1446:	8b a5       	ldd	r24, Y+43	; 0x2b
    1448:	9c a5       	ldd	r25, Y+44	; 0x2c
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	f1 f7       	brne	.-4      	; 0x144a <CLCD_voidSendData+0x15c>
    144e:	9c a7       	std	Y+44, r25	; 0x2c
    1450:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	62 e0       	ldi	r22, 0x02	; 2
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
    145c:	80 e0       	ldi	r24, 0x00	; 0
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	a0 e0       	ldi	r26, 0x00	; 0
    1462:	b0 e4       	ldi	r27, 0x40	; 64
    1464:	8f a3       	std	Y+39, r24	; 0x27
    1466:	98 a7       	std	Y+40, r25	; 0x28
    1468:	a9 a7       	std	Y+41, r26	; 0x29
    146a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    146c:	6f a1       	ldd	r22, Y+39	; 0x27
    146e:	78 a5       	ldd	r23, Y+40	; 0x28
    1470:	89 a5       	ldd	r24, Y+41	; 0x29
    1472:	9a a5       	ldd	r25, Y+42	; 0x2a
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	4a ef       	ldi	r20, 0xFA	; 250
    147a:	54 e4       	ldi	r21, 0x44	; 68
    147c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	8b a3       	std	Y+35, r24	; 0x23
    1486:	9c a3       	std	Y+36, r25	; 0x24
    1488:	ad a3       	std	Y+37, r26	; 0x25
    148a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    148c:	6b a1       	ldd	r22, Y+35	; 0x23
    148e:	7c a1       	ldd	r23, Y+36	; 0x24
    1490:	8d a1       	ldd	r24, Y+37	; 0x25
    1492:	9e a1       	ldd	r25, Y+38	; 0x26
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e8       	ldi	r20, 0x80	; 128
    149a:	5f e3       	ldi	r21, 0x3F	; 63
    149c:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    14a0:	88 23       	and	r24, r24
    14a2:	2c f4       	brge	.+10     	; 0x14ae <CLCD_voidSendData+0x1c0>
		__ticks = 1;
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	9a a3       	std	Y+34, r25	; 0x22
    14aa:	89 a3       	std	Y+33, r24	; 0x21
    14ac:	3f c0       	rjmp	.+126    	; 0x152c <CLCD_voidSendData+0x23e>
	else if (__tmp > 65535)
    14ae:	6b a1       	ldd	r22, Y+35	; 0x23
    14b0:	7c a1       	ldd	r23, Y+36	; 0x24
    14b2:	8d a1       	ldd	r24, Y+37	; 0x25
    14b4:	9e a1       	ldd	r25, Y+38	; 0x26
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	3f ef       	ldi	r19, 0xFF	; 255
    14ba:	4f e7       	ldi	r20, 0x7F	; 127
    14bc:	57 e4       	ldi	r21, 0x47	; 71
    14be:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    14c2:	18 16       	cp	r1, r24
    14c4:	4c f5       	brge	.+82     	; 0x1518 <CLCD_voidSendData+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14c6:	6f a1       	ldd	r22, Y+39	; 0x27
    14c8:	78 a5       	ldd	r23, Y+40	; 0x28
    14ca:	89 a5       	ldd	r24, Y+41	; 0x29
    14cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	40 e2       	ldi	r20, 0x20	; 32
    14d4:	51 e4       	ldi	r21, 0x41	; 65
    14d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	bc 01       	movw	r22, r24
    14e0:	cd 01       	movw	r24, r26
    14e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14e6:	dc 01       	movw	r26, r24
    14e8:	cb 01       	movw	r24, r22
    14ea:	9a a3       	std	Y+34, r25	; 0x22
    14ec:	89 a3       	std	Y+33, r24	; 0x21
    14ee:	0f c0       	rjmp	.+30     	; 0x150e <CLCD_voidSendData+0x220>
    14f0:	88 ec       	ldi	r24, 0xC8	; 200
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	98 a3       	std	Y+32, r25	; 0x20
    14f6:	8f 8f       	std	Y+31, r24	; 0x1f
    14f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14fa:	98 a1       	ldd	r25, Y+32	; 0x20
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	f1 f7       	brne	.-4      	; 0x14fc <CLCD_voidSendData+0x20e>
    1500:	98 a3       	std	Y+32, r25	; 0x20
    1502:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1504:	89 a1       	ldd	r24, Y+33	; 0x21
    1506:	9a a1       	ldd	r25, Y+34	; 0x22
    1508:	01 97       	sbiw	r24, 0x01	; 1
    150a:	9a a3       	std	Y+34, r25	; 0x22
    150c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    150e:	89 a1       	ldd	r24, Y+33	; 0x21
    1510:	9a a1       	ldd	r25, Y+34	; 0x22
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	69 f7       	brne	.-38     	; 0x14f0 <CLCD_voidSendData+0x202>
    1516:	14 c0       	rjmp	.+40     	; 0x1540 <CLCD_voidSendData+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1518:	6b a1       	ldd	r22, Y+35	; 0x23
    151a:	7c a1       	ldd	r23, Y+36	; 0x24
    151c:	8d a1       	ldd	r24, Y+37	; 0x25
    151e:	9e a1       	ldd	r25, Y+38	; 0x26
    1520:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	9a a3       	std	Y+34, r25	; 0x22
    152a:	89 a3       	std	Y+33, r24	; 0x21
    152c:	89 a1       	ldd	r24, Y+33	; 0x21
    152e:	9a a1       	ldd	r25, Y+34	; 0x22
    1530:	9e 8f       	std	Y+30, r25	; 0x1e
    1532:	8d 8f       	std	Y+29, r24	; 0x1d
    1534:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1536:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	f1 f7       	brne	.-4      	; 0x1538 <CLCD_voidSendData+0x24a>
    153c:	9e 8f       	std	Y+30, r25	; 0x1e
    153e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	/*READING THE COMMAD FROM DATA PORT*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4,GET_BIT(Copy_u8Data,0));
    1540:	89 ad       	ldd	r24, Y+57	; 0x39
    1542:	98 2f       	mov	r25, r24
    1544:	91 70       	andi	r25, 0x01	; 1
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	49 2f       	mov	r20, r25
    154c:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5,GET_BIT(Copy_u8Data,1));
    1550:	89 ad       	ldd	r24, Y+57	; 0x39
    1552:	86 95       	lsr	r24
    1554:	98 2f       	mov	r25, r24
    1556:	91 70       	andi	r25, 0x01	; 1
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	61 e0       	ldi	r22, 0x01	; 1
    155c:	49 2f       	mov	r20, r25
    155e:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6,GET_BIT(Copy_u8Data,2));
    1562:	89 ad       	ldd	r24, Y+57	; 0x39
    1564:	86 95       	lsr	r24
    1566:	86 95       	lsr	r24
    1568:	98 2f       	mov	r25, r24
    156a:	91 70       	andi	r25, 0x01	; 1
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	62 e0       	ldi	r22, 0x02	; 2
    1570:	49 2f       	mov	r20, r25
    1572:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7,GET_BIT(Copy_u8Data,3));
    1576:	89 ad       	ldd	r24, Y+57	; 0x39
    1578:	86 95       	lsr	r24
    157a:	86 95       	lsr	r24
    157c:	86 95       	lsr	r24
    157e:	98 2f       	mov	r25, r24
    1580:	91 70       	andi	r25, 0x01	; 1
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	64 e0       	ldi	r22, 0x04	; 4
    1586:	49 2f       	mov	r20, r25
    1588:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>

	/*ENABLE PULSE*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    158c:	80 e0       	ldi	r24, 0x00	; 0
    158e:	62 e0       	ldi	r22, 0x02	; 2
    1590:	41 e0       	ldi	r20, 0x01	; 1
    1592:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	a0 e0       	ldi	r26, 0x00	; 0
    159c:	b0 e4       	ldi	r27, 0x40	; 64
    159e:	89 8f       	std	Y+25, r24	; 0x19
    15a0:	9a 8f       	std	Y+26, r25	; 0x1a
    15a2:	ab 8f       	std	Y+27, r26	; 0x1b
    15a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a6:	69 8d       	ldd	r22, Y+25	; 0x19
    15a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	4a ef       	ldi	r20, 0xFA	; 250
    15b4:	54 e4       	ldi	r21, 0x44	; 68
    15b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ba:	dc 01       	movw	r26, r24
    15bc:	cb 01       	movw	r24, r22
    15be:	8d 8b       	std	Y+21, r24	; 0x15
    15c0:	9e 8b       	std	Y+22, r25	; 0x16
    15c2:	af 8b       	std	Y+23, r26	; 0x17
    15c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15c6:	6d 89       	ldd	r22, Y+21	; 0x15
    15c8:	7e 89       	ldd	r23, Y+22	; 0x16
    15ca:	8f 89       	ldd	r24, Y+23	; 0x17
    15cc:	98 8d       	ldd	r25, Y+24	; 0x18
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e8       	ldi	r20, 0x80	; 128
    15d4:	5f e3       	ldi	r21, 0x3F	; 63
    15d6:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    15da:	88 23       	and	r24, r24
    15dc:	2c f4       	brge	.+10     	; 0x15e8 <CLCD_voidSendData+0x2fa>
		__ticks = 1;
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	9c 8b       	std	Y+20, r25	; 0x14
    15e4:	8b 8b       	std	Y+19, r24	; 0x13
    15e6:	3f c0       	rjmp	.+126    	; 0x1666 <CLCD_voidSendData+0x378>
	else if (__tmp > 65535)
    15e8:	6d 89       	ldd	r22, Y+21	; 0x15
    15ea:	7e 89       	ldd	r23, Y+22	; 0x16
    15ec:	8f 89       	ldd	r24, Y+23	; 0x17
    15ee:	98 8d       	ldd	r25, Y+24	; 0x18
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	3f ef       	ldi	r19, 0xFF	; 255
    15f4:	4f e7       	ldi	r20, 0x7F	; 127
    15f6:	57 e4       	ldi	r21, 0x47	; 71
    15f8:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    15fc:	18 16       	cp	r1, r24
    15fe:	4c f5       	brge	.+82     	; 0x1652 <CLCD_voidSendData+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1600:	69 8d       	ldd	r22, Y+25	; 0x19
    1602:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1604:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1606:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	40 e2       	ldi	r20, 0x20	; 32
    160e:	51 e4       	ldi	r21, 0x41	; 65
    1610:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1614:	dc 01       	movw	r26, r24
    1616:	cb 01       	movw	r24, r22
    1618:	bc 01       	movw	r22, r24
    161a:	cd 01       	movw	r24, r26
    161c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	9c 8b       	std	Y+20, r25	; 0x14
    1626:	8b 8b       	std	Y+19, r24	; 0x13
    1628:	0f c0       	rjmp	.+30     	; 0x1648 <CLCD_voidSendData+0x35a>
    162a:	88 ec       	ldi	r24, 0xC8	; 200
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	9a 8b       	std	Y+18, r25	; 0x12
    1630:	89 8b       	std	Y+17, r24	; 0x11
    1632:	89 89       	ldd	r24, Y+17	; 0x11
    1634:	9a 89       	ldd	r25, Y+18	; 0x12
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	f1 f7       	brne	.-4      	; 0x1636 <CLCD_voidSendData+0x348>
    163a:	9a 8b       	std	Y+18, r25	; 0x12
    163c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163e:	8b 89       	ldd	r24, Y+19	; 0x13
    1640:	9c 89       	ldd	r25, Y+20	; 0x14
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	9c 8b       	std	Y+20, r25	; 0x14
    1646:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1648:	8b 89       	ldd	r24, Y+19	; 0x13
    164a:	9c 89       	ldd	r25, Y+20	; 0x14
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	69 f7       	brne	.-38     	; 0x162a <CLCD_voidSendData+0x33c>
    1650:	14 c0       	rjmp	.+40     	; 0x167a <CLCD_voidSendData+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1652:	6d 89       	ldd	r22, Y+21	; 0x15
    1654:	7e 89       	ldd	r23, Y+22	; 0x16
    1656:	8f 89       	ldd	r24, Y+23	; 0x17
    1658:	98 8d       	ldd	r25, Y+24	; 0x18
    165a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	9c 8b       	std	Y+20, r25	; 0x14
    1664:	8b 8b       	std	Y+19, r24	; 0x13
    1666:	8b 89       	ldd	r24, Y+19	; 0x13
    1668:	9c 89       	ldd	r25, Y+20	; 0x14
    166a:	98 8b       	std	Y+16, r25	; 0x10
    166c:	8f 87       	std	Y+15, r24	; 0x0f
    166e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1670:	98 89       	ldd	r25, Y+16	; 0x10
    1672:	01 97       	sbiw	r24, 0x01	; 1
    1674:	f1 f7       	brne	.-4      	; 0x1672 <CLCD_voidSendData+0x384>
    1676:	98 8b       	std	Y+16, r25	; 0x10
    1678:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	62 e0       	ldi	r22, 0x02	; 2
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	0e 94 ad 0e 	call	0x1d5a	; 0x1d5a <DIO_u8SetPinValue>
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	a0 e0       	ldi	r26, 0x00	; 0
    168a:	b0 e4       	ldi	r27, 0x40	; 64
    168c:	8b 87       	std	Y+11, r24	; 0x0b
    168e:	9c 87       	std	Y+12, r25	; 0x0c
    1690:	ad 87       	std	Y+13, r26	; 0x0d
    1692:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1694:	6b 85       	ldd	r22, Y+11	; 0x0b
    1696:	7c 85       	ldd	r23, Y+12	; 0x0c
    1698:	8d 85       	ldd	r24, Y+13	; 0x0d
    169a:	9e 85       	ldd	r25, Y+14	; 0x0e
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	4a ef       	ldi	r20, 0xFA	; 250
    16a2:	54 e4       	ldi	r21, 0x44	; 68
    16a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16a8:	dc 01       	movw	r26, r24
    16aa:	cb 01       	movw	r24, r22
    16ac:	8f 83       	std	Y+7, r24	; 0x07
    16ae:	98 87       	std	Y+8, r25	; 0x08
    16b0:	a9 87       	std	Y+9, r26	; 0x09
    16b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16b4:	6f 81       	ldd	r22, Y+7	; 0x07
    16b6:	78 85       	ldd	r23, Y+8	; 0x08
    16b8:	89 85       	ldd	r24, Y+9	; 0x09
    16ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	40 e8       	ldi	r20, 0x80	; 128
    16c2:	5f e3       	ldi	r21, 0x3F	; 63
    16c4:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    16c8:	88 23       	and	r24, r24
    16ca:	2c f4       	brge	.+10     	; 0x16d6 <CLCD_voidSendData+0x3e8>
		__ticks = 1;
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	9e 83       	std	Y+6, r25	; 0x06
    16d2:	8d 83       	std	Y+5, r24	; 0x05
    16d4:	3f c0       	rjmp	.+126    	; 0x1754 <CLCD_voidSendData+0x466>
	else if (__tmp > 65535)
    16d6:	6f 81       	ldd	r22, Y+7	; 0x07
    16d8:	78 85       	ldd	r23, Y+8	; 0x08
    16da:	89 85       	ldd	r24, Y+9	; 0x09
    16dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	3f ef       	ldi	r19, 0xFF	; 255
    16e2:	4f e7       	ldi	r20, 0x7F	; 127
    16e4:	57 e4       	ldi	r21, 0x47	; 71
    16e6:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    16ea:	18 16       	cp	r1, r24
    16ec:	4c f5       	brge	.+82     	; 0x1740 <CLCD_voidSendData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	40 e2       	ldi	r20, 0x20	; 32
    16fc:	51 e4       	ldi	r21, 0x41	; 65
    16fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	bc 01       	movw	r22, r24
    1708:	cd 01       	movw	r24, r26
    170a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	9e 83       	std	Y+6, r25	; 0x06
    1714:	8d 83       	std	Y+5, r24	; 0x05
    1716:	0f c0       	rjmp	.+30     	; 0x1736 <CLCD_voidSendData+0x448>
    1718:	88 ec       	ldi	r24, 0xC8	; 200
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	9c 83       	std	Y+4, r25	; 0x04
    171e:	8b 83       	std	Y+3, r24	; 0x03
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	9c 81       	ldd	r25, Y+4	; 0x04
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	f1 f7       	brne	.-4      	; 0x1724 <CLCD_voidSendData+0x436>
    1728:	9c 83       	std	Y+4, r25	; 0x04
    172a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    172c:	8d 81       	ldd	r24, Y+5	; 0x05
    172e:	9e 81       	ldd	r25, Y+6	; 0x06
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	9e 83       	std	Y+6, r25	; 0x06
    1734:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1736:	8d 81       	ldd	r24, Y+5	; 0x05
    1738:	9e 81       	ldd	r25, Y+6	; 0x06
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	69 f7       	brne	.-38     	; 0x1718 <CLCD_voidSendData+0x42a>
    173e:	14 c0       	rjmp	.+40     	; 0x1768 <CLCD_voidSendData+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1740:	6f 81       	ldd	r22, Y+7	; 0x07
    1742:	78 85       	ldd	r23, Y+8	; 0x08
    1744:	89 85       	ldd	r24, Y+9	; 0x09
    1746:	9a 85       	ldd	r25, Y+10	; 0x0a
    1748:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	9e 83       	std	Y+6, r25	; 0x06
    1752:	8d 83       	std	Y+5, r24	; 0x05
    1754:	8d 81       	ldd	r24, Y+5	; 0x05
    1756:	9e 81       	ldd	r25, Y+6	; 0x06
    1758:	9a 83       	std	Y+2, r25	; 0x02
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	89 81       	ldd	r24, Y+1	; 0x01
    175e:	9a 81       	ldd	r25, Y+2	; 0x02
    1760:	01 97       	sbiw	r24, 0x01	; 1
    1762:	f1 f7       	brne	.-4      	; 0x1760 <CLCD_voidSendData+0x472>
    1764:	9a 83       	std	Y+2, r25	; 0x02
    1766:	89 83       	std	Y+1, r24	; 0x01

	#else

	#endif

}
    1768:	e9 96       	adiw	r28, 0x39	; 57
    176a:	0f b6       	in	r0, 0x3f	; 63
    176c:	f8 94       	cli
    176e:	de bf       	out	0x3e, r29	; 62
    1770:	0f be       	out	0x3f, r0	; 63
    1772:	cd bf       	out	0x3d, r28	; 61
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	08 95       	ret

0000177a <CLCD_voidSendString>:


void CLCD_voidSendString(const char* Copy_PtrString)
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	00 d0       	rcall	.+0      	; 0x1780 <CLCD_voidSendString+0x6>
    1780:	0f 92       	push	r0
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	9b 83       	std	Y+3, r25	; 0x03
    1788:	8a 83       	std	Y+2, r24	; 0x02
	for (u8 i = 0; Copy_PtrString[i] !='\0'; i++)
    178a:	19 82       	std	Y+1, r1	; 0x01
    178c:	0e c0       	rjmp	.+28     	; 0x17aa <CLCD_voidSendString+0x30>
	{
		CLCD_voidSendData(Copy_PtrString[i]);
    178e:	89 81       	ldd	r24, Y+1	; 0x01
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	9b 81       	ldd	r25, Y+3	; 0x03
    1798:	fc 01       	movw	r30, r24
    179a:	e2 0f       	add	r30, r18
    179c:	f3 1f       	adc	r31, r19
    179e:	80 81       	ld	r24, Z
    17a0:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSendData>
}


void CLCD_voidSendString(const char* Copy_PtrString)
{
	for (u8 i = 0; Copy_PtrString[i] !='\0'; i++)
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	8f 5f       	subi	r24, 0xFF	; 255
    17a8:	89 83       	std	Y+1, r24	; 0x01
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	9b 81       	ldd	r25, Y+3	; 0x03
    17b4:	fc 01       	movw	r30, r24
    17b6:	e2 0f       	add	r30, r18
    17b8:	f3 1f       	adc	r31, r19
    17ba:	80 81       	ld	r24, Z
    17bc:	88 23       	and	r24, r24
    17be:	39 f7       	brne	.-50     	; 0x178e <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_PtrString[i]);
	}
}
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <CLCD_voidSendInteger>:



void CLCD_voidSendInteger(u16 Copy_Number)
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	2b 97       	sbiw	r28, 0x0b	; 11
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	f8 94       	cli
    17da:	de bf       	out	0x3e, r29	; 62
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	cd bf       	out	0x3d, r28	; 61
    17e0:	9b 87       	std	Y+11, r25	; 0x0b
    17e2:	8a 87       	std	Y+10, r24	; 0x0a
	if (!Copy_Number)
    17e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    17e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    17e8:	00 97       	sbiw	r24, 0x00	; 0
    17ea:	19 f4       	brne	.+6      	; 0x17f2 <CLCD_voidSendInteger+0x26>
		CLCD_voidSendData('0');
    17ec:	80 e3       	ldi	r24, 0x30	; 48
    17ee:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSendData>
	//reversing number
	u16 Local_u16Number = Copy_Number;
    17f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    17f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    17f6:	9c 83       	std	Y+4, r25	; 0x04
    17f8:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Array[5];
	u8 Local_i1, Local_i2;
	for (Local_i1=0; Local_u16Number!=0; Local_i1++)
    17fa:	1a 82       	std	Y+2, r1	; 0x02
    17fc:	1d c0       	rjmp	.+58     	; 0x1838 <CLCD_voidSendInteger+0x6c>
	{
		Local_u8Array[Local_i1] = Local_u16Number % 10;
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	e8 2f       	mov	r30, r24
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	9c 81       	ldd	r25, Y+4	; 0x04
    1808:	2a e0       	ldi	r18, 0x0A	; 10
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	b9 01       	movw	r22, r18
    180e:	0e 94 ac 12 	call	0x2558	; 0x2558 <__udivmodhi4>
    1812:	28 2f       	mov	r18, r24
    1814:	ce 01       	movw	r24, r28
    1816:	05 96       	adiw	r24, 0x05	; 5
    1818:	e8 0f       	add	r30, r24
    181a:	f9 1f       	adc	r31, r25
    181c:	20 83       	st	Z, r18
		Local_u16Number /=10;
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	2a e0       	ldi	r18, 0x0A	; 10
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	b9 01       	movw	r22, r18
    1828:	0e 94 ac 12 	call	0x2558	; 0x2558 <__udivmodhi4>
    182c:	cb 01       	movw	r24, r22
    182e:	9c 83       	std	Y+4, r25	; 0x04
    1830:	8b 83       	std	Y+3, r24	; 0x03
		CLCD_voidSendData('0');
	//reversing number
	u16 Local_u16Number = Copy_Number;
	u8 Local_u8Array[5];
	u8 Local_i1, Local_i2;
	for (Local_i1=0; Local_u16Number!=0; Local_i1++)
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	8f 5f       	subi	r24, 0xFF	; 255
    1836:	8a 83       	std	Y+2, r24	; 0x02
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	9c 81       	ldd	r25, Y+4	; 0x04
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	f9 f6       	brne	.-66     	; 0x17fe <CLCD_voidSendInteger+0x32>
	{
		Local_u8Array[Local_i1] = Local_u16Number % 10;
		Local_u16Number /=10;
	}
	for (Local_i2 = Local_i1; Local_i2!=0; Local_i2--)
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	89 83       	std	Y+1, r24	; 0x01
    1844:	12 c0       	rjmp	.+36     	; 0x186a <CLCD_voidSendInteger+0x9e>
	{
		CLCD_voidSendData(Local_u8Array[Local_i2-1]+'0');
    1846:	89 81       	ldd	r24, Y+1	; 0x01
    1848:	88 2f       	mov	r24, r24
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	9c 01       	movw	r18, r24
    184e:	21 50       	subi	r18, 0x01	; 1
    1850:	30 40       	sbci	r19, 0x00	; 0
    1852:	ce 01       	movw	r24, r28
    1854:	05 96       	adiw	r24, 0x05	; 5
    1856:	fc 01       	movw	r30, r24
    1858:	e2 0f       	add	r30, r18
    185a:	f3 1f       	adc	r31, r19
    185c:	80 81       	ld	r24, Z
    185e:	80 5d       	subi	r24, 0xD0	; 208
    1860:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSendData>
	for (Local_i1=0; Local_u16Number!=0; Local_i1++)
	{
		Local_u8Array[Local_i1] = Local_u16Number % 10;
		Local_u16Number /=10;
	}
	for (Local_i2 = Local_i1; Local_i2!=0; Local_i2--)
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	81 50       	subi	r24, 0x01	; 1
    1868:	89 83       	std	Y+1, r24	; 0x01
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	88 23       	and	r24, r24
    186e:	59 f7       	brne	.-42     	; 0x1846 <CLCD_voidSendInteger+0x7a>
	{
		CLCD_voidSendData(Local_u8Array[Local_i2-1]+'0');
	}

}
    1870:	2b 96       	adiw	r28, 0x0b	; 11
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	de bf       	out	0x3e, r29	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	cd bf       	out	0x3d, r28	; 61
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <CLCD_voidSendDecimalNumber>:

void CLCD_voidSendDecimalNumber(f32 Copy_Number)
{
    1882:	0f 93       	push	r16
    1884:	1f 93       	push	r17
    1886:	df 93       	push	r29
    1888:	cf 93       	push	r28
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	6a 97       	sbiw	r28, 0x1a	; 26
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	de bf       	out	0x3e, r29	; 62
    1896:	0f be       	out	0x3f, r0	; 63
    1898:	cd bf       	out	0x3d, r28	; 61
    189a:	6e 8b       	std	Y+22, r22	; 0x16
    189c:	7f 8b       	std	Y+23, r23	; 0x17
    189e:	88 8f       	std	Y+24, r24	; 0x18
    18a0:	99 8f       	std	Y+25, r25	; 0x19
	if (!Copy_Number)
    18a2:	1a 8e       	std	Y+26, r1	; 0x1a
    18a4:	6e 89       	ldd	r22, Y+22	; 0x16
    18a6:	7f 89       	ldd	r23, Y+23	; 0x17
    18a8:	88 8d       	ldd	r24, Y+24	; 0x18
    18aa:	99 8d       	ldd	r25, Y+25	; 0x19
    18ac:	20 e0       	ldi	r18, 0x00	; 0
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	40 e0       	ldi	r20, 0x00	; 0
    18b2:	50 e0       	ldi	r21, 0x00	; 0
    18b4:	0e 94 11 03 	call	0x622	; 0x622 <__nesf2>
    18b8:	88 23       	and	r24, r24
    18ba:	11 f0       	breq	.+4      	; 0x18c0 <CLCD_voidSendDecimalNumber+0x3e>
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	8a 8f       	std	Y+26, r24	; 0x1a
    18c0:	81 e0       	ldi	r24, 0x01	; 1
    18c2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18c4:	89 27       	eor	r24, r25
    18c6:	88 23       	and	r24, r24
    18c8:	19 f0       	breq	.+6      	; 0x18d0 <CLCD_voidSendDecimalNumber+0x4e>
		CLCD_voidSendData('0');
    18ca:	80 e3       	ldi	r24, 0x30	; 48
    18cc:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSendData>
	//reversing number
	f32 Local_f32Number = Copy_Number;
    18d0:	8e 89       	ldd	r24, Y+22	; 0x16
    18d2:	9f 89       	ldd	r25, Y+23	; 0x17
    18d4:	a8 8d       	ldd	r26, Y+24	; 0x18
    18d6:	b9 8d       	ldd	r27, Y+25	; 0x19
    18d8:	88 87       	std	Y+8, r24	; 0x08
    18da:	99 87       	std	Y+9, r25	; 0x09
    18dc:	aa 87       	std	Y+10, r26	; 0x0a
    18de:	bb 87       	std	Y+11, r27	; 0x0b
	u8 Local_u8Array[10];
	u8 Local_i1, Local_i2;
	u8 Local_NumOfTens=0;
    18e0:	1d 82       	std	Y+5, r1	; 0x05
    18e2:	13 c0       	rjmp	.+38     	; 0x190a <CLCD_voidSendDecimalNumber+0x88>

	while (Local_f32Number-(u32)Local_f32Number)
	{
		Local_f32Number*=10;
    18e4:	68 85       	ldd	r22, Y+8	; 0x08
    18e6:	79 85       	ldd	r23, Y+9	; 0x09
    18e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    18ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e2       	ldi	r20, 0x20	; 32
    18f2:	51 e4       	ldi	r21, 0x41	; 65
    18f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	88 87       	std	Y+8, r24	; 0x08
    18fe:	99 87       	std	Y+9, r25	; 0x09
    1900:	aa 87       	std	Y+10, r26	; 0x0a
    1902:	bb 87       	std	Y+11, r27	; 0x0b
		Local_NumOfTens++;
    1904:	8d 81       	ldd	r24, Y+5	; 0x05
    1906:	8f 5f       	subi	r24, 0xFF	; 255
    1908:	8d 83       	std	Y+5, r24	; 0x05
	f32 Local_f32Number = Copy_Number;
	u8 Local_u8Array[10];
	u8 Local_i1, Local_i2;
	u8 Local_NumOfTens=0;

	while (Local_f32Number-(u32)Local_f32Number)
    190a:	68 85       	ldd	r22, Y+8	; 0x08
    190c:	79 85       	ldd	r23, Y+9	; 0x09
    190e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1910:	9b 85       	ldd	r25, Y+11	; 0x0b
    1912:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	bc 01       	movw	r22, r24
    191c:	cd 01       	movw	r24, r26
    191e:	0e 94 25 04 	call	0x84a	; 0x84a <__floatunsisf>
    1922:	9b 01       	movw	r18, r22
    1924:	ac 01       	movw	r20, r24
    1926:	68 85       	ldd	r22, Y+8	; 0x08
    1928:	79 85       	ldd	r23, Y+9	; 0x09
    192a:	8a 85       	ldd	r24, Y+10	; 0x0a
    192c:	9b 85       	ldd	r25, Y+11	; 0x0b
    192e:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	bc 01       	movw	r22, r24
    1938:	cd 01       	movw	r24, r26
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	40 e0       	ldi	r20, 0x00	; 0
    1940:	50 e0       	ldi	r21, 0x00	; 0
    1942:	0e 94 11 03 	call	0x622	; 0x622 <__nesf2>
    1946:	88 23       	and	r24, r24
    1948:	69 f6       	brne	.-102    	; 0x18e4 <CLCD_voidSendDecimalNumber+0x62>
		Local_f32Number*=10;
		Local_NumOfTens++;
	}

	//casting
	u32 Local_u32Number = Local_f32Number;
    194a:	68 85       	ldd	r22, Y+8	; 0x08
    194c:	79 85       	ldd	r23, Y+9	; 0x09
    194e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1950:	9b 85       	ldd	r25, Y+11	; 0x0b
    1952:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	89 83       	std	Y+1, r24	; 0x01
    195c:	9a 83       	std	Y+2, r25	; 0x02
    195e:	ab 83       	std	Y+3, r26	; 0x03
    1960:	bc 83       	std	Y+4, r27	; 0x04

	for (Local_i1=0; Local_u32Number!=0; Local_i1++)
    1962:	1f 82       	std	Y+7, r1	; 0x07
    1964:	2d c0       	rjmp	.+90     	; 0x19c0 <CLCD_voidSendDecimalNumber+0x13e>
	{
		Local_u8Array[Local_i1] = Local_u32Number % 10;
    1966:	8f 81       	ldd	r24, Y+7	; 0x07
    1968:	08 2f       	mov	r16, r24
    196a:	10 e0       	ldi	r17, 0x00	; 0
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	9a 81       	ldd	r25, Y+2	; 0x02
    1970:	ab 81       	ldd	r26, Y+3	; 0x03
    1972:	bc 81       	ldd	r27, Y+4	; 0x04
    1974:	2a e0       	ldi	r18, 0x0A	; 10
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	bc 01       	movw	r22, r24
    197e:	cd 01       	movw	r24, r26
    1980:	0e 94 c0 12 	call	0x2580	; 0x2580 <__udivmodsi4>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	28 2f       	mov	r18, r24
    198a:	ce 01       	movw	r24, r28
    198c:	0c 96       	adiw	r24, 0x0c	; 12
    198e:	fc 01       	movw	r30, r24
    1990:	e0 0f       	add	r30, r16
    1992:	f1 1f       	adc	r31, r17
    1994:	20 83       	st	Z, r18
		Local_u32Number /=10;
    1996:	89 81       	ldd	r24, Y+1	; 0x01
    1998:	9a 81       	ldd	r25, Y+2	; 0x02
    199a:	ab 81       	ldd	r26, Y+3	; 0x03
    199c:	bc 81       	ldd	r27, Y+4	; 0x04
    199e:	2a e0       	ldi	r18, 0x0A	; 10
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e0       	ldi	r20, 0x00	; 0
    19a4:	50 e0       	ldi	r21, 0x00	; 0
    19a6:	bc 01       	movw	r22, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	0e 94 c0 12 	call	0x2580	; 0x2580 <__udivmodsi4>
    19ae:	da 01       	movw	r26, r20
    19b0:	c9 01       	movw	r24, r18
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	9a 83       	std	Y+2, r25	; 0x02
    19b6:	ab 83       	std	Y+3, r26	; 0x03
    19b8:	bc 83       	std	Y+4, r27	; 0x04
	}

	//casting
	u32 Local_u32Number = Local_f32Number;

	for (Local_i1=0; Local_u32Number!=0; Local_i1++)
    19ba:	8f 81       	ldd	r24, Y+7	; 0x07
    19bc:	8f 5f       	subi	r24, 0xFF	; 255
    19be:	8f 83       	std	Y+7, r24	; 0x07
    19c0:	89 81       	ldd	r24, Y+1	; 0x01
    19c2:	9a 81       	ldd	r25, Y+2	; 0x02
    19c4:	ab 81       	ldd	r26, Y+3	; 0x03
    19c6:	bc 81       	ldd	r27, Y+4	; 0x04
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	a1 05       	cpc	r26, r1
    19cc:	b1 05       	cpc	r27, r1
    19ce:	59 f6       	brne	.-106    	; 0x1966 <CLCD_voidSendDecimalNumber+0xe4>
	{
		Local_u8Array[Local_i1] = Local_u32Number % 10;
		Local_u32Number /=10;
	}

	if (Local_i1 == Local_NumOfTens)
    19d0:	9f 81       	ldd	r25, Y+7	; 0x07
    19d2:	8d 81       	ldd	r24, Y+5	; 0x05
    19d4:	98 17       	cp	r25, r24
    19d6:	19 f4       	brne	.+6      	; 0x19de <CLCD_voidSendDecimalNumber+0x15c>
		CLCD_voidSendData('0');
    19d8:	80 e3       	ldi	r24, 0x30	; 48
    19da:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSendData>

	for (Local_i2 = Local_i1; Local_i2!=0; Local_i2--)
    19de:	8f 81       	ldd	r24, Y+7	; 0x07
    19e0:	8e 83       	std	Y+6, r24	; 0x06
    19e2:	19 c0       	rjmp	.+50     	; 0x1a16 <CLCD_voidSendDecimalNumber+0x194>
	{
		if (Local_i2 == Local_NumOfTens)
    19e4:	9e 81       	ldd	r25, Y+6	; 0x06
    19e6:	8d 81       	ldd	r24, Y+5	; 0x05
    19e8:	98 17       	cp	r25, r24
    19ea:	19 f4       	brne	.+6      	; 0x19f2 <CLCD_voidSendDecimalNumber+0x170>
			CLCD_voidSendData('.');
    19ec:	8e e2       	ldi	r24, 0x2E	; 46
    19ee:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSendData>
		CLCD_voidSendData(Local_u8Array[Local_i2-1]+'0');
    19f2:	8e 81       	ldd	r24, Y+6	; 0x06
    19f4:	88 2f       	mov	r24, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	9c 01       	movw	r18, r24
    19fa:	21 50       	subi	r18, 0x01	; 1
    19fc:	30 40       	sbci	r19, 0x00	; 0
    19fe:	ce 01       	movw	r24, r28
    1a00:	0c 96       	adiw	r24, 0x0c	; 12
    1a02:	fc 01       	movw	r30, r24
    1a04:	e2 0f       	add	r30, r18
    1a06:	f3 1f       	adc	r31, r19
    1a08:	80 81       	ld	r24, Z
    1a0a:	80 5d       	subi	r24, 0xD0	; 208
    1a0c:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSendData>
	}

	if (Local_i1 == Local_NumOfTens)
		CLCD_voidSendData('0');

	for (Local_i2 = Local_i1; Local_i2!=0; Local_i2--)
    1a10:	8e 81       	ldd	r24, Y+6	; 0x06
    1a12:	81 50       	subi	r24, 0x01	; 1
    1a14:	8e 83       	std	Y+6, r24	; 0x06
    1a16:	8e 81       	ldd	r24, Y+6	; 0x06
    1a18:	88 23       	and	r24, r24
    1a1a:	21 f7       	brne	.-56     	; 0x19e4 <CLCD_voidSendDecimalNumber+0x162>
		if (Local_i2 == Local_NumOfTens)
			CLCD_voidSendData('.');
		CLCD_voidSendData(Local_u8Array[Local_i2-1]+'0');
	}

	if (Local_NumOfTens == 0)
    1a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1e:	88 23       	and	r24, r24
    1a20:	31 f4       	brne	.+12     	; 0x1a2e <CLCD_voidSendDecimalNumber+0x1ac>
	{
		CLCD_voidSendData('.');
    1a22:	8e e2       	ldi	r24, 0x2E	; 46
    1a24:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSendData>
		CLCD_voidSendData('0');
    1a28:	80 e3       	ldi	r24, 0x30	; 48
    1a2a:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSendData>
	}
}
    1a2e:	6a 96       	adiw	r28, 0x1a	; 26
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	1f 91       	pop	r17
    1a40:	0f 91       	pop	r16
    1a42:	08 95       	ret

00001a44 <CLCD_voidGoToRowColumn>:


void CLCD_voidGoToRowColumn(u8 Copy_u8xPosition, u8 Copy_u8yPosition)
{
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <CLCD_voidGoToRowColumn+0x6>
    1a4a:	00 d0       	rcall	.+0      	; 0x1a4c <CLCD_voidGoToRowColumn+0x8>
    1a4c:	0f 92       	push	r0
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	8a 83       	std	Y+2, r24	; 0x02
    1a54:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress;
	switch(Copy_u8xPosition)
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	3d 83       	std	Y+5, r19	; 0x05
    1a5e:	2c 83       	std	Y+4, r18	; 0x04
    1a60:	8c 81       	ldd	r24, Y+4	; 0x04
    1a62:	9d 81       	ldd	r25, Y+5	; 0x05
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	91 05       	cpc	r25, r1
    1a68:	c1 f0       	breq	.+48     	; 0x1a9a <CLCD_voidGoToRowColumn+0x56>
    1a6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a6e:	22 30       	cpi	r18, 0x02	; 2
    1a70:	31 05       	cpc	r19, r1
    1a72:	2c f4       	brge	.+10     	; 0x1a7e <CLCD_voidGoToRowColumn+0x3a>
    1a74:	8c 81       	ldd	r24, Y+4	; 0x04
    1a76:	9d 81       	ldd	r25, Y+5	; 0x05
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	61 f0       	breq	.+24     	; 0x1a94 <CLCD_voidGoToRowColumn+0x50>
    1a7c:	19 c0       	rjmp	.+50     	; 0x1ab0 <CLCD_voidGoToRowColumn+0x6c>
    1a7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a80:	3d 81       	ldd	r19, Y+5	; 0x05
    1a82:	22 30       	cpi	r18, 0x02	; 2
    1a84:	31 05       	cpc	r19, r1
    1a86:	69 f0       	breq	.+26     	; 0x1aa2 <CLCD_voidGoToRowColumn+0x5e>
    1a88:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a8c:	83 30       	cpi	r24, 0x03	; 3
    1a8e:	91 05       	cpc	r25, r1
    1a90:	61 f0       	breq	.+24     	; 0x1aaa <CLCD_voidGoToRowColumn+0x66>
    1a92:	0e c0       	rjmp	.+28     	; 0x1ab0 <CLCD_voidGoToRowColumn+0x6c>
	{
		case 0:  Local_u8Adress = Copy_u8yPosition;  		break;
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	89 83       	std	Y+1, r24	; 0x01
    1a98:	0b c0       	rjmp	.+22     	; 0x1ab0 <CLCD_voidGoToRowColumn+0x6c>
		case 1:  Local_u8Adress = Copy_u8yPosition + 0x40;  break;
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	80 5c       	subi	r24, 0xC0	; 192
    1a9e:	89 83       	std	Y+1, r24	; 0x01
    1aa0:	07 c0       	rjmp	.+14     	; 0x1ab0 <CLCD_voidGoToRowColumn+0x6c>
		case 2:  Local_u8Adress = Copy_u8yPosition + 0x14;  break;
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	8c 5e       	subi	r24, 0xEC	; 236
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	03 c0       	rjmp	.+6      	; 0x1ab0 <CLCD_voidGoToRowColumn+0x6c>
		case 3:  Local_u8Adress = Copy_u8yPosition + 0x54;	break;
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	8c 5a       	subi	r24, 0xAC	; 172
    1aae:	89 83       	std	Y+1, r24	; 0x01
		default: break;
	}

	/* setting the last bit ,As the command is (1 bit[7] , Address counter bits[6:0])*/
	SET_BIT(Local_u8Adress,7);
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	80 68       	ori	r24, 0x80	; 128
    1ab4:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidSendCommand(Local_u8Adress);
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
    1ab8:	0e 94 31 07 	call	0xe62	; 0xe62 <CLCD_voidSendCommand>
}
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <CLCD_voidSendSpecialCharacter>:



void CLCD_voidSendSpecialCharacter(const u8* Copy_u8Arr, u8 Copy_u8PatternNumber)
{
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	00 d0       	rcall	.+0      	; 0x1ad2 <CLCD_voidSendSpecialCharacter+0x6>
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <CLCD_voidSendSpecialCharacter+0x8>
    1ad4:	0f 92       	push	r0
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
    1ada:	9c 83       	std	Y+4, r25	; 0x04
    1adc:	8b 83       	std	Y+3, r24	; 0x03
    1ade:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8CGRAMAddress = 0;
    1ae0:	1a 82       	std	Y+2, r1	; 0x02
	Local_u8CGRAMAddress = Copy_u8PatternNumber*8;
    1ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(Local_u8CGRAMAddress,6);
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	80 64       	ori	r24, 0x40	; 64
    1afa:	8a 83       	std	Y+2, r24	; 0x02

	/*moving to CGRAM to write the special character inside it*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress);
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	0e 94 31 07 	call	0xe62	; 0xe62 <CLCD_voidSendCommand>

	/* writing the special character*/
	for (u8 i = 0; i<8; i++)
    1b02:	19 82       	std	Y+1, r1	; 0x01
    1b04:	0e c0       	rjmp	.+28     	; 0x1b22 <CLCD_voidSendSpecialCharacter+0x56>
	{
		CLCD_voidSendData(Copy_u8Arr[i]);
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	fc 01       	movw	r30, r24
    1b12:	e2 0f       	add	r30, r18
    1b14:	f3 1f       	adc	r31, r19
    1b16:	80 81       	ld	r24, Z
    1b18:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSendData>

	/*moving to CGRAM to write the special character inside it*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress);

	/* writing the special character*/
	for (u8 i = 0; i<8; i++)
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	8f 5f       	subi	r24, 0xFF	; 255
    1b20:	89 83       	std	Y+1, r24	; 0x01
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	88 30       	cpi	r24, 0x08	; 8
    1b26:	78 f3       	brcs	.-34     	; 0x1b06 <CLCD_voidSendSpecialCharacter+0x3a>
	{
		CLCD_voidSendData(Copy_u8Arr[i]);
	}

	/* switching again to DDRAM */
	CLCD_voidGoToRowColumn (0,0);  // 0,0 can be changed
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <CLCD_voidGoToRowColumn>
}
    1b30:	0f 90       	pop	r0
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	0f 90       	pop	r0
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <CLCD_voidDisplaySpecialCharacter>:

void CLCD_voidDisplaySpecialCharacter(u8 Copy_u8PatternNumber,u8 Copy_u8XPosition,u8 Copy_u8YPosition)
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <CLCD_voidDisplaySpecialCharacter+0x6>
    1b46:	0f 92       	push	r0
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	6a 83       	std	Y+2, r22	; 0x02
    1b50:	4b 83       	std	Y+3, r20	; 0x03
	CLCD_voidGoToRowColumn (Copy_u8XPosition,Copy_u8YPosition);
    1b52:	8a 81       	ldd	r24, Y+2	; 0x02
    1b54:	6b 81       	ldd	r22, Y+3	; 0x03
    1b56:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <CLCD_voidGoToRowColumn>
	CLCD_voidSendData(Copy_u8PatternNumber);
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	0e 94 77 09 	call	0x12ee	; 0x12ee <CLCD_voidSendData>
}
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	cf 91       	pop	r28
    1b68:	df 91       	pop	r29
    1b6a:	08 95       	ret

00001b6c <DIO_voidInit>:
#include "DIO_interface.h"

/*****************************************************************************************/
#if DIO_CONFIG == 1
void DIO_voidInit()
{
    1b6c:	df 93       	push	r29
    1b6e:	cf 93       	push	r28
    1b70:	cd b7       	in	r28, 0x3d	; 61
    1b72:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDirection(DIO_u8PORTA, CONC(A7,A6,A5,A4,A3,A2,A1,A0));
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	6c ef       	ldi	r22, 0xFC	; 252
    1b78:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(DIO_u8PORTB, CONC(B7,B6,B5,B4,B3,B2,B1,B0));
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	6f ef       	ldi	r22, 0xFF	; 255
    1b80:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(DIO_u8PORTC, CONC(C7,C6,C5,C4,C3,C2,C1,C0));
    1b84:	82 e0       	ldi	r24, 0x02	; 2
    1b86:	6f ef       	ldi	r22, 0xFF	; 255
    1b88:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(DIO_u8PORTD, CONC(D7,D6,D5,D4,D3,D2,D1,D0));
    1b8c:	83 e0       	ldi	r24, 0x03	; 3
    1b8e:	63 e1       	ldi	r22, 0x13	; 19
    1b90:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <DIO_u8SetPortDirection>
}
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <DIO_u8SetPortDirection>:
#endif

/*****************************************************************************************/

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <DIO_u8SetPortDirection+0x6>
    1ba0:	00 d0       	rcall	.+0      	; 0x1ba2 <DIO_u8SetPortDirection+0x8>
    1ba2:	0f 92       	push	r0
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
    1ba8:	8a 83       	std	Y+2, r24	; 0x02
    1baa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    1bac:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	3d 83       	std	Y+5, r19	; 0x05
    1bb6:	2c 83       	std	Y+4, r18	; 0x04
    1bb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bba:	9d 81       	ldd	r25, Y+5	; 0x05
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	91 05       	cpc	r25, r1
    1bc0:	d1 f0       	breq	.+52     	; 0x1bf6 <DIO_u8SetPortDirection+0x5c>
    1bc2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bc4:	3d 81       	ldd	r19, Y+5	; 0x05
    1bc6:	22 30       	cpi	r18, 0x02	; 2
    1bc8:	31 05       	cpc	r19, r1
    1bca:	2c f4       	brge	.+10     	; 0x1bd6 <DIO_u8SetPortDirection+0x3c>
    1bcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bce:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	61 f0       	breq	.+24     	; 0x1bec <DIO_u8SetPortDirection+0x52>
    1bd4:	1f c0       	rjmp	.+62     	; 0x1c14 <DIO_u8SetPortDirection+0x7a>
    1bd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1bd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bda:	22 30       	cpi	r18, 0x02	; 2
    1bdc:	31 05       	cpc	r19, r1
    1bde:	81 f0       	breq	.+32     	; 0x1c00 <DIO_u8SetPortDirection+0x66>
    1be0:	8c 81       	ldd	r24, Y+4	; 0x04
    1be2:	9d 81       	ldd	r25, Y+5	; 0x05
    1be4:	83 30       	cpi	r24, 0x03	; 3
    1be6:	91 05       	cpc	r25, r1
    1be8:	81 f0       	breq	.+32     	; 0x1c0a <DIO_u8SetPortDirection+0x70>
    1bea:	14 c0       	rjmp	.+40     	; 0x1c14 <DIO_u8SetPortDirection+0x7a>
	{ 
		case DIO_u8PORTA:	DDRA_REG = Copy_u8Direction; 	break;
    1bec:	ea e3       	ldi	r30, 0x3A	; 58
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	80 83       	st	Z, r24
    1bf4:	11 c0       	rjmp	.+34     	; 0x1c18 <DIO_u8SetPortDirection+0x7e>
		case DIO_u8PORTB:	DDRB_REG = Copy_u8Direction; 	break;
    1bf6:	e7 e3       	ldi	r30, 0x37	; 55
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	80 83       	st	Z, r24
    1bfe:	0c c0       	rjmp	.+24     	; 0x1c18 <DIO_u8SetPortDirection+0x7e>
		case DIO_u8PORTC:	DDRC_REG = Copy_u8Direction; 	break;
    1c00:	e4 e3       	ldi	r30, 0x34	; 52
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	80 83       	st	Z, r24
    1c08:	07 c0       	rjmp	.+14     	; 0x1c18 <DIO_u8SetPortDirection+0x7e>
		case DIO_u8PORTD:	DDRD_REG = Copy_u8Direction; 	break;
    1c0a:	e1 e3       	ldi	r30, 0x31	; 49
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	80 83       	st	Z, r24
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <DIO_u8SetPortDirection+0x7e>
		default:			Local_u8ErrorState = 1; break;
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	cf 91       	pop	r28
    1c26:	df 91       	pop	r29
    1c28:	08 95       	ret

00001c2a <DIO_u8GetPinValue>:

/*****************************************************************************************/
u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_u8Value)

{
    1c2a:	df 93       	push	r29
    1c2c:	cf 93       	push	r28
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	27 97       	sbiw	r28, 0x07	; 7
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	8a 83       	std	Y+2, r24	; 0x02
    1c40:	6b 83       	std	Y+3, r22	; 0x03
    1c42:	5d 83       	std	Y+5, r21	; 0x05
    1c44:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    1c46:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Pin <= 7) && (Copy_u8Value !=NULL))
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	88 30       	cpi	r24, 0x08	; 8
    1c4c:	08 f0       	brcs	.+2      	; 0x1c50 <DIO_u8GetPinValue+0x26>
    1c4e:	79 c0       	rjmp	.+242    	; 0x1d42 <DIO_u8GetPinValue+0x118>
    1c50:	8c 81       	ldd	r24, Y+4	; 0x04
    1c52:	9d 81       	ldd	r25, Y+5	; 0x05
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <DIO_u8GetPinValue+0x30>
    1c58:	74 c0       	rjmp	.+232    	; 0x1d42 <DIO_u8GetPinValue+0x118>
	{  
		switch(Copy_u8Port)
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	28 2f       	mov	r18, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	3f 83       	std	Y+7, r19	; 0x07
    1c62:	2e 83       	std	Y+6, r18	; 0x06
    1c64:	4e 81       	ldd	r20, Y+6	; 0x06
    1c66:	5f 81       	ldd	r21, Y+7	; 0x07
    1c68:	41 30       	cpi	r20, 0x01	; 1
    1c6a:	51 05       	cpc	r21, r1
    1c6c:	59 f1       	breq	.+86     	; 0x1cc4 <DIO_u8GetPinValue+0x9a>
    1c6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c70:	9f 81       	ldd	r25, Y+7	; 0x07
    1c72:	82 30       	cpi	r24, 0x02	; 2
    1c74:	91 05       	cpc	r25, r1
    1c76:	34 f4       	brge	.+12     	; 0x1c84 <DIO_u8GetPinValue+0x5a>
    1c78:	2e 81       	ldd	r18, Y+6	; 0x06
    1c7a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c7c:	21 15       	cp	r18, r1
    1c7e:	31 05       	cpc	r19, r1
    1c80:	69 f0       	breq	.+26     	; 0x1c9c <DIO_u8GetPinValue+0x72>
    1c82:	5c c0       	rjmp	.+184    	; 0x1d3c <DIO_u8GetPinValue+0x112>
    1c84:	4e 81       	ldd	r20, Y+6	; 0x06
    1c86:	5f 81       	ldd	r21, Y+7	; 0x07
    1c88:	42 30       	cpi	r20, 0x02	; 2
    1c8a:	51 05       	cpc	r21, r1
    1c8c:	79 f1       	breq	.+94     	; 0x1cec <DIO_u8GetPinValue+0xc2>
    1c8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c90:	9f 81       	ldd	r25, Y+7	; 0x07
    1c92:	83 30       	cpi	r24, 0x03	; 3
    1c94:	91 05       	cpc	r25, r1
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <DIO_u8GetPinValue+0x70>
    1c98:	3d c0       	rjmp	.+122    	; 0x1d14 <DIO_u8GetPinValue+0xea>
    1c9a:	50 c0       	rjmp	.+160    	; 0x1d3c <DIO_u8GetPinValue+0x112>
		{    
		  case DIO_u8PORTA:	*Copy_u8Value = GET_BIT(PINA_REG, Copy_u8Pin);	break;
    1c9c:	e9 e3       	ldi	r30, 0x39	; 57
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	88 2f       	mov	r24, r24
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	a9 01       	movw	r20, r18
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <DIO_u8GetPinValue+0x8a>
    1cb0:	55 95       	asr	r21
    1cb2:	47 95       	ror	r20
    1cb4:	8a 95       	dec	r24
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <DIO_u8GetPinValue+0x86>
    1cb8:	ca 01       	movw	r24, r20
    1cba:	81 70       	andi	r24, 0x01	; 1
    1cbc:	ec 81       	ldd	r30, Y+4	; 0x04
    1cbe:	fd 81       	ldd	r31, Y+5	; 0x05
    1cc0:	80 83       	st	Z, r24
    1cc2:	41 c0       	rjmp	.+130    	; 0x1d46 <DIO_u8GetPinValue+0x11c>
		  case DIO_u8PORTB:	*Copy_u8Value = GET_BIT(PINB_REG, Copy_u8Pin);	break;
    1cc4:	e6 e3       	ldi	r30, 0x36	; 54
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd0:	88 2f       	mov	r24, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	a9 01       	movw	r20, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <DIO_u8GetPinValue+0xb2>
    1cd8:	55 95       	asr	r21
    1cda:	47 95       	ror	r20
    1cdc:	8a 95       	dec	r24
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <DIO_u8GetPinValue+0xae>
    1ce0:	ca 01       	movw	r24, r20
    1ce2:	81 70       	andi	r24, 0x01	; 1
    1ce4:	ec 81       	ldd	r30, Y+4	; 0x04
    1ce6:	fd 81       	ldd	r31, Y+5	; 0x05
    1ce8:	80 83       	st	Z, r24
    1cea:	2d c0       	rjmp	.+90     	; 0x1d46 <DIO_u8GetPinValue+0x11c>
		  case DIO_u8PORTC:	*Copy_u8Value = GET_BIT(PINC_REG, Copy_u8Pin);	break;
    1cec:	e3 e3       	ldi	r30, 0x33	; 51
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	28 2f       	mov	r18, r24
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	88 2f       	mov	r24, r24
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	a9 01       	movw	r20, r18
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <DIO_u8GetPinValue+0xda>
    1d00:	55 95       	asr	r21
    1d02:	47 95       	ror	r20
    1d04:	8a 95       	dec	r24
    1d06:	e2 f7       	brpl	.-8      	; 0x1d00 <DIO_u8GetPinValue+0xd6>
    1d08:	ca 01       	movw	r24, r20
    1d0a:	81 70       	andi	r24, 0x01	; 1
    1d0c:	ec 81       	ldd	r30, Y+4	; 0x04
    1d0e:	fd 81       	ldd	r31, Y+5	; 0x05
    1d10:	80 83       	st	Z, r24
    1d12:	19 c0       	rjmp	.+50     	; 0x1d46 <DIO_u8GetPinValue+0x11c>
		  case DIO_u8PORTD:	*Copy_u8Value = GET_BIT(PIND_REG, Copy_u8Pin);	break;
    1d14:	e0 e3       	ldi	r30, 0x30	; 48
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	88 2f       	mov	r24, r24
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	a9 01       	movw	r20, r18
    1d26:	02 c0       	rjmp	.+4      	; 0x1d2c <DIO_u8GetPinValue+0x102>
    1d28:	55 95       	asr	r21
    1d2a:	47 95       	ror	r20
    1d2c:	8a 95       	dec	r24
    1d2e:	e2 f7       	brpl	.-8      	; 0x1d28 <DIO_u8GetPinValue+0xfe>
    1d30:	ca 01       	movw	r24, r20
    1d32:	81 70       	andi	r24, 0x01	; 1
    1d34:	ec 81       	ldd	r30, Y+4	; 0x04
    1d36:	fd 81       	ldd	r31, Y+5	; 0x05
    1d38:	80 83       	st	Z, r24
    1d3a:	05 c0       	rjmp	.+10     	; 0x1d46 <DIO_u8GetPinValue+0x11c>
		  default:			Local_u8ErrorState = 1; break;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	89 83       	std	Y+1, r24	; 0x01
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d48:	27 96       	adiw	r28, 0x07	; 7
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	f8 94       	cli
    1d4e:	de bf       	out	0x3e, r29	; 62
    1d50:	0f be       	out	0x3f, r0	; 63
    1d52:	cd bf       	out	0x3d, r28	; 61
    1d54:	cf 91       	pop	r28
    1d56:	df 91       	pop	r29
    1d58:	08 95       	ret

00001d5a <DIO_u8SetPinValue>:


/*****************************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1d5a:	df 93       	push	r29
    1d5c:	cf 93       	push	r28
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	28 97       	sbiw	r28, 0x08	; 8
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	f8 94       	cli
    1d68:	de bf       	out	0x3e, r29	; 62
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	cd bf       	out	0x3d, r28	; 61
    1d6e:	8a 83       	std	Y+2, r24	; 0x02
    1d70:	6b 83       	std	Y+3, r22	; 0x03
    1d72:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    1d74:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= 7)
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	88 30       	cpi	r24, 0x08	; 8
    1d7a:	08 f0       	brcs	.+2      	; 0x1d7e <DIO_u8SetPinValue+0x24>
    1d7c:	f4 c0       	rjmp	.+488    	; 0x1f66 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_HIGH)
    1d7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d80:	81 30       	cpi	r24, 0x01	; 1
    1d82:	09 f0       	breq	.+2      	; 0x1d86 <DIO_u8SetPinValue+0x2c>
    1d84:	72 c0       	rjmp	.+228    	; 0x1e6a <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	38 87       	std	Y+8, r19	; 0x08
    1d8e:	2f 83       	std	Y+7, r18	; 0x07
    1d90:	8f 81       	ldd	r24, Y+7	; 0x07
    1d92:	98 85       	ldd	r25, Y+8	; 0x08
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	91 05       	cpc	r25, r1
    1d98:	49 f1       	breq	.+82     	; 0x1dec <DIO_u8SetPinValue+0x92>
    1d9a:	2f 81       	ldd	r18, Y+7	; 0x07
    1d9c:	38 85       	ldd	r19, Y+8	; 0x08
    1d9e:	22 30       	cpi	r18, 0x02	; 2
    1da0:	31 05       	cpc	r19, r1
    1da2:	2c f4       	brge	.+10     	; 0x1dae <DIO_u8SetPinValue+0x54>
    1da4:	8f 81       	ldd	r24, Y+7	; 0x07
    1da6:	98 85       	ldd	r25, Y+8	; 0x08
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	61 f0       	breq	.+24     	; 0x1dc4 <DIO_u8SetPinValue+0x6a>
    1dac:	5b c0       	rjmp	.+182    	; 0x1e64 <DIO_u8SetPinValue+0x10a>
    1dae:	2f 81       	ldd	r18, Y+7	; 0x07
    1db0:	38 85       	ldd	r19, Y+8	; 0x08
    1db2:	22 30       	cpi	r18, 0x02	; 2
    1db4:	31 05       	cpc	r19, r1
    1db6:	71 f1       	breq	.+92     	; 0x1e14 <DIO_u8SetPinValue+0xba>
    1db8:	8f 81       	ldd	r24, Y+7	; 0x07
    1dba:	98 85       	ldd	r25, Y+8	; 0x08
    1dbc:	83 30       	cpi	r24, 0x03	; 3
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	e9 f1       	breq	.+122    	; 0x1e3c <DIO_u8SetPinValue+0xe2>
    1dc2:	50 c0       	rjmp	.+160    	; 0x1e64 <DIO_u8SetPinValue+0x10a>
			{
				case DIO_u8PORTA:  SET_BIT(PORTA_REG,Copy_u8Pin);	break;
    1dc4:	ab e3       	ldi	r26, 0x3B	; 59
    1dc6:	b0 e0       	ldi	r27, 0x00	; 0
    1dc8:	eb e3       	ldi	r30, 0x3B	; 59
    1dca:	f0 e0       	ldi	r31, 0x00	; 0
    1dcc:	80 81       	ld	r24, Z
    1dce:	48 2f       	mov	r20, r24
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	02 2e       	mov	r0, r18
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <DIO_u8SetPinValue+0x88>
    1dde:	88 0f       	add	r24, r24
    1de0:	99 1f       	adc	r25, r25
    1de2:	0a 94       	dec	r0
    1de4:	e2 f7       	brpl	.-8      	; 0x1dde <DIO_u8SetPinValue+0x84>
    1de6:	84 2b       	or	r24, r20
    1de8:	8c 93       	st	X, r24
    1dea:	bf c0       	rjmp	.+382    	; 0x1f6a <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB:  SET_BIT(PORTB_REG,Copy_u8Pin);	break;
    1dec:	a8 e3       	ldi	r26, 0x38	; 56
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e8 e3       	ldi	r30, 0x38	; 56
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	48 2f       	mov	r20, r24
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	02 2e       	mov	r0, r18
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <DIO_u8SetPinValue+0xb0>
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	0a 94       	dec	r0
    1e0c:	e2 f7       	brpl	.-8      	; 0x1e06 <DIO_u8SetPinValue+0xac>
    1e0e:	84 2b       	or	r24, r20
    1e10:	8c 93       	st	X, r24
    1e12:	ab c0       	rjmp	.+342    	; 0x1f6a <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC:  SET_BIT(PORTC_REG,Copy_u8Pin);	break;
    1e14:	a5 e3       	ldi	r26, 0x35	; 53
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e5 e3       	ldi	r30, 0x35	; 53
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	48 2f       	mov	r20, r24
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	02 2e       	mov	r0, r18
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <DIO_u8SetPinValue+0xd8>
    1e2e:	88 0f       	add	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	0a 94       	dec	r0
    1e34:	e2 f7       	brpl	.-8      	; 0x1e2e <DIO_u8SetPinValue+0xd4>
    1e36:	84 2b       	or	r24, r20
    1e38:	8c 93       	st	X, r24
    1e3a:	97 c0       	rjmp	.+302    	; 0x1f6a <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD:  SET_BIT(PORTD_REG,Copy_u8Pin);	break;
    1e3c:	a2 e3       	ldi	r26, 0x32	; 50
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e2 e3       	ldi	r30, 0x32	; 50
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	80 81       	ld	r24, Z
    1e46:	48 2f       	mov	r20, r24
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	02 2e       	mov	r0, r18
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <DIO_u8SetPinValue+0x100>
    1e56:	88 0f       	add	r24, r24
    1e58:	99 1f       	adc	r25, r25
    1e5a:	0a 94       	dec	r0
    1e5c:	e2 f7       	brpl	.-8      	; 0x1e56 <DIO_u8SetPinValue+0xfc>
    1e5e:	84 2b       	or	r24, r20
    1e60:	8c 93       	st	X, r24
    1e62:	83 c0       	rjmp	.+262    	; 0x1f6a <DIO_u8SetPinValue+0x210>
				default:		   Local_u8ErrorState = 1; break;	
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	80 c0       	rjmp	.+256    	; 0x1f6a <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value == DIO_u8PIN_LOW)
    1e6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e6c:	88 23       	and	r24, r24
    1e6e:	09 f0       	breq	.+2      	; 0x1e72 <DIO_u8SetPinValue+0x118>
    1e70:	77 c0       	rjmp	.+238    	; 0x1f60 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	28 2f       	mov	r18, r24
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	3e 83       	std	Y+6, r19	; 0x06
    1e7a:	2d 83       	std	Y+5, r18	; 0x05
    1e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e80:	81 30       	cpi	r24, 0x01	; 1
    1e82:	91 05       	cpc	r25, r1
    1e84:	59 f1       	breq	.+86     	; 0x1edc <DIO_u8SetPinValue+0x182>
    1e86:	2d 81       	ldd	r18, Y+5	; 0x05
    1e88:	3e 81       	ldd	r19, Y+6	; 0x06
    1e8a:	22 30       	cpi	r18, 0x02	; 2
    1e8c:	31 05       	cpc	r19, r1
    1e8e:	2c f4       	brge	.+10     	; 0x1e9a <DIO_u8SetPinValue+0x140>
    1e90:	8d 81       	ldd	r24, Y+5	; 0x05
    1e92:	9e 81       	ldd	r25, Y+6	; 0x06
    1e94:	00 97       	sbiw	r24, 0x00	; 0
    1e96:	69 f0       	breq	.+26     	; 0x1eb2 <DIO_u8SetPinValue+0x158>
    1e98:	60 c0       	rjmp	.+192    	; 0x1f5a <DIO_u8SetPinValue+0x200>
    1e9a:	2d 81       	ldd	r18, Y+5	; 0x05
    1e9c:	3e 81       	ldd	r19, Y+6	; 0x06
    1e9e:	22 30       	cpi	r18, 0x02	; 2
    1ea0:	31 05       	cpc	r19, r1
    1ea2:	89 f1       	breq	.+98     	; 0x1f06 <DIO_u8SetPinValue+0x1ac>
    1ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea8:	83 30       	cpi	r24, 0x03	; 3
    1eaa:	91 05       	cpc	r25, r1
    1eac:	09 f4       	brne	.+2      	; 0x1eb0 <DIO_u8SetPinValue+0x156>
    1eae:	40 c0       	rjmp	.+128    	; 0x1f30 <DIO_u8SetPinValue+0x1d6>
    1eb0:	54 c0       	rjmp	.+168    	; 0x1f5a <DIO_u8SetPinValue+0x200>
			{
				case DIO_u8PORTA:	CLR_BIT(PORTA_REG,Copy_u8Pin);  break;
    1eb2:	ab e3       	ldi	r26, 0x3B	; 59
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	eb e3       	ldi	r30, 0x3B	; 59
    1eb8:	f0 e0       	ldi	r31, 0x00	; 0
    1eba:	80 81       	ld	r24, Z
    1ebc:	48 2f       	mov	r20, r24
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	30 e0       	ldi	r19, 0x00	; 0
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	02 2e       	mov	r0, r18
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <DIO_u8SetPinValue+0x176>
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	0a 94       	dec	r0
    1ed2:	e2 f7       	brpl	.-8      	; 0x1ecc <DIO_u8SetPinValue+0x172>
    1ed4:	80 95       	com	r24
    1ed6:	84 23       	and	r24, r20
    1ed8:	8c 93       	st	X, r24
    1eda:	47 c0       	rjmp	.+142    	; 0x1f6a <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB:	CLR_BIT(PORTB_REG,Copy_u8Pin);  break;
    1edc:	a8 e3       	ldi	r26, 0x38	; 56
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	e8 e3       	ldi	r30, 0x38	; 56
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	48 2f       	mov	r20, r24
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	02 2e       	mov	r0, r18
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <DIO_u8SetPinValue+0x1a0>
    1ef6:	88 0f       	add	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	0a 94       	dec	r0
    1efc:	e2 f7       	brpl	.-8      	; 0x1ef6 <DIO_u8SetPinValue+0x19c>
    1efe:	80 95       	com	r24
    1f00:	84 23       	and	r24, r20
    1f02:	8c 93       	st	X, r24
    1f04:	32 c0       	rjmp	.+100    	; 0x1f6a <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC:	CLR_BIT(PORTC_REG,Copy_u8Pin);  break;
    1f06:	a5 e3       	ldi	r26, 0x35	; 53
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e5 e3       	ldi	r30, 0x35	; 53
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	48 2f       	mov	r20, r24
    1f12:	8b 81       	ldd	r24, Y+3	; 0x03
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	02 2e       	mov	r0, r18
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <DIO_u8SetPinValue+0x1ca>
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	0a 94       	dec	r0
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <DIO_u8SetPinValue+0x1c6>
    1f28:	80 95       	com	r24
    1f2a:	84 23       	and	r24, r20
    1f2c:	8c 93       	st	X, r24
    1f2e:	1d c0       	rjmp	.+58     	; 0x1f6a <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD:	CLR_BIT(PORTD_REG,Copy_u8Pin);  break;
    1f30:	a2 e3       	ldi	r26, 0x32	; 50
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e2 e3       	ldi	r30, 0x32	; 50
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 81       	ld	r24, Z
    1f3a:	48 2f       	mov	r20, r24
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	28 2f       	mov	r18, r24
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	81 e0       	ldi	r24, 0x01	; 1
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	02 2e       	mov	r0, r18
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <DIO_u8SetPinValue+0x1f4>
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	0a 94       	dec	r0
    1f50:	e2 f7       	brpl	.-8      	; 0x1f4a <DIO_u8SetPinValue+0x1f0>
    1f52:	80 95       	com	r24
    1f54:	84 23       	and	r24, r20
    1f56:	8c 93       	st	X, r24
    1f58:	08 c0       	rjmp	.+16     	; 0x1f6a <DIO_u8SetPinValue+0x210>
				default : 			Local_u8ErrorState = 1; break;	
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	89 83       	std	Y+1, r24	; 0x01
    1f5e:	05 c0       	rjmp	.+10     	; 0x1f6a <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = 1;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <DIO_u8SetPinValue+0x210>
		}
		
	}
	else
	{
		Local_u8ErrorState = 1;
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1f6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f6c:	28 96       	adiw	r28, 0x08	; 8
    1f6e:	0f b6       	in	r0, 0x3f	; 63
    1f70:	f8 94       	cli
    1f72:	de bf       	out	0x3e, r29	; 62
    1f74:	0f be       	out	0x3f, r0	; 63
    1f76:	cd bf       	out	0x3d, r28	; 61
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	08 95       	ret

00001f7e <DIO_u8SetPortValue>:

/*****************************************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1f7e:	df 93       	push	r29
    1f80:	cf 93       	push	r28
    1f82:	00 d0       	rcall	.+0      	; 0x1f84 <DIO_u8SetPortValue+0x6>
    1f84:	00 d0       	rcall	.+0      	; 0x1f86 <DIO_u8SetPortValue+0x8>
    1f86:	0f 92       	push	r0
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	8a 83       	std	Y+2, r24	; 0x02
    1f8e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    1f90:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	3d 83       	std	Y+5, r19	; 0x05
    1f9a:	2c 83       	std	Y+4, r18	; 0x04
    1f9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa0:	81 30       	cpi	r24, 0x01	; 1
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	d1 f0       	breq	.+52     	; 0x1fda <DIO_u8SetPortValue+0x5c>
    1fa6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fa8:	3d 81       	ldd	r19, Y+5	; 0x05
    1faa:	22 30       	cpi	r18, 0x02	; 2
    1fac:	31 05       	cpc	r19, r1
    1fae:	2c f4       	brge	.+10     	; 0x1fba <DIO_u8SetPortValue+0x3c>
    1fb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	61 f0       	breq	.+24     	; 0x1fd0 <DIO_u8SetPortValue+0x52>
    1fb8:	1f c0       	rjmp	.+62     	; 0x1ff8 <DIO_u8SetPortValue+0x7a>
    1fba:	2c 81       	ldd	r18, Y+4	; 0x04
    1fbc:	3d 81       	ldd	r19, Y+5	; 0x05
    1fbe:	22 30       	cpi	r18, 0x02	; 2
    1fc0:	31 05       	cpc	r19, r1
    1fc2:	81 f0       	breq	.+32     	; 0x1fe4 <DIO_u8SetPortValue+0x66>
    1fc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc8:	83 30       	cpi	r24, 0x03	; 3
    1fca:	91 05       	cpc	r25, r1
    1fcc:	81 f0       	breq	.+32     	; 0x1fee <DIO_u8SetPortValue+0x70>
    1fce:	14 c0       	rjmp	.+40     	; 0x1ff8 <DIO_u8SetPortValue+0x7a>
	{
		case DIO_u8PORTA:  PORTA_REG = Copy_u8Value;	break;
    1fd0:	eb e3       	ldi	r30, 0x3B	; 59
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	80 83       	st	Z, r24
    1fd8:	11 c0       	rjmp	.+34     	; 0x1ffc <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTB:  PORTB_REG = Copy_u8Value;	break;
    1fda:	e8 e3       	ldi	r30, 0x38	; 56
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	80 83       	st	Z, r24
    1fe2:	0c c0       	rjmp	.+24     	; 0x1ffc <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTC:  PORTC_REG = Copy_u8Value;	break;
    1fe4:	e5 e3       	ldi	r30, 0x35	; 53
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	80 83       	st	Z, r24
    1fec:	07 c0       	rjmp	.+14     	; 0x1ffc <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTD:  PORTD_REG = Copy_u8Value;	break;
    1fee:	e2 e3       	ldi	r30, 0x32	; 50
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	80 83       	st	Z, r24
    1ff6:	02 c0       	rjmp	.+4      	; 0x1ffc <DIO_u8SetPortValue+0x7e>
		default:		   Local_u8ErrorState = 1; break;	
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <DIO_u8TogglePin>:

/*****************************************************************************************/


u8 DIO_u8TogglePin(u8 Copy_u8Port, u8 Copy_u8Pin )
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	00 d0       	rcall	.+0      	; 0x2014 <DIO_u8TogglePin+0x6>
    2014:	00 d0       	rcall	.+0      	; 0x2016 <DIO_u8TogglePin+0x8>
    2016:	0f 92       	push	r0
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	8a 83       	std	Y+2, r24	; 0x02
    201e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    2020:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= 7)
    2022:	8b 81       	ldd	r24, Y+3	; 0x03
    2024:	88 30       	cpi	r24, 0x08	; 8
    2026:	08 f0       	brcs	.+2      	; 0x202a <DIO_u8TogglePin+0x1c>
    2028:	72 c0       	rjmp	.+228    	; 0x210e <DIO_u8TogglePin+0x100>
	{
		switch (Copy_u8Port)
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	3d 83       	std	Y+5, r19	; 0x05
    2032:	2c 83       	std	Y+4, r18	; 0x04
    2034:	8c 81       	ldd	r24, Y+4	; 0x04
    2036:	9d 81       	ldd	r25, Y+5	; 0x05
    2038:	81 30       	cpi	r24, 0x01	; 1
    203a:	91 05       	cpc	r25, r1
    203c:	49 f1       	breq	.+82     	; 0x2090 <DIO_u8TogglePin+0x82>
    203e:	2c 81       	ldd	r18, Y+4	; 0x04
    2040:	3d 81       	ldd	r19, Y+5	; 0x05
    2042:	22 30       	cpi	r18, 0x02	; 2
    2044:	31 05       	cpc	r19, r1
    2046:	2c f4       	brge	.+10     	; 0x2052 <DIO_u8TogglePin+0x44>
    2048:	8c 81       	ldd	r24, Y+4	; 0x04
    204a:	9d 81       	ldd	r25, Y+5	; 0x05
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	61 f0       	breq	.+24     	; 0x2068 <DIO_u8TogglePin+0x5a>
    2050:	5b c0       	rjmp	.+182    	; 0x2108 <DIO_u8TogglePin+0xfa>
    2052:	2c 81       	ldd	r18, Y+4	; 0x04
    2054:	3d 81       	ldd	r19, Y+5	; 0x05
    2056:	22 30       	cpi	r18, 0x02	; 2
    2058:	31 05       	cpc	r19, r1
    205a:	71 f1       	breq	.+92     	; 0x20b8 <DIO_u8TogglePin+0xaa>
    205c:	8c 81       	ldd	r24, Y+4	; 0x04
    205e:	9d 81       	ldd	r25, Y+5	; 0x05
    2060:	83 30       	cpi	r24, 0x03	; 3
    2062:	91 05       	cpc	r25, r1
    2064:	e9 f1       	breq	.+122    	; 0x20e0 <DIO_u8TogglePin+0xd2>
    2066:	50 c0       	rjmp	.+160    	; 0x2108 <DIO_u8TogglePin+0xfa>
		{
			case DIO_u8PORTA: TOGGLE_BIT(PORTA_REG,Copy_u8Pin);  break;
    2068:	ab e3       	ldi	r26, 0x3B	; 59
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	eb e3       	ldi	r30, 0x3B	; 59
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	80 81       	ld	r24, Z
    2072:	48 2f       	mov	r20, r24
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	28 2f       	mov	r18, r24
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	02 2e       	mov	r0, r18
    2080:	02 c0       	rjmp	.+4      	; 0x2086 <DIO_u8TogglePin+0x78>
    2082:	88 0f       	add	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	0a 94       	dec	r0
    2088:	e2 f7       	brpl	.-8      	; 0x2082 <DIO_u8TogglePin+0x74>
    208a:	84 27       	eor	r24, r20
    208c:	8c 93       	st	X, r24
    208e:	41 c0       	rjmp	.+130    	; 0x2112 <DIO_u8TogglePin+0x104>
			case DIO_u8PORTB: TOGGLE_BIT(PORTB_REG,Copy_u8Pin);  break;
    2090:	a8 e3       	ldi	r26, 0x38	; 56
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	e8 e3       	ldi	r30, 0x38	; 56
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	48 2f       	mov	r20, r24
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	28 2f       	mov	r18, r24
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	81 e0       	ldi	r24, 0x01	; 1
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	02 2e       	mov	r0, r18
    20a8:	02 c0       	rjmp	.+4      	; 0x20ae <DIO_u8TogglePin+0xa0>
    20aa:	88 0f       	add	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	0a 94       	dec	r0
    20b0:	e2 f7       	brpl	.-8      	; 0x20aa <DIO_u8TogglePin+0x9c>
    20b2:	84 27       	eor	r24, r20
    20b4:	8c 93       	st	X, r24
    20b6:	2d c0       	rjmp	.+90     	; 0x2112 <DIO_u8TogglePin+0x104>
			case DIO_u8PORTC: TOGGLE_BIT(PORTC_REG,Copy_u8Pin);  break;
    20b8:	a5 e3       	ldi	r26, 0x35	; 53
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	e5 e3       	ldi	r30, 0x35	; 53
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	48 2f       	mov	r20, r24
    20c4:	8b 81       	ldd	r24, Y+3	; 0x03
    20c6:	28 2f       	mov	r18, r24
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	02 2e       	mov	r0, r18
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <DIO_u8TogglePin+0xc8>
    20d2:	88 0f       	add	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	0a 94       	dec	r0
    20d8:	e2 f7       	brpl	.-8      	; 0x20d2 <DIO_u8TogglePin+0xc4>
    20da:	84 27       	eor	r24, r20
    20dc:	8c 93       	st	X, r24
    20de:	19 c0       	rjmp	.+50     	; 0x2112 <DIO_u8TogglePin+0x104>
			case DIO_u8PORTD: TOGGLE_BIT(PORTD_REG,Copy_u8Pin);  break;
    20e0:	a2 e3       	ldi	r26, 0x32	; 50
    20e2:	b0 e0       	ldi	r27, 0x00	; 0
    20e4:	e2 e3       	ldi	r30, 0x32	; 50
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	48 2f       	mov	r20, r24
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	28 2f       	mov	r18, r24
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	02 2e       	mov	r0, r18
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <DIO_u8TogglePin+0xf0>
    20fa:	88 0f       	add	r24, r24
    20fc:	99 1f       	adc	r25, r25
    20fe:	0a 94       	dec	r0
    2100:	e2 f7       	brpl	.-8      	; 0x20fa <DIO_u8TogglePin+0xec>
    2102:	84 27       	eor	r24, r20
    2104:	8c 93       	st	X, r24
    2106:	05 c0       	rjmp	.+10     	; 0x2112 <DIO_u8TogglePin+0x104>
			default: 	      Local_u8ErrorState = 1;
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	89 83       	std	Y+1, r24	; 0x01
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <DIO_u8TogglePin+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2112:	89 81       	ldd	r24, Y+1	; 0x01
}
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <main>:
//#define ARR2 "  |   ||   |        "



void main (void)
{
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	cd b7       	in	r28, 0x3d	; 61
    212a:	de b7       	in	r29, 0x3e	; 62
    212c:	c2 57       	subi	r28, 0x72	; 114
    212e:	d0 40       	sbci	r29, 0x00	; 0
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	de bf       	out	0x3e, r29	; 62
    2136:	0f be       	out	0x3f, r0	; 63
    2138:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    213a:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <DIO_voidInit>
	CLCD_voidInit();
    213e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <CLCD_voidInit>

	u8 CarRowPosition = 1;
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	8e 8b       	std	Y+22, r24	; 0x16
	u8 CarColPosition = 6;
    2146:	86 e0       	ldi	r24, 0x06	; 6
    2148:	8d 8b       	std	Y+21, r24	; 0x15
	u8 UpSwitch,DownSwitch;

	char ObstcaleArray1[]= "|   |    |   | |||  ";//1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,1,1,1,0,1};
    214a:	ce 01       	movw	r24, r28
    214c:	47 96       	adiw	r24, 0x17	; 23
    214e:	ab 96       	adiw	r28, 0x2b	; 43
    2150:	9f af       	std	Y+63, r25	; 0x3f
    2152:	8e af       	std	Y+62, r24	; 0x3e
    2154:	ab 97       	sbiw	r28, 0x2b	; 43
    2156:	a4 e7       	ldi	r26, 0x74	; 116
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	ad 96       	adiw	r28, 0x2d	; 45
    215c:	bf af       	std	Y+63, r27	; 0x3f
    215e:	ae af       	std	Y+62, r26	; 0x3e
    2160:	ad 97       	sbiw	r28, 0x2d	; 45
    2162:	b5 e1       	ldi	r27, 0x15	; 21
    2164:	ae 96       	adiw	r28, 0x2e	; 46
    2166:	bf af       	std	Y+63, r27	; 0x3f
    2168:	ae 97       	sbiw	r28, 0x2e	; 46
    216a:	ad 96       	adiw	r28, 0x2d	; 45
    216c:	ee ad       	ldd	r30, Y+62	; 0x3e
    216e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2170:	ad 97       	sbiw	r28, 0x2d	; 45
    2172:	00 80       	ld	r0, Z
    2174:	ad 96       	adiw	r28, 0x2d	; 45
    2176:	8e ad       	ldd	r24, Y+62	; 0x3e
    2178:	9f ad       	ldd	r25, Y+63	; 0x3f
    217a:	ad 97       	sbiw	r28, 0x2d	; 45
    217c:	01 96       	adiw	r24, 0x01	; 1
    217e:	ad 96       	adiw	r28, 0x2d	; 45
    2180:	9f af       	std	Y+63, r25	; 0x3f
    2182:	8e af       	std	Y+62, r24	; 0x3e
    2184:	ad 97       	sbiw	r28, 0x2d	; 45
    2186:	ab 96       	adiw	r28, 0x2b	; 43
    2188:	ae ad       	ldd	r26, Y+62	; 0x3e
    218a:	bf ad       	ldd	r27, Y+63	; 0x3f
    218c:	ab 97       	sbiw	r28, 0x2b	; 43
    218e:	0c 92       	st	X, r0
    2190:	ab 96       	adiw	r28, 0x2b	; 43
    2192:	ee ad       	ldd	r30, Y+62	; 0x3e
    2194:	ff ad       	ldd	r31, Y+63	; 0x3f
    2196:	ab 97       	sbiw	r28, 0x2b	; 43
    2198:	31 96       	adiw	r30, 0x01	; 1
    219a:	ab 96       	adiw	r28, 0x2b	; 43
    219c:	ff af       	std	Y+63, r31	; 0x3f
    219e:	ee af       	std	Y+62, r30	; 0x3e
    21a0:	ab 97       	sbiw	r28, 0x2b	; 43
    21a2:	ae 96       	adiw	r28, 0x2e	; 46
    21a4:	ff ad       	ldd	r31, Y+63	; 0x3f
    21a6:	ae 97       	sbiw	r28, 0x2e	; 46
    21a8:	f1 50       	subi	r31, 0x01	; 1
    21aa:	ae 96       	adiw	r28, 0x2e	; 46
    21ac:	ff af       	std	Y+63, r31	; 0x3f
    21ae:	ae 97       	sbiw	r28, 0x2e	; 46
    21b0:	ae 96       	adiw	r28, 0x2e	; 46
    21b2:	8f ad       	ldd	r24, Y+63	; 0x3f
    21b4:	ae 97       	sbiw	r28, 0x2e	; 46
    21b6:	88 23       	and	r24, r24
    21b8:	c1 f6       	brne	.-80     	; 0x216a <main+0x46>
	char ObstcaleArray2[]= "  |   ||   |        ";//0,0,1,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0};
    21ba:	de 01       	movw	r26, r28
    21bc:	9c 96       	adiw	r26, 0x2c	; 44
    21be:	e0 96       	adiw	r28, 0x30	; 48
    21c0:	bf af       	std	Y+63, r27	; 0x3f
    21c2:	ae af       	std	Y+62, r26	; 0x3e
    21c4:	e0 97       	sbiw	r28, 0x30	; 48
    21c6:	e9 e8       	ldi	r30, 0x89	; 137
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	e2 96       	adiw	r28, 0x32	; 50
    21cc:	ff af       	std	Y+63, r31	; 0x3f
    21ce:	ee af       	std	Y+62, r30	; 0x3e
    21d0:	e2 97       	sbiw	r28, 0x32	; 50
    21d2:	f5 e1       	ldi	r31, 0x15	; 21
    21d4:	e3 96       	adiw	r28, 0x33	; 51
    21d6:	ff af       	std	Y+63, r31	; 0x3f
    21d8:	e3 97       	sbiw	r28, 0x33	; 51
    21da:	e2 96       	adiw	r28, 0x32	; 50
    21dc:	ae ad       	ldd	r26, Y+62	; 0x3e
    21de:	bf ad       	ldd	r27, Y+63	; 0x3f
    21e0:	e2 97       	sbiw	r28, 0x32	; 50
    21e2:	0c 90       	ld	r0, X
    21e4:	e2 96       	adiw	r28, 0x32	; 50
    21e6:	ee ad       	ldd	r30, Y+62	; 0x3e
    21e8:	ff ad       	ldd	r31, Y+63	; 0x3f
    21ea:	e2 97       	sbiw	r28, 0x32	; 50
    21ec:	31 96       	adiw	r30, 0x01	; 1
    21ee:	e2 96       	adiw	r28, 0x32	; 50
    21f0:	ff af       	std	Y+63, r31	; 0x3f
    21f2:	ee af       	std	Y+62, r30	; 0x3e
    21f4:	e2 97       	sbiw	r28, 0x32	; 50
    21f6:	e0 96       	adiw	r28, 0x30	; 48
    21f8:	ae ad       	ldd	r26, Y+62	; 0x3e
    21fa:	bf ad       	ldd	r27, Y+63	; 0x3f
    21fc:	e0 97       	sbiw	r28, 0x30	; 48
    21fe:	0c 92       	st	X, r0
    2200:	e0 96       	adiw	r28, 0x30	; 48
    2202:	ee ad       	ldd	r30, Y+62	; 0x3e
    2204:	ff ad       	ldd	r31, Y+63	; 0x3f
    2206:	e0 97       	sbiw	r28, 0x30	; 48
    2208:	31 96       	adiw	r30, 0x01	; 1
    220a:	e0 96       	adiw	r28, 0x30	; 48
    220c:	ff af       	std	Y+63, r31	; 0x3f
    220e:	ee af       	std	Y+62, r30	; 0x3e
    2210:	e0 97       	sbiw	r28, 0x30	; 48
    2212:	e3 96       	adiw	r28, 0x33	; 51
    2214:	ff ad       	ldd	r31, Y+63	; 0x3f
    2216:	e3 97       	sbiw	r28, 0x33	; 51
    2218:	f1 50       	subi	r31, 0x01	; 1
    221a:	e3 96       	adiw	r28, 0x33	; 51
    221c:	ff af       	std	Y+63, r31	; 0x3f
    221e:	e3 97       	sbiw	r28, 0x33	; 51
    2220:	e3 96       	adiw	r28, 0x33	; 51
    2222:	8f ad       	ldd	r24, Y+63	; 0x3f
    2224:	e3 97       	sbiw	r28, 0x33	; 51
    2226:	88 23       	and	r24, r24
    2228:	c1 f6       	brne	.-80     	; 0x21da <main+0xb6>

	u8 Car[8]     ={0b00000000,0b00000000,0b00010100,0b00011110,0b00010100,0b00000000,0b00000000};
    222a:	88 e0       	ldi	r24, 0x08	; 8
    222c:	fe 01       	movw	r30, r28
    222e:	ef 5b       	subi	r30, 0xBF	; 191
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	df 01       	movw	r26, r30
    2234:	98 2f       	mov	r25, r24
    2236:	1d 92       	st	X+, r1
    2238:	9a 95       	dec	r25
    223a:	e9 f7       	brne	.-6      	; 0x2236 <main+0x112>
    223c:	fe 01       	movw	r30, r28
    223e:	ed 5b       	subi	r30, 0xBD	; 189
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	84 e1       	ldi	r24, 0x14	; 20
    2244:	80 83       	st	Z, r24
    2246:	fe 01       	movw	r30, r28
    2248:	ec 5b       	subi	r30, 0xBC	; 188
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	8e e1       	ldi	r24, 0x1E	; 30
    224e:	80 83       	st	Z, r24
    2250:	fe 01       	movw	r30, r28
    2252:	eb 5b       	subi	r30, 0xBB	; 187
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	84 e1       	ldi	r24, 0x14	; 20
    2258:	80 83       	st	Z, r24
	u8 Obstacle[8]={0b00000000,0b00000000,0b00001110,0b00001110,0b00001110,0b00000000,0b00000000};
    225a:	ce 01       	movw	r24, r28
    225c:	87 5b       	subi	r24, 0xB7	; 183
    225e:	9f 4f       	sbci	r25, 0xFF	; 255
    2260:	28 e0       	ldi	r18, 0x08	; 8
    2262:	fc 01       	movw	r30, r24
    2264:	df 01       	movw	r26, r30
    2266:	82 2f       	mov	r24, r18
    2268:	1d 92       	st	X+, r1
    226a:	8a 95       	dec	r24
    226c:	e9 f7       	brne	.-6      	; 0x2268 <main+0x144>
    226e:	fe 01       	movw	r30, r28
    2270:	e7 5b       	subi	r30, 0xB7	; 183
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	8e e0       	ldi	r24, 0x0E	; 14
    2276:	82 83       	std	Z+2, r24	; 0x02
    2278:	fe 01       	movw	r30, r28
    227a:	e7 5b       	subi	r30, 0xB7	; 183
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	8e e0       	ldi	r24, 0x0E	; 14
    2280:	83 83       	std	Z+3, r24	; 0x03
    2282:	fe 01       	movw	r30, r28
    2284:	e7 5b       	subi	r30, 0xB7	; 183
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	8e e0       	ldi	r24, 0x0E	; 14
    228a:	84 83       	std	Z+4, r24	; 0x04
	u8 NoObstacle[8]={0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000};
    228c:	ce 01       	movw	r24, r28
    228e:	8f 5a       	subi	r24, 0xAF	; 175
    2290:	9f 4f       	sbci	r25, 0xFF	; 255
    2292:	28 e0       	ldi	r18, 0x08	; 8
    2294:	fc 01       	movw	r30, r24
    2296:	df 01       	movw	r26, r30
    2298:	82 2f       	mov	r24, r18
    229a:	1d 92       	st	X+, r1
    229c:	8a 95       	dec	r24
    229e:	e9 f7       	brne	.-6      	; 0x229a <main+0x176>
	u8 Wall[8]= {0b00000000,0b00000000,0b00011111,0b00011111,0b00011111,0b00000000,0b00000000};
    22a0:	ce 01       	movw	r24, r28
    22a2:	87 5a       	subi	r24, 0xA7	; 167
    22a4:	9f 4f       	sbci	r25, 0xFF	; 255
    22a6:	28 e0       	ldi	r18, 0x08	; 8
    22a8:	fc 01       	movw	r30, r24
    22aa:	df 01       	movw	r26, r30
    22ac:	82 2f       	mov	r24, r18
    22ae:	1d 92       	st	X+, r1
    22b0:	8a 95       	dec	r24
    22b2:	e9 f7       	brne	.-6      	; 0x22ae <main+0x18a>
    22b4:	fe 01       	movw	r30, r28
    22b6:	e7 5a       	subi	r30, 0xA7	; 167
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	8f e1       	ldi	r24, 0x1F	; 31
    22bc:	82 83       	std	Z+2, r24	; 0x02
    22be:	fe 01       	movw	r30, r28
    22c0:	e7 5a       	subi	r30, 0xA7	; 167
    22c2:	ff 4f       	sbci	r31, 0xFF	; 255
    22c4:	8f e1       	ldi	r24, 0x1F	; 31
    22c6:	83 83       	std	Z+3, r24	; 0x03
    22c8:	fe 01       	movw	r30, r28
    22ca:	e7 5a       	subi	r30, 0xA7	; 167
    22cc:	ff 4f       	sbci	r31, 0xFF	; 255
    22ce:	8f e1       	ldi	r24, 0x1F	; 31
    22d0:	84 83       	std	Z+4, r24	; 0x04
	u8 Dead[8]    ={0b00011111,0b00011111,0b00011111,0b00011111,0b00011111,0b00011111,0b00011111};
    22d2:	ce 01       	movw	r24, r28
    22d4:	8f 59       	subi	r24, 0x9F	; 159
    22d6:	9f 4f       	sbci	r25, 0xFF	; 255
    22d8:	28 e0       	ldi	r18, 0x08	; 8
    22da:	fc 01       	movw	r30, r24
    22dc:	df 01       	movw	r26, r30
    22de:	82 2f       	mov	r24, r18
    22e0:	1d 92       	st	X+, r1
    22e2:	8a 95       	dec	r24
    22e4:	e9 f7       	brne	.-6      	; 0x22e0 <main+0x1bc>
    22e6:	fe 01       	movw	r30, r28
    22e8:	ef 59       	subi	r30, 0x9F	; 159
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	8f e1       	ldi	r24, 0x1F	; 31
    22ee:	80 83       	st	Z, r24
    22f0:	fe 01       	movw	r30, r28
    22f2:	ef 59       	subi	r30, 0x9F	; 159
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	8f e1       	ldi	r24, 0x1F	; 31
    22f8:	81 83       	std	Z+1, r24	; 0x01
    22fa:	fe 01       	movw	r30, r28
    22fc:	ef 59       	subi	r30, 0x9F	; 159
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	8f e1       	ldi	r24, 0x1F	; 31
    2302:	82 83       	std	Z+2, r24	; 0x02
    2304:	fe 01       	movw	r30, r28
    2306:	ef 59       	subi	r30, 0x9F	; 159
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	8f e1       	ldi	r24, 0x1F	; 31
    230c:	83 83       	std	Z+3, r24	; 0x03
    230e:	fe 01       	movw	r30, r28
    2310:	ef 59       	subi	r30, 0x9F	; 159
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	8f e1       	ldi	r24, 0x1F	; 31
    2316:	84 83       	std	Z+4, r24	; 0x04
    2318:	fe 01       	movw	r30, r28
    231a:	ef 59       	subi	r30, 0x9F	; 159
    231c:	ff 4f       	sbci	r31, 0xFF	; 255
    231e:	8f e1       	ldi	r24, 0x1F	; 31
    2320:	85 83       	std	Z+5, r24	; 0x05
    2322:	fe 01       	movw	r30, r28
    2324:	ef 59       	subi	r30, 0x9F	; 159
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	8f e1       	ldi	r24, 0x1F	; 31
    232a:	86 83       	std	Z+6, r24	; 0x06

	CLCD_voidSendSpecialCharacter(Car,0);
    232c:	ce 01       	movw	r24, r28
    232e:	8f 5b       	subi	r24, 0xBF	; 191
    2330:	9f 4f       	sbci	r25, 0xFF	; 255
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	0e 94 66 0d 	call	0x1acc	; 0x1acc <CLCD_voidSendSpecialCharacter>
	CLCD_voidSendSpecialCharacter(Obstacle,1);
    2338:	ce 01       	movw	r24, r28
    233a:	87 5b       	subi	r24, 0xB7	; 183
    233c:	9f 4f       	sbci	r25, 0xFF	; 255
    233e:	61 e0       	ldi	r22, 0x01	; 1
    2340:	0e 94 66 0d 	call	0x1acc	; 0x1acc <CLCD_voidSendSpecialCharacter>
	CLCD_voidSendSpecialCharacter(NoObstacle,2);
    2344:	ce 01       	movw	r24, r28
    2346:	8f 5a       	subi	r24, 0xAF	; 175
    2348:	9f 4f       	sbci	r25, 0xFF	; 255
    234a:	62 e0       	ldi	r22, 0x02	; 2
    234c:	0e 94 66 0d 	call	0x1acc	; 0x1acc <CLCD_voidSendSpecialCharacter>
	CLCD_voidSendSpecialCharacter(Wall,3);
    2350:	ce 01       	movw	r24, r28
    2352:	87 5a       	subi	r24, 0xA7	; 167
    2354:	9f 4f       	sbci	r25, 0xFF	; 255
    2356:	63 e0       	ldi	r22, 0x03	; 3
    2358:	0e 94 66 0d 	call	0x1acc	; 0x1acc <CLCD_voidSendSpecialCharacter>
	CLCD_voidSendSpecialCharacter(Dead,4);
    235c:	ce 01       	movw	r24, r28
    235e:	8f 59       	subi	r24, 0x9F	; 159
    2360:	9f 4f       	sbci	r25, 0xFF	; 255
    2362:	64 e0       	ldi	r22, 0x04	; 4
    2364:	0e 94 66 0d 	call	0x1acc	; 0x1acc <CLCD_voidSendSpecialCharacter>


	CLCD_voidDisplaySpecialCharacter(0,CarRowPosition,CarColPosition);
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	6e 89       	ldd	r22, Y+22	; 0x16
    236c:	4d 89       	ldd	r20, Y+21	; 0x15
    236e:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <CLCD_voidDisplaySpecialCharacter>

	//THE WALL
	for(u8 i =0; i<20; i++)
    2372:	1a 8a       	std	Y+18, r1	; 0x12
    2374:	0d c0       	rjmp	.+26     	; 0x2390 <main+0x26c>
	{
		CLCD_voidDisplaySpecialCharacter(3,0,i);
    2376:	83 e0       	ldi	r24, 0x03	; 3
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	4a 89       	ldd	r20, Y+18	; 0x12
    237c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <CLCD_voidDisplaySpecialCharacter>
		CLCD_voidDisplaySpecialCharacter(3,3,i);
    2380:	83 e0       	ldi	r24, 0x03	; 3
    2382:	63 e0       	ldi	r22, 0x03	; 3
    2384:	4a 89       	ldd	r20, Y+18	; 0x12
    2386:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <CLCD_voidDisplaySpecialCharacter>


	CLCD_voidDisplaySpecialCharacter(0,CarRowPosition,CarColPosition);

	//THE WALL
	for(u8 i =0; i<20; i++)
    238a:	8a 89       	ldd	r24, Y+18	; 0x12
    238c:	8f 5f       	subi	r24, 0xFF	; 255
    238e:	8a 8b       	std	Y+18, r24	; 0x12
    2390:	8a 89       	ldd	r24, Y+18	; 0x12
    2392:	84 31       	cpi	r24, 0x14	; 20
    2394:	80 f3       	brcs	.-32     	; 0x2376 <main+0x252>
	{
		CLCD_voidDisplaySpecialCharacter(3,0,i);
		CLCD_voidDisplaySpecialCharacter(3,3,i);
	}

	CLCD_voidDisplaySpecialCharacter(0,CarRowPosition,CarColPosition);
    2396:	80 e0       	ldi	r24, 0x00	; 0
    2398:	6e 89       	ldd	r22, Y+22	; 0x16
    239a:	4d 89       	ldd	r20, Y+21	; 0x15
    239c:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <CLCD_voidDisplaySpecialCharacter>

	while (1) //gameover condition
	{

		CLCD_voidGoToRowColumn(1,0);
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	60 e0       	ldi	r22, 0x00	; 0
    23a4:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <CLCD_voidGoToRowColumn>
		CLCD_voidSendString("                   ");
    23a8:	80 e6       	ldi	r24, 0x60	; 96
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	0e 94 bd 0b 	call	0x177a	; 0x177a <CLCD_voidSendString>
		CLCD_voidGoToRowColumn(2,0);
    23b0:	82 e0       	ldi	r24, 0x02	; 2
    23b2:	60 e0       	ldi	r22, 0x00	; 0
    23b4:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <CLCD_voidGoToRowColumn>
		CLCD_voidSendString("                   ");
    23b8:	80 e6       	ldi	r24, 0x60	; 96
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	0e 94 bd 0b 	call	0x177a	; 0x177a <CLCD_voidSendString>
		CLCD_voidDisplaySpecialCharacter(0,CarRowPosition,CarColPosition);
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	6e 89       	ldd	r22, Y+22	; 0x16
    23c4:	4d 89       	ldd	r20, Y+21	; 0x15
    23c6:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <CLCD_voidDisplaySpecialCharacter>
		CLCD_voidGoToRowColumn(1,0);
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	60 e0       	ldi	r22, 0x00	; 0
    23ce:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <CLCD_voidGoToRowColumn>
		CLCD_voidSendString(ObstcaleArray1);
    23d2:	ce 01       	movw	r24, r28
    23d4:	47 96       	adiw	r24, 0x17	; 23
    23d6:	0e 94 bd 0b 	call	0x177a	; 0x177a <CLCD_voidSendString>
		CLCD_voidGoToRowColumn(2,0);
    23da:	82 e0       	ldi	r24, 0x02	; 2
    23dc:	60 e0       	ldi	r22, 0x00	; 0
    23de:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <CLCD_voidGoToRowColumn>
		CLCD_voidSendString(ObstcaleArray2);
    23e2:	ce 01       	movw	r24, r28
    23e4:	8c 96       	adiw	r24, 0x2c	; 44
    23e6:	0e 94 bd 0b 	call	0x177a	; 0x177a <CLCD_voidSendString>
		CLCD_voidDisplaySpecialCharacter(0,CarRowPosition,CarColPosition);
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	6e 89       	ldd	r22, Y+22	; 0x16
    23ee:	4d 89       	ldd	r20, Y+21	; 0x15
    23f0:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <CLCD_voidDisplaySpecialCharacter>
    23f4:	80 e0       	ldi	r24, 0x00	; 0
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	aa ef       	ldi	r26, 0xFA	; 250
    23fa:	b4 e4       	ldi	r27, 0x44	; 68
    23fc:	8b 87       	std	Y+11, r24	; 0x0b
    23fe:	9c 87       	std	Y+12, r25	; 0x0c
    2400:	ad 87       	std	Y+13, r26	; 0x0d
    2402:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2404:	6b 85       	ldd	r22, Y+11	; 0x0b
    2406:	7c 85       	ldd	r23, Y+12	; 0x0c
    2408:	8d 85       	ldd	r24, Y+13	; 0x0d
    240a:	9e 85       	ldd	r25, Y+14	; 0x0e
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	4a ef       	ldi	r20, 0xFA	; 250
    2412:	54 e4       	ldi	r21, 0x44	; 68
    2414:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	8f 83       	std	Y+7, r24	; 0x07
    241e:	98 87       	std	Y+8, r25	; 0x08
    2420:	a9 87       	std	Y+9, r26	; 0x09
    2422:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2424:	6f 81       	ldd	r22, Y+7	; 0x07
    2426:	78 85       	ldd	r23, Y+8	; 0x08
    2428:	89 85       	ldd	r24, Y+9	; 0x09
    242a:	9a 85       	ldd	r25, Y+10	; 0x0a
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e8       	ldi	r20, 0x80	; 128
    2432:	5f e3       	ldi	r21, 0x3F	; 63
    2434:	0e 94 a1 03 	call	0x742	; 0x742 <__ltsf2>
    2438:	88 23       	and	r24, r24
    243a:	2c f4       	brge	.+10     	; 0x2446 <main+0x322>
		__ticks = 1;
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	9e 83       	std	Y+6, r25	; 0x06
    2442:	8d 83       	std	Y+5, r24	; 0x05
    2444:	3f c0       	rjmp	.+126    	; 0x24c4 <main+0x3a0>
	else if (__tmp > 65535)
    2446:	6f 81       	ldd	r22, Y+7	; 0x07
    2448:	78 85       	ldd	r23, Y+8	; 0x08
    244a:	89 85       	ldd	r24, Y+9	; 0x09
    244c:	9a 85       	ldd	r25, Y+10	; 0x0a
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	3f ef       	ldi	r19, 0xFF	; 255
    2452:	4f e7       	ldi	r20, 0x7F	; 127
    2454:	57 e4       	ldi	r21, 0x47	; 71
    2456:	0e 94 41 03 	call	0x682	; 0x682 <__gtsf2>
    245a:	18 16       	cp	r1, r24
    245c:	4c f5       	brge	.+82     	; 0x24b0 <main+0x38c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    245e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2460:	7c 85       	ldd	r23, Y+12	; 0x0c
    2462:	8d 85       	ldd	r24, Y+13	; 0x0d
    2464:	9e 85       	ldd	r25, Y+14	; 0x0e
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e2       	ldi	r20, 0x20	; 32
    246c:	51 e4       	ldi	r21, 0x41	; 65
    246e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	bc 01       	movw	r22, r24
    2478:	cd 01       	movw	r24, r26
    247a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	9e 83       	std	Y+6, r25	; 0x06
    2484:	8d 83       	std	Y+5, r24	; 0x05
    2486:	0f c0       	rjmp	.+30     	; 0x24a6 <main+0x382>
    2488:	88 ec       	ldi	r24, 0xC8	; 200
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	9c 83       	std	Y+4, r25	; 0x04
    248e:	8b 83       	std	Y+3, r24	; 0x03
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	9c 81       	ldd	r25, Y+4	; 0x04
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <main+0x370>
    2498:	9c 83       	std	Y+4, r25	; 0x04
    249a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249c:	8d 81       	ldd	r24, Y+5	; 0x05
    249e:	9e 81       	ldd	r25, Y+6	; 0x06
    24a0:	01 97       	sbiw	r24, 0x01	; 1
    24a2:	9e 83       	std	Y+6, r25	; 0x06
    24a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a6:	8d 81       	ldd	r24, Y+5	; 0x05
    24a8:	9e 81       	ldd	r25, Y+6	; 0x06
    24aa:	00 97       	sbiw	r24, 0x00	; 0
    24ac:	69 f7       	brne	.-38     	; 0x2488 <main+0x364>
    24ae:	14 c0       	rjmp	.+40     	; 0x24d8 <main+0x3b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b0:	6f 81       	ldd	r22, Y+7	; 0x07
    24b2:	78 85       	ldd	r23, Y+8	; 0x08
    24b4:	89 85       	ldd	r24, Y+9	; 0x09
    24b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	9e 83       	std	Y+6, r25	; 0x06
    24c2:	8d 83       	std	Y+5, r24	; 0x05
    24c4:	8d 81       	ldd	r24, Y+5	; 0x05
    24c6:	9e 81       	ldd	r25, Y+6	; 0x06
    24c8:	9a 83       	std	Y+2, r25	; 0x02
    24ca:	89 83       	std	Y+1, r24	; 0x01
    24cc:	89 81       	ldd	r24, Y+1	; 0x01
    24ce:	9a 81       	ldd	r25, Y+2	; 0x02
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <main+0x3ac>
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		SHIFT();
    24d8:	8f 89       	ldd	r24, Y+23	; 0x17
    24da:	89 8b       	std	Y+17, r24	; 0x11
    24dc:	8c a5       	ldd	r24, Y+44	; 0x2c
    24de:	88 8b       	std	Y+16, r24	; 0x10
    24e0:	1f 86       	std	Y+15, r1	; 0x0f
    24e2:	2d c0       	rjmp	.+90     	; 0x253e <main+0x41a>
    24e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24e6:	48 2f       	mov	r20, r24
    24e8:	50 e0       	ldi	r21, 0x00	; 0
    24ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ec:	88 2f       	mov	r24, r24
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	9c 01       	movw	r18, r24
    24f2:	2f 5f       	subi	r18, 0xFF	; 255
    24f4:	3f 4f       	sbci	r19, 0xFF	; 255
    24f6:	ce 01       	movw	r24, r28
    24f8:	47 96       	adiw	r24, 0x17	; 23
    24fa:	fc 01       	movw	r30, r24
    24fc:	e2 0f       	add	r30, r18
    24fe:	f3 1f       	adc	r31, r19
    2500:	20 81       	ld	r18, Z
    2502:	ce 01       	movw	r24, r28
    2504:	47 96       	adiw	r24, 0x17	; 23
    2506:	fc 01       	movw	r30, r24
    2508:	e4 0f       	add	r30, r20
    250a:	f5 1f       	adc	r31, r21
    250c:	20 83       	st	Z, r18
    250e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2510:	48 2f       	mov	r20, r24
    2512:	50 e0       	ldi	r21, 0x00	; 0
    2514:	8f 85       	ldd	r24, Y+15	; 0x0f
    2516:	88 2f       	mov	r24, r24
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	9c 01       	movw	r18, r24
    251c:	2f 5f       	subi	r18, 0xFF	; 255
    251e:	3f 4f       	sbci	r19, 0xFF	; 255
    2520:	ce 01       	movw	r24, r28
    2522:	8c 96       	adiw	r24, 0x2c	; 44
    2524:	fc 01       	movw	r30, r24
    2526:	e2 0f       	add	r30, r18
    2528:	f3 1f       	adc	r31, r19
    252a:	20 81       	ld	r18, Z
    252c:	ce 01       	movw	r24, r28
    252e:	8c 96       	adiw	r24, 0x2c	; 44
    2530:	fc 01       	movw	r30, r24
    2532:	e4 0f       	add	r30, r20
    2534:	f5 1f       	adc	r31, r21
    2536:	20 83       	st	Z, r18
    2538:	8f 85       	ldd	r24, Y+15	; 0x0f
    253a:	8f 5f       	subi	r24, 0xFF	; 255
    253c:	8f 87       	std	Y+15, r24	; 0x0f
    253e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2540:	83 31       	cpi	r24, 0x13	; 19
    2542:	80 f2       	brcs	.-96     	; 0x24e4 <main+0x3c0>
    2544:	89 89       	ldd	r24, Y+17	; 0x11
    2546:	8a a7       	std	Y+42, r24	; 0x2a
    2548:	88 89       	ldd	r24, Y+16	; 0x10
    254a:	8f af       	std	Y+63, r24	; 0x3f
    254c:	1b a6       	std	Y+43, r1	; 0x2b
    254e:	fe 01       	movw	r30, r28
    2550:	e0 5c       	subi	r30, 0xC0	; 192
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	10 82       	st	Z, r1
    2556:	24 cf       	rjmp	.-440    	; 0x23a0 <main+0x27c>

00002558 <__udivmodhi4>:
    2558:	aa 1b       	sub	r26, r26
    255a:	bb 1b       	sub	r27, r27
    255c:	51 e1       	ldi	r21, 0x11	; 17
    255e:	07 c0       	rjmp	.+14     	; 0x256e <__udivmodhi4_ep>

00002560 <__udivmodhi4_loop>:
    2560:	aa 1f       	adc	r26, r26
    2562:	bb 1f       	adc	r27, r27
    2564:	a6 17       	cp	r26, r22
    2566:	b7 07       	cpc	r27, r23
    2568:	10 f0       	brcs	.+4      	; 0x256e <__udivmodhi4_ep>
    256a:	a6 1b       	sub	r26, r22
    256c:	b7 0b       	sbc	r27, r23

0000256e <__udivmodhi4_ep>:
    256e:	88 1f       	adc	r24, r24
    2570:	99 1f       	adc	r25, r25
    2572:	5a 95       	dec	r21
    2574:	a9 f7       	brne	.-22     	; 0x2560 <__udivmodhi4_loop>
    2576:	80 95       	com	r24
    2578:	90 95       	com	r25
    257a:	bc 01       	movw	r22, r24
    257c:	cd 01       	movw	r24, r26
    257e:	08 95       	ret

00002580 <__udivmodsi4>:
    2580:	a1 e2       	ldi	r26, 0x21	; 33
    2582:	1a 2e       	mov	r1, r26
    2584:	aa 1b       	sub	r26, r26
    2586:	bb 1b       	sub	r27, r27
    2588:	fd 01       	movw	r30, r26
    258a:	0d c0       	rjmp	.+26     	; 0x25a6 <__udivmodsi4_ep>

0000258c <__udivmodsi4_loop>:
    258c:	aa 1f       	adc	r26, r26
    258e:	bb 1f       	adc	r27, r27
    2590:	ee 1f       	adc	r30, r30
    2592:	ff 1f       	adc	r31, r31
    2594:	a2 17       	cp	r26, r18
    2596:	b3 07       	cpc	r27, r19
    2598:	e4 07       	cpc	r30, r20
    259a:	f5 07       	cpc	r31, r21
    259c:	20 f0       	brcs	.+8      	; 0x25a6 <__udivmodsi4_ep>
    259e:	a2 1b       	sub	r26, r18
    25a0:	b3 0b       	sbc	r27, r19
    25a2:	e4 0b       	sbc	r30, r20
    25a4:	f5 0b       	sbc	r31, r21

000025a6 <__udivmodsi4_ep>:
    25a6:	66 1f       	adc	r22, r22
    25a8:	77 1f       	adc	r23, r23
    25aa:	88 1f       	adc	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	1a 94       	dec	r1
    25b0:	69 f7       	brne	.-38     	; 0x258c <__udivmodsi4_loop>
    25b2:	60 95       	com	r22
    25b4:	70 95       	com	r23
    25b6:	80 95       	com	r24
    25b8:	90 95       	com	r25
    25ba:	9b 01       	movw	r18, r22
    25bc:	ac 01       	movw	r20, r24
    25be:	bd 01       	movw	r22, r26
    25c0:	cf 01       	movw	r24, r30
    25c2:	08 95       	ret

000025c4 <__prologue_saves__>:
    25c4:	2f 92       	push	r2
    25c6:	3f 92       	push	r3
    25c8:	4f 92       	push	r4
    25ca:	5f 92       	push	r5
    25cc:	6f 92       	push	r6
    25ce:	7f 92       	push	r7
    25d0:	8f 92       	push	r8
    25d2:	9f 92       	push	r9
    25d4:	af 92       	push	r10
    25d6:	bf 92       	push	r11
    25d8:	cf 92       	push	r12
    25da:	df 92       	push	r13
    25dc:	ef 92       	push	r14
    25de:	ff 92       	push	r15
    25e0:	0f 93       	push	r16
    25e2:	1f 93       	push	r17
    25e4:	cf 93       	push	r28
    25e6:	df 93       	push	r29
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	ca 1b       	sub	r28, r26
    25ee:	db 0b       	sbc	r29, r27
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	09 94       	ijmp

000025fc <__epilogue_restores__>:
    25fc:	2a 88       	ldd	r2, Y+18	; 0x12
    25fe:	39 88       	ldd	r3, Y+17	; 0x11
    2600:	48 88       	ldd	r4, Y+16	; 0x10
    2602:	5f 84       	ldd	r5, Y+15	; 0x0f
    2604:	6e 84       	ldd	r6, Y+14	; 0x0e
    2606:	7d 84       	ldd	r7, Y+13	; 0x0d
    2608:	8c 84       	ldd	r8, Y+12	; 0x0c
    260a:	9b 84       	ldd	r9, Y+11	; 0x0b
    260c:	aa 84       	ldd	r10, Y+10	; 0x0a
    260e:	b9 84       	ldd	r11, Y+9	; 0x09
    2610:	c8 84       	ldd	r12, Y+8	; 0x08
    2612:	df 80       	ldd	r13, Y+7	; 0x07
    2614:	ee 80       	ldd	r14, Y+6	; 0x06
    2616:	fd 80       	ldd	r15, Y+5	; 0x05
    2618:	0c 81       	ldd	r16, Y+4	; 0x04
    261a:	1b 81       	ldd	r17, Y+3	; 0x03
    261c:	aa 81       	ldd	r26, Y+2	; 0x02
    261e:	b9 81       	ldd	r27, Y+1	; 0x01
    2620:	ce 0f       	add	r28, r30
    2622:	d1 1d       	adc	r29, r1
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	ed 01       	movw	r28, r26
    2630:	08 95       	ret

00002632 <_exit>:
    2632:	f8 94       	cli

00002634 <__stop_program>:
    2634:	ff cf       	rjmp	.-2      	; 0x2634 <__stop_program>
