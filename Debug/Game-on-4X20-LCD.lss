
Game-on-4X20-LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000152  00800060  00002a0c  00002aa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008001b2  008001b2  00002bf2  2**0
                  ALLOC
  3 .stab         00002220  00000000  00000000  00002bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f11  00000000  00000000  00004e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005d25  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f1  00000000  00000000  00005ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000228e  00000000  00000000  000060b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012ca  00000000  00000000  00008344  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010d4  00000000  00000000  0000960e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a6e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c9  00000000  00000000  0000a8a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ea  00000000  00000000  0000ab6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b457  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2a 11 	jmp	0x2254	; 0x2254 <__vector_1>
       8:	0c 94 6f 11 	jmp	0x22de	; 0x22de <__vector_2>
       c:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 eb       	ldi	r26, 0xB2	; 178
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3b       	cpi	r26, 0xBA	; 186
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 03 12 	call	0x2406	; 0x2406 <main>
      8a:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cd 14 	jmp	0x299a	; 0x299a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e7       	ldi	r26, 0x7E	; 126
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cd 14 	jmp	0x299a	; 0x299a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e7       	ldi	r24, 0x7E	; 126
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e9 14 	jmp	0x29d2	; 0x29d2 <__epilogue_restores__>

00000632 <__nesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__nesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__nesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__nesf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__epilogue_restores__+0x18>

00000692 <__gtsf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gtsf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gtsf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gtsf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__epilogue_restores__+0x18>

000006f2 <__gesf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__gesf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__gesf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__gesf2+0x58>
     748:	8f ef       	ldi	r24, 0xFF	; 255
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__epilogue_restores__+0x18>

00000752 <__ltsf2>:
     752:	a8 e1       	ldi	r26, 0x18	; 24
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d9 14 	jmp	0x29b2	; 0x29b2 <__prologue_saves__+0x18>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	2d 83       	std	Y+5, r18	; 0x05
     768:	3e 83       	std	Y+6, r19	; 0x06
     76a:	4f 83       	std	Y+7, r20	; 0x07
     76c:	58 87       	std	Y+8, r21	; 0x08
     76e:	89 e0       	ldi	r24, 0x09	; 9
     770:	e8 2e       	mov	r14, r24
     772:	f1 2c       	mov	r15, r1
     774:	ec 0e       	add	r14, r28
     776:	fd 1e       	adc	r15, r29
     778:	ce 01       	movw	r24, r28
     77a:	01 96       	adiw	r24, 0x01	; 1
     77c:	b7 01       	movw	r22, r14
     77e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     782:	8e 01       	movw	r16, r28
     784:	0f 5e       	subi	r16, 0xEF	; 239
     786:	1f 4f       	sbci	r17, 0xFF	; 255
     788:	ce 01       	movw	r24, r28
     78a:	05 96       	adiw	r24, 0x05	; 5
     78c:	b8 01       	movw	r22, r16
     78e:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     792:	89 85       	ldd	r24, Y+9	; 0x09
     794:	82 30       	cpi	r24, 0x02	; 2
     796:	40 f0       	brcs	.+16     	; 0x7a8 <__ltsf2+0x56>
     798:	89 89       	ldd	r24, Y+17	; 0x11
     79a:	82 30       	cpi	r24, 0x02	; 2
     79c:	28 f0       	brcs	.+10     	; 0x7a8 <__ltsf2+0x56>
     79e:	c7 01       	movw	r24, r14
     7a0:	b8 01       	movw	r22, r16
     7a2:	0e 94 42 06 	call	0xc84	; 0xc84 <__fpcmp_parts_f>
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <__ltsf2+0x58>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	68 96       	adiw	r28, 0x18	; 24
     7ac:	e6 e0       	ldi	r30, 0x06	; 6
     7ae:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__epilogue_restores__+0x18>

000007b2 <__fixsfsi>:
     7b2:	ac e0       	ldi	r26, 0x0C	; 12
     7b4:	b0 e0       	ldi	r27, 0x00	; 0
     7b6:	ef ed       	ldi	r30, 0xDF	; 223
     7b8:	f3 e0       	ldi	r31, 0x03	; 3
     7ba:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__prologue_saves__+0x20>
     7be:	69 83       	std	Y+1, r22	; 0x01
     7c0:	7a 83       	std	Y+2, r23	; 0x02
     7c2:	8b 83       	std	Y+3, r24	; 0x03
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	ce 01       	movw	r24, r28
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	be 01       	movw	r22, r28
     7cc:	6b 5f       	subi	r22, 0xFB	; 251
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	0e 94 ca 05 	call	0xb94	; 0xb94 <__unpack_f>
     7d4:	8d 81       	ldd	r24, Y+5	; 0x05
     7d6:	82 30       	cpi	r24, 0x02	; 2
     7d8:	61 f1       	breq	.+88     	; 0x832 <__fixsfsi+0x80>
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	50 f1       	brcs	.+84     	; 0x832 <__fixsfsi+0x80>
     7de:	84 30       	cpi	r24, 0x04	; 4
     7e0:	21 f4       	brne	.+8      	; 0x7ea <__fixsfsi+0x38>
     7e2:	8e 81       	ldd	r24, Y+6	; 0x06
     7e4:	88 23       	and	r24, r24
     7e6:	51 f1       	breq	.+84     	; 0x83c <__fixsfsi+0x8a>
     7e8:	2e c0       	rjmp	.+92     	; 0x846 <__fixsfsi+0x94>
     7ea:	2f 81       	ldd	r18, Y+7	; 0x07
     7ec:	38 85       	ldd	r19, Y+8	; 0x08
     7ee:	37 fd       	sbrc	r19, 7
     7f0:	20 c0       	rjmp	.+64     	; 0x832 <__fixsfsi+0x80>
     7f2:	6e 81       	ldd	r22, Y+6	; 0x06
     7f4:	2f 31       	cpi	r18, 0x1F	; 31
     7f6:	31 05       	cpc	r19, r1
     7f8:	1c f0       	brlt	.+6      	; 0x800 <__fixsfsi+0x4e>
     7fa:	66 23       	and	r22, r22
     7fc:	f9 f0       	breq	.+62     	; 0x83c <__fixsfsi+0x8a>
     7fe:	23 c0       	rjmp	.+70     	; 0x846 <__fixsfsi+0x94>
     800:	8e e1       	ldi	r24, 0x1E	; 30
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	82 1b       	sub	r24, r18
     806:	93 0b       	sbc	r25, r19
     808:	29 85       	ldd	r18, Y+9	; 0x09
     80a:	3a 85       	ldd	r19, Y+10	; 0x0a
     80c:	4b 85       	ldd	r20, Y+11	; 0x0b
     80e:	5c 85       	ldd	r21, Y+12	; 0x0c
     810:	04 c0       	rjmp	.+8      	; 0x81a <__fixsfsi+0x68>
     812:	56 95       	lsr	r21
     814:	47 95       	ror	r20
     816:	37 95       	ror	r19
     818:	27 95       	ror	r18
     81a:	8a 95       	dec	r24
     81c:	d2 f7       	brpl	.-12     	; 0x812 <__fixsfsi+0x60>
     81e:	66 23       	and	r22, r22
     820:	b1 f0       	breq	.+44     	; 0x84e <__fixsfsi+0x9c>
     822:	50 95       	com	r21
     824:	40 95       	com	r20
     826:	30 95       	com	r19
     828:	21 95       	neg	r18
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	4f 4f       	sbci	r20, 0xFF	; 255
     82e:	5f 4f       	sbci	r21, 0xFF	; 255
     830:	0e c0       	rjmp	.+28     	; 0x84e <__fixsfsi+0x9c>
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	09 c0       	rjmp	.+18     	; 0x84e <__fixsfsi+0x9c>
     83c:	2f ef       	ldi	r18, 0xFF	; 255
     83e:	3f ef       	ldi	r19, 0xFF	; 255
     840:	4f ef       	ldi	r20, 0xFF	; 255
     842:	5f e7       	ldi	r21, 0x7F	; 127
     844:	04 c0       	rjmp	.+8      	; 0x84e <__fixsfsi+0x9c>
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	50 e8       	ldi	r21, 0x80	; 128
     84e:	b9 01       	movw	r22, r18
     850:	ca 01       	movw	r24, r20
     852:	2c 96       	adiw	r28, 0x0c	; 12
     854:	e2 e0       	ldi	r30, 0x02	; 2
     856:	0c 94 f9 14 	jmp	0x29f2	; 0x29f2 <__epilogue_restores__+0x20>

0000085a <__floatunsisf>:
     85a:	a8 e0       	ldi	r26, 0x08	; 8
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	e3 e3       	ldi	r30, 0x33	; 51
     860:	f4 e0       	ldi	r31, 0x04	; 4
     862:	0c 94 d5 14 	jmp	0x29aa	; 0x29aa <__prologue_saves__+0x10>
     866:	7b 01       	movw	r14, r22
     868:	8c 01       	movw	r16, r24
     86a:	61 15       	cp	r22, r1
     86c:	71 05       	cpc	r23, r1
     86e:	81 05       	cpc	r24, r1
     870:	91 05       	cpc	r25, r1
     872:	19 f4       	brne	.+6      	; 0x87a <__stack+0x1b>
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	89 83       	std	Y+1, r24	; 0x01
     878:	60 c0       	rjmp	.+192    	; 0x93a <__stack+0xdb>
     87a:	83 e0       	ldi	r24, 0x03	; 3
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	8e e1       	ldi	r24, 0x1E	; 30
     880:	c8 2e       	mov	r12, r24
     882:	d1 2c       	mov	r13, r1
     884:	dc 82       	std	Y+4, r13	; 0x04
     886:	cb 82       	std	Y+3, r12	; 0x03
     888:	ed 82       	std	Y+5, r14	; 0x05
     88a:	fe 82       	std	Y+6, r15	; 0x06
     88c:	0f 83       	std	Y+7, r16	; 0x07
     88e:	18 87       	std	Y+8, r17	; 0x08
     890:	c8 01       	movw	r24, r16
     892:	b7 01       	movw	r22, r14
     894:	0e 94 a6 04 	call	0x94c	; 0x94c <__clzsi2>
     898:	fc 01       	movw	r30, r24
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	f7 ff       	sbrs	r31, 7
     89e:	3b c0       	rjmp	.+118    	; 0x916 <__stack+0xb7>
     8a0:	22 27       	eor	r18, r18
     8a2:	33 27       	eor	r19, r19
     8a4:	2e 1b       	sub	r18, r30
     8a6:	3f 0b       	sbc	r19, r31
     8a8:	57 01       	movw	r10, r14
     8aa:	68 01       	movw	r12, r16
     8ac:	02 2e       	mov	r0, r18
     8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	d6 94       	lsr	r13
     8b2:	c7 94       	ror	r12
     8b4:	b7 94       	ror	r11
     8b6:	a7 94       	ror	r10
     8b8:	0a 94       	dec	r0
     8ba:	d2 f7       	brpl	.-12     	; 0x8b0 <__stack+0x51>
     8bc:	40 e0       	ldi	r20, 0x00	; 0
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	a0 e0       	ldi	r26, 0x00	; 0
     8ca:	b0 e0       	ldi	r27, 0x00	; 0
     8cc:	04 c0       	rjmp	.+8      	; 0x8d6 <__stack+0x77>
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	aa 1f       	adc	r26, r26
     8d4:	bb 1f       	adc	r27, r27
     8d6:	2a 95       	dec	r18
     8d8:	d2 f7       	brpl	.-12     	; 0x8ce <__stack+0x6f>
     8da:	01 97       	sbiw	r24, 0x01	; 1
     8dc:	a1 09       	sbc	r26, r1
     8de:	b1 09       	sbc	r27, r1
     8e0:	8e 21       	and	r24, r14
     8e2:	9f 21       	and	r25, r15
     8e4:	a0 23       	and	r26, r16
     8e6:	b1 23       	and	r27, r17
     8e8:	00 97       	sbiw	r24, 0x00	; 0
     8ea:	a1 05       	cpc	r26, r1
     8ec:	b1 05       	cpc	r27, r1
     8ee:	21 f0       	breq	.+8      	; 0x8f8 <__stack+0x99>
     8f0:	41 e0       	ldi	r20, 0x01	; 1
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	4a 29       	or	r20, r10
     8fa:	5b 29       	or	r21, r11
     8fc:	6c 29       	or	r22, r12
     8fe:	7d 29       	or	r23, r13
     900:	4d 83       	std	Y+5, r20	; 0x05
     902:	5e 83       	std	Y+6, r21	; 0x06
     904:	6f 83       	std	Y+7, r22	; 0x07
     906:	78 87       	std	Y+8, r23	; 0x08
     908:	8e e1       	ldi	r24, 0x1E	; 30
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	8e 1b       	sub	r24, r30
     90e:	9f 0b       	sbc	r25, r31
     910:	9c 83       	std	Y+4, r25	; 0x04
     912:	8b 83       	std	Y+3, r24	; 0x03
     914:	12 c0       	rjmp	.+36     	; 0x93a <__stack+0xdb>
     916:	30 97       	sbiw	r30, 0x00	; 0
     918:	81 f0       	breq	.+32     	; 0x93a <__stack+0xdb>
     91a:	0e 2e       	mov	r0, r30
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__stack+0xc7>
     91e:	ee 0c       	add	r14, r14
     920:	ff 1c       	adc	r15, r15
     922:	00 1f       	adc	r16, r16
     924:	11 1f       	adc	r17, r17
     926:	0a 94       	dec	r0
     928:	d2 f7       	brpl	.-12     	; 0x91e <__stack+0xbf>
     92a:	ed 82       	std	Y+5, r14	; 0x05
     92c:	fe 82       	std	Y+6, r15	; 0x06
     92e:	0f 83       	std	Y+7, r16	; 0x07
     930:	18 87       	std	Y+8, r17	; 0x08
     932:	ce 1a       	sub	r12, r30
     934:	df 0a       	sbc	r13, r31
     936:	dc 82       	std	Y+4, r13	; 0x04
     938:	cb 82       	std	Y+3, r12	; 0x03
     93a:	1a 82       	std	Y+2, r1	; 0x02
     93c:	ce 01       	movw	r24, r28
     93e:	01 96       	adiw	r24, 0x01	; 1
     940:	0e 94 f5 04 	call	0x9ea	; 0x9ea <__pack_f>
     944:	28 96       	adiw	r28, 0x08	; 8
     946:	ea e0       	ldi	r30, 0x0A	; 10
     948:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <__epilogue_restores__+0x10>

0000094c <__clzsi2>:
     94c:	ef 92       	push	r14
     94e:	ff 92       	push	r15
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	7b 01       	movw	r14, r22
     956:	8c 01       	movw	r16, r24
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	e8 16       	cp	r14, r24
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	f8 06       	cpc	r15, r24
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	08 07       	cpc	r16, r24
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	18 07       	cpc	r17, r24
     968:	88 f4       	brcc	.+34     	; 0x98c <__clzsi2+0x40>
     96a:	8f ef       	ldi	r24, 0xFF	; 255
     96c:	e8 16       	cp	r14, r24
     96e:	f1 04       	cpc	r15, r1
     970:	01 05       	cpc	r16, r1
     972:	11 05       	cpc	r17, r1
     974:	31 f0       	breq	.+12     	; 0x982 <__clzsi2+0x36>
     976:	28 f0       	brcs	.+10     	; 0x982 <__clzsi2+0x36>
     978:	88 e0       	ldi	r24, 0x08	; 8
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	a0 e0       	ldi	r26, 0x00	; 0
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	17 c0       	rjmp	.+46     	; 0x9b0 <__clzsi2+0x64>
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a0 e0       	ldi	r26, 0x00	; 0
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	12 c0       	rjmp	.+36     	; 0x9b0 <__clzsi2+0x64>
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	e8 16       	cp	r14, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	f8 06       	cpc	r15, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	08 07       	cpc	r16, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	18 07       	cpc	r17, r24
     99c:	28 f0       	brcs	.+10     	; 0x9a8 <__clzsi2+0x5c>
     99e:	88 e1       	ldi	r24, 0x18	; 24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	a0 e0       	ldi	r26, 0x00	; 0
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__clzsi2+0x64>
     9a8:	80 e1       	ldi	r24, 0x10	; 16
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	a0 e0       	ldi	r26, 0x00	; 0
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	20 e2       	ldi	r18, 0x20	; 32
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	28 1b       	sub	r18, r24
     9ba:	39 0b       	sbc	r19, r25
     9bc:	4a 0b       	sbc	r20, r26
     9be:	5b 0b       	sbc	r21, r27
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__clzsi2+0x7e>
     9c2:	16 95       	lsr	r17
     9c4:	07 95       	ror	r16
     9c6:	f7 94       	ror	r15
     9c8:	e7 94       	ror	r14
     9ca:	8a 95       	dec	r24
     9cc:	d2 f7       	brpl	.-12     	; 0x9c2 <__clzsi2+0x76>
     9ce:	f7 01       	movw	r30, r14
     9d0:	ea 57       	subi	r30, 0x7A	; 122
     9d2:	ff 4f       	sbci	r31, 0xFF	; 255
     9d4:	80 81       	ld	r24, Z
     9d6:	28 1b       	sub	r18, r24
     9d8:	31 09       	sbc	r19, r1
     9da:	41 09       	sbc	r20, r1
     9dc:	51 09       	sbc	r21, r1
     9de:	c9 01       	movw	r24, r18
     9e0:	1f 91       	pop	r17
     9e2:	0f 91       	pop	r16
     9e4:	ff 90       	pop	r15
     9e6:	ef 90       	pop	r14
     9e8:	08 95       	ret

000009ea <__pack_f>:
     9ea:	df 92       	push	r13
     9ec:	ef 92       	push	r14
     9ee:	ff 92       	push	r15
     9f0:	0f 93       	push	r16
     9f2:	1f 93       	push	r17
     9f4:	fc 01       	movw	r30, r24
     9f6:	e4 80       	ldd	r14, Z+4	; 0x04
     9f8:	f5 80       	ldd	r15, Z+5	; 0x05
     9fa:	06 81       	ldd	r16, Z+6	; 0x06
     9fc:	17 81       	ldd	r17, Z+7	; 0x07
     9fe:	d1 80       	ldd	r13, Z+1	; 0x01
     a00:	80 81       	ld	r24, Z
     a02:	82 30       	cpi	r24, 0x02	; 2
     a04:	48 f4       	brcc	.+18     	; 0xa18 <__pack_f+0x2e>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	a0 e1       	ldi	r26, 0x10	; 16
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	e8 2a       	or	r14, r24
     a10:	f9 2a       	or	r15, r25
     a12:	0a 2b       	or	r16, r26
     a14:	1b 2b       	or	r17, r27
     a16:	a5 c0       	rjmp	.+330    	; 0xb62 <__pack_f+0x178>
     a18:	84 30       	cpi	r24, 0x04	; 4
     a1a:	09 f4       	brne	.+2      	; 0xa1e <__pack_f+0x34>
     a1c:	9f c0       	rjmp	.+318    	; 0xb5c <__pack_f+0x172>
     a1e:	82 30       	cpi	r24, 0x02	; 2
     a20:	21 f4       	brne	.+8      	; 0xa2a <__pack_f+0x40>
     a22:	ee 24       	eor	r14, r14
     a24:	ff 24       	eor	r15, r15
     a26:	87 01       	movw	r16, r14
     a28:	05 c0       	rjmp	.+10     	; 0xa34 <__pack_f+0x4a>
     a2a:	e1 14       	cp	r14, r1
     a2c:	f1 04       	cpc	r15, r1
     a2e:	01 05       	cpc	r16, r1
     a30:	11 05       	cpc	r17, r1
     a32:	19 f4       	brne	.+6      	; 0xa3a <__pack_f+0x50>
     a34:	e0 e0       	ldi	r30, 0x00	; 0
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	96 c0       	rjmp	.+300    	; 0xb66 <__pack_f+0x17c>
     a3a:	62 81       	ldd	r22, Z+2	; 0x02
     a3c:	73 81       	ldd	r23, Z+3	; 0x03
     a3e:	9f ef       	ldi	r25, 0xFF	; 255
     a40:	62 38       	cpi	r22, 0x82	; 130
     a42:	79 07       	cpc	r23, r25
     a44:	0c f0       	brlt	.+2      	; 0xa48 <__pack_f+0x5e>
     a46:	5b c0       	rjmp	.+182    	; 0xafe <__pack_f+0x114>
     a48:	22 e8       	ldi	r18, 0x82	; 130
     a4a:	3f ef       	ldi	r19, 0xFF	; 255
     a4c:	26 1b       	sub	r18, r22
     a4e:	37 0b       	sbc	r19, r23
     a50:	2a 31       	cpi	r18, 0x1A	; 26
     a52:	31 05       	cpc	r19, r1
     a54:	2c f0       	brlt	.+10     	; 0xa60 <__pack_f+0x76>
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	50 e0       	ldi	r21, 0x00	; 0
     a5e:	2a c0       	rjmp	.+84     	; 0xab4 <__pack_f+0xca>
     a60:	b8 01       	movw	r22, r16
     a62:	a7 01       	movw	r20, r14
     a64:	02 2e       	mov	r0, r18
     a66:	04 c0       	rjmp	.+8      	; 0xa70 <__pack_f+0x86>
     a68:	76 95       	lsr	r23
     a6a:	67 95       	ror	r22
     a6c:	57 95       	ror	r21
     a6e:	47 95       	ror	r20
     a70:	0a 94       	dec	r0
     a72:	d2 f7       	brpl	.-12     	; 0xa68 <__pack_f+0x7e>
     a74:	81 e0       	ldi	r24, 0x01	; 1
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	04 c0       	rjmp	.+8      	; 0xa86 <__pack_f+0x9c>
     a7e:	88 0f       	add	r24, r24
     a80:	99 1f       	adc	r25, r25
     a82:	aa 1f       	adc	r26, r26
     a84:	bb 1f       	adc	r27, r27
     a86:	2a 95       	dec	r18
     a88:	d2 f7       	brpl	.-12     	; 0xa7e <__pack_f+0x94>
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	a1 09       	sbc	r26, r1
     a8e:	b1 09       	sbc	r27, r1
     a90:	8e 21       	and	r24, r14
     a92:	9f 21       	and	r25, r15
     a94:	a0 23       	and	r26, r16
     a96:	b1 23       	and	r27, r17
     a98:	00 97       	sbiw	r24, 0x00	; 0
     a9a:	a1 05       	cpc	r26, r1
     a9c:	b1 05       	cpc	r27, r1
     a9e:	21 f0       	breq	.+8      	; 0xaa8 <__pack_f+0xbe>
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	9a 01       	movw	r18, r20
     aaa:	ab 01       	movw	r20, r22
     aac:	28 2b       	or	r18, r24
     aae:	39 2b       	or	r19, r25
     ab0:	4a 2b       	or	r20, r26
     ab2:	5b 2b       	or	r21, r27
     ab4:	da 01       	movw	r26, r20
     ab6:	c9 01       	movw	r24, r18
     ab8:	8f 77       	andi	r24, 0x7F	; 127
     aba:	90 70       	andi	r25, 0x00	; 0
     abc:	a0 70       	andi	r26, 0x00	; 0
     abe:	b0 70       	andi	r27, 0x00	; 0
     ac0:	80 34       	cpi	r24, 0x40	; 64
     ac2:	91 05       	cpc	r25, r1
     ac4:	a1 05       	cpc	r26, r1
     ac6:	b1 05       	cpc	r27, r1
     ac8:	39 f4       	brne	.+14     	; 0xad8 <__pack_f+0xee>
     aca:	27 ff       	sbrs	r18, 7
     acc:	09 c0       	rjmp	.+18     	; 0xae0 <__pack_f+0xf6>
     ace:	20 5c       	subi	r18, 0xC0	; 192
     ad0:	3f 4f       	sbci	r19, 0xFF	; 255
     ad2:	4f 4f       	sbci	r20, 0xFF	; 255
     ad4:	5f 4f       	sbci	r21, 0xFF	; 255
     ad6:	04 c0       	rjmp	.+8      	; 0xae0 <__pack_f+0xf6>
     ad8:	21 5c       	subi	r18, 0xC1	; 193
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	4f 4f       	sbci	r20, 0xFF	; 255
     ade:	5f 4f       	sbci	r21, 0xFF	; 255
     ae0:	e0 e0       	ldi	r30, 0x00	; 0
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	20 30       	cpi	r18, 0x00	; 0
     ae6:	a0 e0       	ldi	r26, 0x00	; 0
     ae8:	3a 07       	cpc	r19, r26
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	4a 07       	cpc	r20, r26
     aee:	a0 e4       	ldi	r26, 0x40	; 64
     af0:	5a 07       	cpc	r21, r26
     af2:	10 f0       	brcs	.+4      	; 0xaf8 <__pack_f+0x10e>
     af4:	e1 e0       	ldi	r30, 0x01	; 1
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	79 01       	movw	r14, r18
     afa:	8a 01       	movw	r16, r20
     afc:	27 c0       	rjmp	.+78     	; 0xb4c <__pack_f+0x162>
     afe:	60 38       	cpi	r22, 0x80	; 128
     b00:	71 05       	cpc	r23, r1
     b02:	64 f5       	brge	.+88     	; 0xb5c <__pack_f+0x172>
     b04:	fb 01       	movw	r30, r22
     b06:	e1 58       	subi	r30, 0x81	; 129
     b08:	ff 4f       	sbci	r31, 0xFF	; 255
     b0a:	d8 01       	movw	r26, r16
     b0c:	c7 01       	movw	r24, r14
     b0e:	8f 77       	andi	r24, 0x7F	; 127
     b10:	90 70       	andi	r25, 0x00	; 0
     b12:	a0 70       	andi	r26, 0x00	; 0
     b14:	b0 70       	andi	r27, 0x00	; 0
     b16:	80 34       	cpi	r24, 0x40	; 64
     b18:	91 05       	cpc	r25, r1
     b1a:	a1 05       	cpc	r26, r1
     b1c:	b1 05       	cpc	r27, r1
     b1e:	39 f4       	brne	.+14     	; 0xb2e <__pack_f+0x144>
     b20:	e7 fe       	sbrs	r14, 7
     b22:	0d c0       	rjmp	.+26     	; 0xb3e <__pack_f+0x154>
     b24:	80 e4       	ldi	r24, 0x40	; 64
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	a0 e0       	ldi	r26, 0x00	; 0
     b2a:	b0 e0       	ldi	r27, 0x00	; 0
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__pack_f+0x14c>
     b2e:	8f e3       	ldi	r24, 0x3F	; 63
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	a0 e0       	ldi	r26, 0x00	; 0
     b34:	b0 e0       	ldi	r27, 0x00	; 0
     b36:	e8 0e       	add	r14, r24
     b38:	f9 1e       	adc	r15, r25
     b3a:	0a 1f       	adc	r16, r26
     b3c:	1b 1f       	adc	r17, r27
     b3e:	17 ff       	sbrs	r17, 7
     b40:	05 c0       	rjmp	.+10     	; 0xb4c <__pack_f+0x162>
     b42:	16 95       	lsr	r17
     b44:	07 95       	ror	r16
     b46:	f7 94       	ror	r15
     b48:	e7 94       	ror	r14
     b4a:	31 96       	adiw	r30, 0x01	; 1
     b4c:	87 e0       	ldi	r24, 0x07	; 7
     b4e:	16 95       	lsr	r17
     b50:	07 95       	ror	r16
     b52:	f7 94       	ror	r15
     b54:	e7 94       	ror	r14
     b56:	8a 95       	dec	r24
     b58:	d1 f7       	brne	.-12     	; 0xb4e <__pack_f+0x164>
     b5a:	05 c0       	rjmp	.+10     	; 0xb66 <__pack_f+0x17c>
     b5c:	ee 24       	eor	r14, r14
     b5e:	ff 24       	eor	r15, r15
     b60:	87 01       	movw	r16, r14
     b62:	ef ef       	ldi	r30, 0xFF	; 255
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	6e 2f       	mov	r22, r30
     b68:	67 95       	ror	r22
     b6a:	66 27       	eor	r22, r22
     b6c:	67 95       	ror	r22
     b6e:	90 2f       	mov	r25, r16
     b70:	9f 77       	andi	r25, 0x7F	; 127
     b72:	d7 94       	ror	r13
     b74:	dd 24       	eor	r13, r13
     b76:	d7 94       	ror	r13
     b78:	8e 2f       	mov	r24, r30
     b7a:	86 95       	lsr	r24
     b7c:	49 2f       	mov	r20, r25
     b7e:	46 2b       	or	r20, r22
     b80:	58 2f       	mov	r21, r24
     b82:	5d 29       	or	r21, r13
     b84:	b7 01       	movw	r22, r14
     b86:	ca 01       	movw	r24, r20
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	ff 90       	pop	r15
     b8e:	ef 90       	pop	r14
     b90:	df 90       	pop	r13
     b92:	08 95       	ret

00000b94 <__unpack_f>:
     b94:	fc 01       	movw	r30, r24
     b96:	db 01       	movw	r26, r22
     b98:	40 81       	ld	r20, Z
     b9a:	51 81       	ldd	r21, Z+1	; 0x01
     b9c:	22 81       	ldd	r18, Z+2	; 0x02
     b9e:	62 2f       	mov	r22, r18
     ba0:	6f 77       	andi	r22, 0x7F	; 127
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	22 1f       	adc	r18, r18
     ba6:	22 27       	eor	r18, r18
     ba8:	22 1f       	adc	r18, r18
     baa:	93 81       	ldd	r25, Z+3	; 0x03
     bac:	89 2f       	mov	r24, r25
     bae:	88 0f       	add	r24, r24
     bb0:	82 2b       	or	r24, r18
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	99 1f       	adc	r25, r25
     bb8:	99 27       	eor	r25, r25
     bba:	99 1f       	adc	r25, r25
     bbc:	11 96       	adiw	r26, 0x01	; 1
     bbe:	9c 93       	st	X, r25
     bc0:	11 97       	sbiw	r26, 0x01	; 1
     bc2:	21 15       	cp	r18, r1
     bc4:	31 05       	cpc	r19, r1
     bc6:	a9 f5       	brne	.+106    	; 0xc32 <__unpack_f+0x9e>
     bc8:	41 15       	cp	r20, r1
     bca:	51 05       	cpc	r21, r1
     bcc:	61 05       	cpc	r22, r1
     bce:	71 05       	cpc	r23, r1
     bd0:	11 f4       	brne	.+4      	; 0xbd6 <__unpack_f+0x42>
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	37 c0       	rjmp	.+110    	; 0xc44 <__unpack_f+0xb0>
     bd6:	82 e8       	ldi	r24, 0x82	; 130
     bd8:	9f ef       	ldi	r25, 0xFF	; 255
     bda:	13 96       	adiw	r26, 0x03	; 3
     bdc:	9c 93       	st	X, r25
     bde:	8e 93       	st	-X, r24
     be0:	12 97       	sbiw	r26, 0x02	; 2
     be2:	9a 01       	movw	r18, r20
     be4:	ab 01       	movw	r20, r22
     be6:	67 e0       	ldi	r22, 0x07	; 7
     be8:	22 0f       	add	r18, r18
     bea:	33 1f       	adc	r19, r19
     bec:	44 1f       	adc	r20, r20
     bee:	55 1f       	adc	r21, r21
     bf0:	6a 95       	dec	r22
     bf2:	d1 f7       	brne	.-12     	; 0xbe8 <__unpack_f+0x54>
     bf4:	83 e0       	ldi	r24, 0x03	; 3
     bf6:	8c 93       	st	X, r24
     bf8:	0d c0       	rjmp	.+26     	; 0xc14 <__unpack_f+0x80>
     bfa:	22 0f       	add	r18, r18
     bfc:	33 1f       	adc	r19, r19
     bfe:	44 1f       	adc	r20, r20
     c00:	55 1f       	adc	r21, r21
     c02:	12 96       	adiw	r26, 0x02	; 2
     c04:	8d 91       	ld	r24, X+
     c06:	9c 91       	ld	r25, X
     c08:	13 97       	sbiw	r26, 0x03	; 3
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	13 96       	adiw	r26, 0x03	; 3
     c0e:	9c 93       	st	X, r25
     c10:	8e 93       	st	-X, r24
     c12:	12 97       	sbiw	r26, 0x02	; 2
     c14:	20 30       	cpi	r18, 0x00	; 0
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	38 07       	cpc	r19, r24
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	48 07       	cpc	r20, r24
     c1e:	80 e4       	ldi	r24, 0x40	; 64
     c20:	58 07       	cpc	r21, r24
     c22:	58 f3       	brcs	.-42     	; 0xbfa <__unpack_f+0x66>
     c24:	14 96       	adiw	r26, 0x04	; 4
     c26:	2d 93       	st	X+, r18
     c28:	3d 93       	st	X+, r19
     c2a:	4d 93       	st	X+, r20
     c2c:	5c 93       	st	X, r21
     c2e:	17 97       	sbiw	r26, 0x07	; 7
     c30:	08 95       	ret
     c32:	2f 3f       	cpi	r18, 0xFF	; 255
     c34:	31 05       	cpc	r19, r1
     c36:	79 f4       	brne	.+30     	; 0xc56 <__unpack_f+0xc2>
     c38:	41 15       	cp	r20, r1
     c3a:	51 05       	cpc	r21, r1
     c3c:	61 05       	cpc	r22, r1
     c3e:	71 05       	cpc	r23, r1
     c40:	19 f4       	brne	.+6      	; 0xc48 <__unpack_f+0xb4>
     c42:	84 e0       	ldi	r24, 0x04	; 4
     c44:	8c 93       	st	X, r24
     c46:	08 95       	ret
     c48:	64 ff       	sbrs	r22, 4
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <__unpack_f+0xbe>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	8c 93       	st	X, r24
     c50:	12 c0       	rjmp	.+36     	; 0xc76 <__unpack_f+0xe2>
     c52:	1c 92       	st	X, r1
     c54:	10 c0       	rjmp	.+32     	; 0xc76 <__unpack_f+0xe2>
     c56:	2f 57       	subi	r18, 0x7F	; 127
     c58:	30 40       	sbci	r19, 0x00	; 0
     c5a:	13 96       	adiw	r26, 0x03	; 3
     c5c:	3c 93       	st	X, r19
     c5e:	2e 93       	st	-X, r18
     c60:	12 97       	sbiw	r26, 0x02	; 2
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	8c 93       	st	X, r24
     c66:	87 e0       	ldi	r24, 0x07	; 7
     c68:	44 0f       	add	r20, r20
     c6a:	55 1f       	adc	r21, r21
     c6c:	66 1f       	adc	r22, r22
     c6e:	77 1f       	adc	r23, r23
     c70:	8a 95       	dec	r24
     c72:	d1 f7       	brne	.-12     	; 0xc68 <__unpack_f+0xd4>
     c74:	70 64       	ori	r23, 0x40	; 64
     c76:	14 96       	adiw	r26, 0x04	; 4
     c78:	4d 93       	st	X+, r20
     c7a:	5d 93       	st	X+, r21
     c7c:	6d 93       	st	X+, r22
     c7e:	7c 93       	st	X, r23
     c80:	17 97       	sbiw	r26, 0x07	; 7
     c82:	08 95       	ret

00000c84 <__fpcmp_parts_f>:
     c84:	1f 93       	push	r17
     c86:	dc 01       	movw	r26, r24
     c88:	fb 01       	movw	r30, r22
     c8a:	9c 91       	ld	r25, X
     c8c:	92 30       	cpi	r25, 0x02	; 2
     c8e:	08 f4       	brcc	.+2      	; 0xc92 <__fpcmp_parts_f+0xe>
     c90:	47 c0       	rjmp	.+142    	; 0xd20 <__fpcmp_parts_f+0x9c>
     c92:	80 81       	ld	r24, Z
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	08 f4       	brcc	.+2      	; 0xc9a <__fpcmp_parts_f+0x16>
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <__fpcmp_parts_f+0x9c>
     c9a:	94 30       	cpi	r25, 0x04	; 4
     c9c:	51 f4       	brne	.+20     	; 0xcb2 <__fpcmp_parts_f+0x2e>
     c9e:	11 96       	adiw	r26, 0x01	; 1
     ca0:	1c 91       	ld	r17, X
     ca2:	84 30       	cpi	r24, 0x04	; 4
     ca4:	99 f5       	brne	.+102    	; 0xd0c <__fpcmp_parts_f+0x88>
     ca6:	81 81       	ldd	r24, Z+1	; 0x01
     ca8:	68 2f       	mov	r22, r24
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	61 1b       	sub	r22, r17
     cae:	71 09       	sbc	r23, r1
     cb0:	3f c0       	rjmp	.+126    	; 0xd30 <__fpcmp_parts_f+0xac>
     cb2:	84 30       	cpi	r24, 0x04	; 4
     cb4:	21 f0       	breq	.+8      	; 0xcbe <__fpcmp_parts_f+0x3a>
     cb6:	92 30       	cpi	r25, 0x02	; 2
     cb8:	31 f4       	brne	.+12     	; 0xcc6 <__fpcmp_parts_f+0x42>
     cba:	82 30       	cpi	r24, 0x02	; 2
     cbc:	b9 f1       	breq	.+110    	; 0xd2c <__fpcmp_parts_f+0xa8>
     cbe:	81 81       	ldd	r24, Z+1	; 0x01
     cc0:	88 23       	and	r24, r24
     cc2:	89 f1       	breq	.+98     	; 0xd26 <__fpcmp_parts_f+0xa2>
     cc4:	2d c0       	rjmp	.+90     	; 0xd20 <__fpcmp_parts_f+0x9c>
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	1c 91       	ld	r17, X
     cca:	11 97       	sbiw	r26, 0x01	; 1
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	f1 f0       	breq	.+60     	; 0xd0c <__fpcmp_parts_f+0x88>
     cd0:	81 81       	ldd	r24, Z+1	; 0x01
     cd2:	18 17       	cp	r17, r24
     cd4:	d9 f4       	brne	.+54     	; 0xd0c <__fpcmp_parts_f+0x88>
     cd6:	12 96       	adiw	r26, 0x02	; 2
     cd8:	2d 91       	ld	r18, X+
     cda:	3c 91       	ld	r19, X
     cdc:	13 97       	sbiw	r26, 0x03	; 3
     cde:	82 81       	ldd	r24, Z+2	; 0x02
     ce0:	93 81       	ldd	r25, Z+3	; 0x03
     ce2:	82 17       	cp	r24, r18
     ce4:	93 07       	cpc	r25, r19
     ce6:	94 f0       	brlt	.+36     	; 0xd0c <__fpcmp_parts_f+0x88>
     ce8:	28 17       	cp	r18, r24
     cea:	39 07       	cpc	r19, r25
     cec:	bc f0       	brlt	.+46     	; 0xd1c <__fpcmp_parts_f+0x98>
     cee:	14 96       	adiw	r26, 0x04	; 4
     cf0:	8d 91       	ld	r24, X+
     cf2:	9d 91       	ld	r25, X+
     cf4:	0d 90       	ld	r0, X+
     cf6:	bc 91       	ld	r27, X
     cf8:	a0 2d       	mov	r26, r0
     cfa:	24 81       	ldd	r18, Z+4	; 0x04
     cfc:	35 81       	ldd	r19, Z+5	; 0x05
     cfe:	46 81       	ldd	r20, Z+6	; 0x06
     d00:	57 81       	ldd	r21, Z+7	; 0x07
     d02:	28 17       	cp	r18, r24
     d04:	39 07       	cpc	r19, r25
     d06:	4a 07       	cpc	r20, r26
     d08:	5b 07       	cpc	r21, r27
     d0a:	18 f4       	brcc	.+6      	; 0xd12 <__fpcmp_parts_f+0x8e>
     d0c:	11 23       	and	r17, r17
     d0e:	41 f0       	breq	.+16     	; 0xd20 <__fpcmp_parts_f+0x9c>
     d10:	0a c0       	rjmp	.+20     	; 0xd26 <__fpcmp_parts_f+0xa2>
     d12:	82 17       	cp	r24, r18
     d14:	93 07       	cpc	r25, r19
     d16:	a4 07       	cpc	r26, r20
     d18:	b5 07       	cpc	r27, r21
     d1a:	40 f4       	brcc	.+16     	; 0xd2c <__fpcmp_parts_f+0xa8>
     d1c:	11 23       	and	r17, r17
     d1e:	19 f0       	breq	.+6      	; 0xd26 <__fpcmp_parts_f+0xa2>
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	05 c0       	rjmp	.+10     	; 0xd30 <__fpcmp_parts_f+0xac>
     d26:	6f ef       	ldi	r22, 0xFF	; 255
     d28:	7f ef       	ldi	r23, 0xFF	; 255
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <__fpcmp_parts_f+0xac>
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	70 e0       	ldi	r23, 0x00	; 0
     d30:	cb 01       	movw	r24, r22
     d32:	1f 91       	pop	r17
     d34:	08 95       	ret

00000d36 <CLCD_voidClearDisplay>:
#include "CLCD_interface.h"
#include "DIO_interface.h"


void CLCD_voidClearDisplay()
{
     d36:	df 93       	push	r29
     d38:	cf 93       	push	r28
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidSendCommand(CLCD_CMD_CLEAR_DISPLAY);
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	0e 94 39 07 	call	0xe72	; 0xe72 <CLCD_voidSendCommand>
}
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <CLCD_voidInit>:

void CLCD_voidInit(void)
{
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	2e 97       	sbiw	r28, 0x0e	; 14
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	a0 e2       	ldi	r26, 0x20	; 32
     d64:	b2 e4       	ldi	r27, 0x42	; 66
     d66:	8b 87       	std	Y+11, r24	; 0x0b
     d68:	9c 87       	std	Y+12, r25	; 0x0c
     d6a:	ad 87       	std	Y+13, r26	; 0x0d
     d6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d6e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d70:	7c 85       	ldd	r23, Y+12	; 0x0c
     d72:	8d 85       	ldd	r24, Y+13	; 0x0d
     d74:	9e 85       	ldd	r25, Y+14	; 0x0e
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	4a ef       	ldi	r20, 0xFA	; 250
     d7c:	54 e4       	ldi	r21, 0x44	; 68
     d7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d82:	dc 01       	movw	r26, r24
     d84:	cb 01       	movw	r24, r22
     d86:	8f 83       	std	Y+7, r24	; 0x07
     d88:	98 87       	std	Y+8, r25	; 0x08
     d8a:	a9 87       	std	Y+9, r26	; 0x09
     d8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d8e:	6f 81       	ldd	r22, Y+7	; 0x07
     d90:	78 85       	ldd	r23, Y+8	; 0x08
     d92:	89 85       	ldd	r24, Y+9	; 0x09
     d94:	9a 85       	ldd	r25, Y+10	; 0x0a
     d96:	20 e0       	ldi	r18, 0x00	; 0
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	40 e8       	ldi	r20, 0x80	; 128
     d9c:	5f e3       	ldi	r21, 0x3F	; 63
     d9e:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
     da2:	88 23       	and	r24, r24
     da4:	2c f4       	brge	.+10     	; 0xdb0 <CLCD_voidInit+0x66>
		__ticks = 1;
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	9e 83       	std	Y+6, r25	; 0x06
     dac:	8d 83       	std	Y+5, r24	; 0x05
     dae:	3f c0       	rjmp	.+126    	; 0xe2e <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     db0:	6f 81       	ldd	r22, Y+7	; 0x07
     db2:	78 85       	ldd	r23, Y+8	; 0x08
     db4:	89 85       	ldd	r24, Y+9	; 0x09
     db6:	9a 85       	ldd	r25, Y+10	; 0x0a
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	3f ef       	ldi	r19, 0xFF	; 255
     dbc:	4f e7       	ldi	r20, 0x7F	; 127
     dbe:	57 e4       	ldi	r21, 0x47	; 71
     dc0:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
     dc4:	18 16       	cp	r1, r24
     dc6:	4c f5       	brge	.+82     	; 0xe1a <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dc8:	6b 85       	ldd	r22, Y+11	; 0x0b
     dca:	7c 85       	ldd	r23, Y+12	; 0x0c
     dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dce:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	40 e2       	ldi	r20, 0x20	; 32
     dd6:	51 e4       	ldi	r21, 0x41	; 65
     dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	bc 01       	movw	r22, r24
     de2:	cd 01       	movw	r24, r26
     de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     de8:	dc 01       	movw	r26, r24
     dea:	cb 01       	movw	r24, r22
     dec:	9e 83       	std	Y+6, r25	; 0x06
     dee:	8d 83       	std	Y+5, r24	; 0x05
     df0:	0f c0       	rjmp	.+30     	; 0xe10 <CLCD_voidInit+0xc6>
     df2:	88 ec       	ldi	r24, 0xC8	; 200
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	9c 83       	std	Y+4, r25	; 0x04
     df8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	9c 81       	ldd	r25, Y+4	; 0x04
     dfe:	01 97       	sbiw	r24, 0x01	; 1
     e00:	f1 f7       	brne	.-4      	; 0xdfe <CLCD_voidInit+0xb4>
     e02:	9c 83       	std	Y+4, r25	; 0x04
     e04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e06:	8d 81       	ldd	r24, Y+5	; 0x05
     e08:	9e 81       	ldd	r25, Y+6	; 0x06
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	9e 83       	std	Y+6, r25	; 0x06
     e0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e10:	8d 81       	ldd	r24, Y+5	; 0x05
     e12:	9e 81       	ldd	r25, Y+6	; 0x06
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	69 f7       	brne	.-38     	; 0xdf2 <CLCD_voidInit+0xa8>
     e18:	14 c0       	rjmp	.+40     	; 0xe42 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e1a:	6f 81       	ldd	r22, Y+7	; 0x07
     e1c:	78 85       	ldd	r23, Y+8	; 0x08
     e1e:	89 85       	ldd	r24, Y+9	; 0x09
     e20:	9a 85       	ldd	r25, Y+10	; 0x0a
     e22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	9e 83       	std	Y+6, r25	; 0x06
     e2c:	8d 83       	std	Y+5, r24	; 0x05
     e2e:	8d 81       	ldd	r24, Y+5	; 0x05
     e30:	9e 81       	ldd	r25, Y+6	; 0x06
     e32:	9a 83       	std	Y+2, r25	; 0x02
     e34:	89 83       	std	Y+1, r24	; 0x01
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	9a 81       	ldd	r25, Y+2	; 0x02
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	f1 f7       	brne	.-4      	; 0xe3a <CLCD_voidInit+0xf0>
     e3e:	9a 83       	std	Y+2, r25	; 0x02
     e40:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(40);

	CLCD_voidSendCommand(CLCD_CMD_RETURN_HOME);
     e42:	82 e0       	ldi	r24, 0x02	; 2
     e44:	0e 94 39 07 	call	0xe72	; 0xe72 <CLCD_voidSendCommand>

	/*Function Set Command
	 * 8 bit mode
	 * Activate the 2 lines
	 * Font Type is 5x8 (5x7) */
	CLCD_voidSendCommand(CLCD_CMD_FUNCTION_SET);
     e48:	88 e2       	ldi	r24, 0x28	; 40
     e4a:	0e 94 39 07 	call	0xe72	; 0xe72 <CLCD_voidSendCommand>

	/*Display ON/OFF Control Command
	 *set display: ON
	 *Cursor is Disabled
	 *Cursor Blinking is OFF  */
	CLCD_voidSendCommand(CLCD_CMD_DISPLAY_ON_OFF_CTRL);
     e4e:	8c e0       	ldi	r24, 0x0C	; 12
     e50:	0e 94 39 07 	call	0xe72	; 0xe72 <CLCD_voidSendCommand>

	/*Clearing LCD Display*/
	CLCD_voidSendCommand(CLCD_CMD_CLEAR_DISPLAY);
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	0e 94 39 07 	call	0xe72	; 0xe72 <CLCD_voidSendCommand>

	/*Entry mode Set*/
	CLCD_voidSendCommand(CLCD_CMD_ENTRY_MODE_SET);
     e5a:	86 e0       	ldi	r24, 0x06	; 6
     e5c:	0e 94 39 07 	call	0xe72	; 0xe72 <CLCD_voidSendCommand>

}
     e60:	2e 96       	adiw	r28, 0x0e	; 14
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <CLCD_voidSendCommand>:


void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	e9 97       	sbiw	r28, 0x39	; 57
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	89 af       	std	Y+57, r24	; 0x39
	/*SET RS PIN TO LOW*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_LOW);
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	63 e0       	ldi	r22, 0x03	; 3
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
	_delay_ms(2);

	#elif CLCD_MODE == 4

	/*READING THE COMMAD FROM DATA PORT*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4,GET_BIT(Copy_u8Command,4));
     e92:	89 ad       	ldd	r24, Y+57	; 0x39
     e94:	82 95       	swap	r24
     e96:	8f 70       	andi	r24, 0x0F	; 15
     e98:	98 2f       	mov	r25, r24
     e9a:	91 70       	andi	r25, 0x01	; 1
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	49 2f       	mov	r20, r25
     ea2:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5,GET_BIT(Copy_u8Command,5));
     ea6:	89 ad       	ldd	r24, Y+57	; 0x39
     ea8:	82 95       	swap	r24
     eaa:	86 95       	lsr	r24
     eac:	87 70       	andi	r24, 0x07	; 7
     eae:	98 2f       	mov	r25, r24
     eb0:	91 70       	andi	r25, 0x01	; 1
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	61 e0       	ldi	r22, 0x01	; 1
     eb6:	49 2f       	mov	r20, r25
     eb8:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6,GET_BIT(Copy_u8Command,6));
     ebc:	89 ad       	ldd	r24, Y+57	; 0x39
     ebe:	82 95       	swap	r24
     ec0:	86 95       	lsr	r24
     ec2:	86 95       	lsr	r24
     ec4:	83 70       	andi	r24, 0x03	; 3
     ec6:	98 2f       	mov	r25, r24
     ec8:	91 70       	andi	r25, 0x01	; 1
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	62 e0       	ldi	r22, 0x02	; 2
     ece:	49 2f       	mov	r20, r25
     ed0:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7,GET_BIT(Copy_u8Command,7));
     ed4:	89 ad       	ldd	r24, Y+57	; 0x39
     ed6:	98 2f       	mov	r25, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	99 27       	eor	r25, r25
     edc:	99 1f       	adc	r25, r25
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	64 e0       	ldi	r22, 0x04	; 4
     ee2:	49 2f       	mov	r20, r25
     ee4:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>


	/*ENABLE PULSE*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	62 e0       	ldi	r22, 0x02	; 2
     eec:	41 e0       	ldi	r20, 0x01	; 1
     eee:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	a0 e0       	ldi	r26, 0x00	; 0
     ef8:	b0 e4       	ldi	r27, 0x40	; 64
     efa:	8d ab       	std	Y+53, r24	; 0x35
     efc:	9e ab       	std	Y+54, r25	; 0x36
     efe:	af ab       	std	Y+55, r26	; 0x37
     f00:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f02:	6d a9       	ldd	r22, Y+53	; 0x35
     f04:	7e a9       	ldd	r23, Y+54	; 0x36
     f06:	8f a9       	ldd	r24, Y+55	; 0x37
     f08:	98 ad       	ldd	r25, Y+56	; 0x38
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	4a ef       	ldi	r20, 0xFA	; 250
     f10:	54 e4       	ldi	r21, 0x44	; 68
     f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	89 ab       	std	Y+49, r24	; 0x31
     f1c:	9a ab       	std	Y+50, r25	; 0x32
     f1e:	ab ab       	std	Y+51, r26	; 0x33
     f20:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f22:	69 a9       	ldd	r22, Y+49	; 0x31
     f24:	7a a9       	ldd	r23, Y+50	; 0x32
     f26:	8b a9       	ldd	r24, Y+51	; 0x33
     f28:	9c a9       	ldd	r25, Y+52	; 0x34
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e8       	ldi	r20, 0x80	; 128
     f30:	5f e3       	ldi	r21, 0x3F	; 63
     f32:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
     f36:	88 23       	and	r24, r24
     f38:	2c f4       	brge	.+10     	; 0xf44 <CLCD_voidSendCommand+0xd2>
		__ticks = 1;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	98 ab       	std	Y+48, r25	; 0x30
     f40:	8f a7       	std	Y+47, r24	; 0x2f
     f42:	3f c0       	rjmp	.+126    	; 0xfc2 <CLCD_voidSendCommand+0x150>
	else if (__tmp > 65535)
     f44:	69 a9       	ldd	r22, Y+49	; 0x31
     f46:	7a a9       	ldd	r23, Y+50	; 0x32
     f48:	8b a9       	ldd	r24, Y+51	; 0x33
     f4a:	9c a9       	ldd	r25, Y+52	; 0x34
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	3f ef       	ldi	r19, 0xFF	; 255
     f50:	4f e7       	ldi	r20, 0x7F	; 127
     f52:	57 e4       	ldi	r21, 0x47	; 71
     f54:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
     f58:	18 16       	cp	r1, r24
     f5a:	4c f5       	brge	.+82     	; 0xfae <CLCD_voidSendCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f5c:	6d a9       	ldd	r22, Y+53	; 0x35
     f5e:	7e a9       	ldd	r23, Y+54	; 0x36
     f60:	8f a9       	ldd	r24, Y+55	; 0x37
     f62:	98 ad       	ldd	r25, Y+56	; 0x38
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 e2       	ldi	r20, 0x20	; 32
     f6a:	51 e4       	ldi	r21, 0x41	; 65
     f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	bc 01       	movw	r22, r24
     f76:	cd 01       	movw	r24, r26
     f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	98 ab       	std	Y+48, r25	; 0x30
     f82:	8f a7       	std	Y+47, r24	; 0x2f
     f84:	0f c0       	rjmp	.+30     	; 0xfa4 <CLCD_voidSendCommand+0x132>
     f86:	88 ec       	ldi	r24, 0xC8	; 200
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	9e a7       	std	Y+46, r25	; 0x2e
     f8c:	8d a7       	std	Y+45, r24	; 0x2d
     f8e:	8d a5       	ldd	r24, Y+45	; 0x2d
     f90:	9e a5       	ldd	r25, Y+46	; 0x2e
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <CLCD_voidSendCommand+0x120>
     f96:	9e a7       	std	Y+46, r25	; 0x2e
     f98:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9a:	8f a5       	ldd	r24, Y+47	; 0x2f
     f9c:	98 a9       	ldd	r25, Y+48	; 0x30
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	98 ab       	std	Y+48, r25	; 0x30
     fa2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa4:	8f a5       	ldd	r24, Y+47	; 0x2f
     fa6:	98 a9       	ldd	r25, Y+48	; 0x30
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	69 f7       	brne	.-38     	; 0xf86 <CLCD_voidSendCommand+0x114>
     fac:	14 c0       	rjmp	.+40     	; 0xfd6 <CLCD_voidSendCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fae:	69 a9       	ldd	r22, Y+49	; 0x31
     fb0:	7a a9       	ldd	r23, Y+50	; 0x32
     fb2:	8b a9       	ldd	r24, Y+51	; 0x33
     fb4:	9c a9       	ldd	r25, Y+52	; 0x34
     fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	98 ab       	std	Y+48, r25	; 0x30
     fc0:	8f a7       	std	Y+47, r24	; 0x2f
     fc2:	8f a5       	ldd	r24, Y+47	; 0x2f
     fc4:	98 a9       	ldd	r25, Y+48	; 0x30
     fc6:	9c a7       	std	Y+44, r25	; 0x2c
     fc8:	8b a7       	std	Y+43, r24	; 0x2b
     fca:	8b a5       	ldd	r24, Y+43	; 0x2b
     fcc:	9c a5       	ldd	r25, Y+44	; 0x2c
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <CLCD_voidSendCommand+0x15c>
     fd2:	9c a7       	std	Y+44, r25	; 0x2c
     fd4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	62 e0       	ldi	r22, 0x02	; 2
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	a0 e0       	ldi	r26, 0x00	; 0
     fe6:	b0 e4       	ldi	r27, 0x40	; 64
     fe8:	8f a3       	std	Y+39, r24	; 0x27
     fea:	98 a7       	std	Y+40, r25	; 0x28
     fec:	a9 a7       	std	Y+41, r26	; 0x29
     fee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ff0:	6f a1       	ldd	r22, Y+39	; 0x27
     ff2:	78 a5       	ldd	r23, Y+40	; 0x28
     ff4:	89 a5       	ldd	r24, Y+41	; 0x29
     ff6:	9a a5       	ldd	r25, Y+42	; 0x2a
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	4a ef       	ldi	r20, 0xFA	; 250
     ffe:	54 e4       	ldi	r21, 0x44	; 68
    1000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	8b a3       	std	Y+35, r24	; 0x23
    100a:	9c a3       	std	Y+36, r25	; 0x24
    100c:	ad a3       	std	Y+37, r26	; 0x25
    100e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1010:	6b a1       	ldd	r22, Y+35	; 0x23
    1012:	7c a1       	ldd	r23, Y+36	; 0x24
    1014:	8d a1       	ldd	r24, Y+37	; 0x25
    1016:	9e a1       	ldd	r25, Y+38	; 0x26
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e8       	ldi	r20, 0x80	; 128
    101e:	5f e3       	ldi	r21, 0x3F	; 63
    1020:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    1024:	88 23       	and	r24, r24
    1026:	2c f4       	brge	.+10     	; 0x1032 <CLCD_voidSendCommand+0x1c0>
		__ticks = 1;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	9a a3       	std	Y+34, r25	; 0x22
    102e:	89 a3       	std	Y+33, r24	; 0x21
    1030:	3f c0       	rjmp	.+126    	; 0x10b0 <CLCD_voidSendCommand+0x23e>
	else if (__tmp > 65535)
    1032:	6b a1       	ldd	r22, Y+35	; 0x23
    1034:	7c a1       	ldd	r23, Y+36	; 0x24
    1036:	8d a1       	ldd	r24, Y+37	; 0x25
    1038:	9e a1       	ldd	r25, Y+38	; 0x26
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	3f ef       	ldi	r19, 0xFF	; 255
    103e:	4f e7       	ldi	r20, 0x7F	; 127
    1040:	57 e4       	ldi	r21, 0x47	; 71
    1042:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1046:	18 16       	cp	r1, r24
    1048:	4c f5       	brge	.+82     	; 0x109c <CLCD_voidSendCommand+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    104a:	6f a1       	ldd	r22, Y+39	; 0x27
    104c:	78 a5       	ldd	r23, Y+40	; 0x28
    104e:	89 a5       	ldd	r24, Y+41	; 0x29
    1050:	9a a5       	ldd	r25, Y+42	; 0x2a
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e2       	ldi	r20, 0x20	; 32
    1058:	51 e4       	ldi	r21, 0x41	; 65
    105a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	bc 01       	movw	r22, r24
    1064:	cd 01       	movw	r24, r26
    1066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	9a a3       	std	Y+34, r25	; 0x22
    1070:	89 a3       	std	Y+33, r24	; 0x21
    1072:	0f c0       	rjmp	.+30     	; 0x1092 <CLCD_voidSendCommand+0x220>
    1074:	88 ec       	ldi	r24, 0xC8	; 200
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	98 a3       	std	Y+32, r25	; 0x20
    107a:	8f 8f       	std	Y+31, r24	; 0x1f
    107c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    107e:	98 a1       	ldd	r25, Y+32	; 0x20
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	f1 f7       	brne	.-4      	; 0x1080 <CLCD_voidSendCommand+0x20e>
    1084:	98 a3       	std	Y+32, r25	; 0x20
    1086:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1088:	89 a1       	ldd	r24, Y+33	; 0x21
    108a:	9a a1       	ldd	r25, Y+34	; 0x22
    108c:	01 97       	sbiw	r24, 0x01	; 1
    108e:	9a a3       	std	Y+34, r25	; 0x22
    1090:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1092:	89 a1       	ldd	r24, Y+33	; 0x21
    1094:	9a a1       	ldd	r25, Y+34	; 0x22
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	69 f7       	brne	.-38     	; 0x1074 <CLCD_voidSendCommand+0x202>
    109a:	14 c0       	rjmp	.+40     	; 0x10c4 <CLCD_voidSendCommand+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    109c:	6b a1       	ldd	r22, Y+35	; 0x23
    109e:	7c a1       	ldd	r23, Y+36	; 0x24
    10a0:	8d a1       	ldd	r24, Y+37	; 0x25
    10a2:	9e a1       	ldd	r25, Y+38	; 0x26
    10a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	9a a3       	std	Y+34, r25	; 0x22
    10ae:	89 a3       	std	Y+33, r24	; 0x21
    10b0:	89 a1       	ldd	r24, Y+33	; 0x21
    10b2:	9a a1       	ldd	r25, Y+34	; 0x22
    10b4:	9e 8f       	std	Y+30, r25	; 0x1e
    10b6:	8d 8f       	std	Y+29, r24	; 0x1d
    10b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	f1 f7       	brne	.-4      	; 0x10bc <CLCD_voidSendCommand+0x24a>
    10c0:	9e 8f       	std	Y+30, r25	; 0x1e
    10c2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	/*READING THE COMMAD FROM DATA PORT*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4,GET_BIT(Copy_u8Command,0));
    10c4:	89 ad       	ldd	r24, Y+57	; 0x39
    10c6:	98 2f       	mov	r25, r24
    10c8:	91 70       	andi	r25, 0x01	; 1
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	60 e0       	ldi	r22, 0x00	; 0
    10ce:	49 2f       	mov	r20, r25
    10d0:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5,GET_BIT(Copy_u8Command,1));
    10d4:	89 ad       	ldd	r24, Y+57	; 0x39
    10d6:	86 95       	lsr	r24
    10d8:	98 2f       	mov	r25, r24
    10da:	91 70       	andi	r25, 0x01	; 1
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	61 e0       	ldi	r22, 0x01	; 1
    10e0:	49 2f       	mov	r20, r25
    10e2:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6,GET_BIT(Copy_u8Command,2));
    10e6:	89 ad       	ldd	r24, Y+57	; 0x39
    10e8:	86 95       	lsr	r24
    10ea:	86 95       	lsr	r24
    10ec:	98 2f       	mov	r25, r24
    10ee:	91 70       	andi	r25, 0x01	; 1
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	62 e0       	ldi	r22, 0x02	; 2
    10f4:	49 2f       	mov	r20, r25
    10f6:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7,GET_BIT(Copy_u8Command,3));
    10fa:	89 ad       	ldd	r24, Y+57	; 0x39
    10fc:	86 95       	lsr	r24
    10fe:	86 95       	lsr	r24
    1100:	86 95       	lsr	r24
    1102:	98 2f       	mov	r25, r24
    1104:	91 70       	andi	r25, 0x01	; 1
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	64 e0       	ldi	r22, 0x04	; 4
    110a:	49 2f       	mov	r20, r25
    110c:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>

	/*ENABLE PULSE*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	62 e0       	ldi	r22, 0x02	; 2
    1114:	41 e0       	ldi	r20, 0x01	; 1
    1116:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	a0 e0       	ldi	r26, 0x00	; 0
    1120:	b0 e4       	ldi	r27, 0x40	; 64
    1122:	89 8f       	std	Y+25, r24	; 0x19
    1124:	9a 8f       	std	Y+26, r25	; 0x1a
    1126:	ab 8f       	std	Y+27, r26	; 0x1b
    1128:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    112a:	69 8d       	ldd	r22, Y+25	; 0x19
    112c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    112e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1130:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	4a ef       	ldi	r20, 0xFA	; 250
    1138:	54 e4       	ldi	r21, 0x44	; 68
    113a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	8d 8b       	std	Y+21, r24	; 0x15
    1144:	9e 8b       	std	Y+22, r25	; 0x16
    1146:	af 8b       	std	Y+23, r26	; 0x17
    1148:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    114a:	6d 89       	ldd	r22, Y+21	; 0x15
    114c:	7e 89       	ldd	r23, Y+22	; 0x16
    114e:	8f 89       	ldd	r24, Y+23	; 0x17
    1150:	98 8d       	ldd	r25, Y+24	; 0x18
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e8       	ldi	r20, 0x80	; 128
    1158:	5f e3       	ldi	r21, 0x3F	; 63
    115a:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    115e:	88 23       	and	r24, r24
    1160:	2c f4       	brge	.+10     	; 0x116c <CLCD_voidSendCommand+0x2fa>
		__ticks = 1;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	9c 8b       	std	Y+20, r25	; 0x14
    1168:	8b 8b       	std	Y+19, r24	; 0x13
    116a:	3f c0       	rjmp	.+126    	; 0x11ea <CLCD_voidSendCommand+0x378>
	else if (__tmp > 65535)
    116c:	6d 89       	ldd	r22, Y+21	; 0x15
    116e:	7e 89       	ldd	r23, Y+22	; 0x16
    1170:	8f 89       	ldd	r24, Y+23	; 0x17
    1172:	98 8d       	ldd	r25, Y+24	; 0x18
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	3f ef       	ldi	r19, 0xFF	; 255
    1178:	4f e7       	ldi	r20, 0x7F	; 127
    117a:	57 e4       	ldi	r21, 0x47	; 71
    117c:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    1180:	18 16       	cp	r1, r24
    1182:	4c f5       	brge	.+82     	; 0x11d6 <CLCD_voidSendCommand+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1184:	69 8d       	ldd	r22, Y+25	; 0x19
    1186:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1188:	8b 8d       	ldd	r24, Y+27	; 0x1b
    118a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	40 e2       	ldi	r20, 0x20	; 32
    1192:	51 e4       	ldi	r21, 0x41	; 65
    1194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1198:	dc 01       	movw	r26, r24
    119a:	cb 01       	movw	r24, r22
    119c:	bc 01       	movw	r22, r24
    119e:	cd 01       	movw	r24, r26
    11a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	9c 8b       	std	Y+20, r25	; 0x14
    11aa:	8b 8b       	std	Y+19, r24	; 0x13
    11ac:	0f c0       	rjmp	.+30     	; 0x11cc <CLCD_voidSendCommand+0x35a>
    11ae:	88 ec       	ldi	r24, 0xC8	; 200
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	9a 8b       	std	Y+18, r25	; 0x12
    11b4:	89 8b       	std	Y+17, r24	; 0x11
    11b6:	89 89       	ldd	r24, Y+17	; 0x11
    11b8:	9a 89       	ldd	r25, Y+18	; 0x12
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <CLCD_voidSendCommand+0x348>
    11be:	9a 8b       	std	Y+18, r25	; 0x12
    11c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11c2:	8b 89       	ldd	r24, Y+19	; 0x13
    11c4:	9c 89       	ldd	r25, Y+20	; 0x14
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	9c 8b       	std	Y+20, r25	; 0x14
    11ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11cc:	8b 89       	ldd	r24, Y+19	; 0x13
    11ce:	9c 89       	ldd	r25, Y+20	; 0x14
    11d0:	00 97       	sbiw	r24, 0x00	; 0
    11d2:	69 f7       	brne	.-38     	; 0x11ae <CLCD_voidSendCommand+0x33c>
    11d4:	14 c0       	rjmp	.+40     	; 0x11fe <CLCD_voidSendCommand+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d6:	6d 89       	ldd	r22, Y+21	; 0x15
    11d8:	7e 89       	ldd	r23, Y+22	; 0x16
    11da:	8f 89       	ldd	r24, Y+23	; 0x17
    11dc:	98 8d       	ldd	r25, Y+24	; 0x18
    11de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e2:	dc 01       	movw	r26, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	9c 8b       	std	Y+20, r25	; 0x14
    11e8:	8b 8b       	std	Y+19, r24	; 0x13
    11ea:	8b 89       	ldd	r24, Y+19	; 0x13
    11ec:	9c 89       	ldd	r25, Y+20	; 0x14
    11ee:	98 8b       	std	Y+16, r25	; 0x10
    11f0:	8f 87       	std	Y+15, r24	; 0x0f
    11f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f4:	98 89       	ldd	r25, Y+16	; 0x10
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	f1 f7       	brne	.-4      	; 0x11f6 <CLCD_voidSendCommand+0x384>
    11fa:	98 8b       	std	Y+16, r25	; 0x10
    11fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	62 e0       	ldi	r22, 0x02	; 2
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	a0 e0       	ldi	r26, 0x00	; 0
    120e:	b0 e4       	ldi	r27, 0x40	; 64
    1210:	8b 87       	std	Y+11, r24	; 0x0b
    1212:	9c 87       	std	Y+12, r25	; 0x0c
    1214:	ad 87       	std	Y+13, r26	; 0x0d
    1216:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1218:	6b 85       	ldd	r22, Y+11	; 0x0b
    121a:	7c 85       	ldd	r23, Y+12	; 0x0c
    121c:	8d 85       	ldd	r24, Y+13	; 0x0d
    121e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	4a ef       	ldi	r20, 0xFA	; 250
    1226:	54 e4       	ldi	r21, 0x44	; 68
    1228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	8f 83       	std	Y+7, r24	; 0x07
    1232:	98 87       	std	Y+8, r25	; 0x08
    1234:	a9 87       	std	Y+9, r26	; 0x09
    1236:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1238:	6f 81       	ldd	r22, Y+7	; 0x07
    123a:	78 85       	ldd	r23, Y+8	; 0x08
    123c:	89 85       	ldd	r24, Y+9	; 0x09
    123e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1240:	20 e0       	ldi	r18, 0x00	; 0
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	40 e8       	ldi	r20, 0x80	; 128
    1246:	5f e3       	ldi	r21, 0x3F	; 63
    1248:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    124c:	88 23       	and	r24, r24
    124e:	2c f4       	brge	.+10     	; 0x125a <CLCD_voidSendCommand+0x3e8>
		__ticks = 1;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	9e 83       	std	Y+6, r25	; 0x06
    1256:	8d 83       	std	Y+5, r24	; 0x05
    1258:	3f c0       	rjmp	.+126    	; 0x12d8 <CLCD_voidSendCommand+0x466>
	else if (__tmp > 65535)
    125a:	6f 81       	ldd	r22, Y+7	; 0x07
    125c:	78 85       	ldd	r23, Y+8	; 0x08
    125e:	89 85       	ldd	r24, Y+9	; 0x09
    1260:	9a 85       	ldd	r25, Y+10	; 0x0a
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	3f ef       	ldi	r19, 0xFF	; 255
    1266:	4f e7       	ldi	r20, 0x7F	; 127
    1268:	57 e4       	ldi	r21, 0x47	; 71
    126a:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    126e:	18 16       	cp	r1, r24
    1270:	4c f5       	brge	.+82     	; 0x12c4 <CLCD_voidSendCommand+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1272:	6b 85       	ldd	r22, Y+11	; 0x0b
    1274:	7c 85       	ldd	r23, Y+12	; 0x0c
    1276:	8d 85       	ldd	r24, Y+13	; 0x0d
    1278:	9e 85       	ldd	r25, Y+14	; 0x0e
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	40 e2       	ldi	r20, 0x20	; 32
    1280:	51 e4       	ldi	r21, 0x41	; 65
    1282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	bc 01       	movw	r22, r24
    128c:	cd 01       	movw	r24, r26
    128e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1292:	dc 01       	movw	r26, r24
    1294:	cb 01       	movw	r24, r22
    1296:	9e 83       	std	Y+6, r25	; 0x06
    1298:	8d 83       	std	Y+5, r24	; 0x05
    129a:	0f c0       	rjmp	.+30     	; 0x12ba <CLCD_voidSendCommand+0x448>
    129c:	88 ec       	ldi	r24, 0xC8	; 200
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	9c 83       	std	Y+4, r25	; 0x04
    12a2:	8b 83       	std	Y+3, r24	; 0x03
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	f1 f7       	brne	.-4      	; 0x12a8 <CLCD_voidSendCommand+0x436>
    12ac:	9c 83       	std	Y+4, r25	; 0x04
    12ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b0:	8d 81       	ldd	r24, Y+5	; 0x05
    12b2:	9e 81       	ldd	r25, Y+6	; 0x06
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	9e 83       	std	Y+6, r25	; 0x06
    12b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ba:	8d 81       	ldd	r24, Y+5	; 0x05
    12bc:	9e 81       	ldd	r25, Y+6	; 0x06
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	69 f7       	brne	.-38     	; 0x129c <CLCD_voidSendCommand+0x42a>
    12c2:	14 c0       	rjmp	.+40     	; 0x12ec <CLCD_voidSendCommand+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c4:	6f 81       	ldd	r22, Y+7	; 0x07
    12c6:	78 85       	ldd	r23, Y+8	; 0x08
    12c8:	89 85       	ldd	r24, Y+9	; 0x09
    12ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    12cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	9e 83       	std	Y+6, r25	; 0x06
    12d6:	8d 83       	std	Y+5, r24	; 0x05
    12d8:	8d 81       	ldd	r24, Y+5	; 0x05
    12da:	9e 81       	ldd	r25, Y+6	; 0x06
    12dc:	9a 83       	std	Y+2, r25	; 0x02
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	9a 81       	ldd	r25, Y+2	; 0x02
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	f1 f7       	brne	.-4      	; 0x12e4 <CLCD_voidSendCommand+0x472>
    12e8:	9a 83       	std	Y+2, r25	; 0x02
    12ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	#else
	#endif

}
    12ec:	e9 96       	adiw	r28, 0x39	; 57
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <CLCD_voidSendData>:

void CLCD_voidSendData(u8 Copy_u8Data)
{
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	e9 97       	sbiw	r28, 0x39	; 57
    1308:	0f b6       	in	r0, 0x3f	; 63
    130a:	f8 94       	cli
    130c:	de bf       	out	0x3e, r29	; 62
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	cd bf       	out	0x3d, r28	; 61
    1312:	89 af       	std	Y+57, r24	; 0x39
	/*SET RS PIN TO HIGH*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN,DIO_u8PIN_HIGH);
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	63 e0       	ldi	r22, 0x03	; 3
    1318:	41 e0       	ldi	r20, 0x01	; 1
    131a:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
	_delay_ms(2);

	#elif CLCD_MODE == 4
	/*READING THE COMMAD FROM DATA PORT*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4,GET_BIT(Copy_u8Data,4));
    131e:	89 ad       	ldd	r24, Y+57	; 0x39
    1320:	82 95       	swap	r24
    1322:	8f 70       	andi	r24, 0x0F	; 15
    1324:	98 2f       	mov	r25, r24
    1326:	91 70       	andi	r25, 0x01	; 1
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	49 2f       	mov	r20, r25
    132e:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5,GET_BIT(Copy_u8Data,5));
    1332:	89 ad       	ldd	r24, Y+57	; 0x39
    1334:	82 95       	swap	r24
    1336:	86 95       	lsr	r24
    1338:	87 70       	andi	r24, 0x07	; 7
    133a:	98 2f       	mov	r25, r24
    133c:	91 70       	andi	r25, 0x01	; 1
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	61 e0       	ldi	r22, 0x01	; 1
    1342:	49 2f       	mov	r20, r25
    1344:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6,GET_BIT(Copy_u8Data,6));
    1348:	89 ad       	ldd	r24, Y+57	; 0x39
    134a:	82 95       	swap	r24
    134c:	86 95       	lsr	r24
    134e:	86 95       	lsr	r24
    1350:	83 70       	andi	r24, 0x03	; 3
    1352:	98 2f       	mov	r25, r24
    1354:	91 70       	andi	r25, 0x01	; 1
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	62 e0       	ldi	r22, 0x02	; 2
    135a:	49 2f       	mov	r20, r25
    135c:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7,GET_BIT(Copy_u8Data,7));
    1360:	89 ad       	ldd	r24, Y+57	; 0x39
    1362:	98 2f       	mov	r25, r24
    1364:	99 1f       	adc	r25, r25
    1366:	99 27       	eor	r25, r25
    1368:	99 1f       	adc	r25, r25
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	64 e0       	ldi	r22, 0x04	; 4
    136e:	49 2f       	mov	r20, r25
    1370:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>


	/*ENABLE PULSE*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	62 e0       	ldi	r22, 0x02	; 2
    1378:	41 e0       	ldi	r20, 0x01	; 1
    137a:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	a0 e0       	ldi	r26, 0x00	; 0
    1384:	b0 e4       	ldi	r27, 0x40	; 64
    1386:	8d ab       	std	Y+53, r24	; 0x35
    1388:	9e ab       	std	Y+54, r25	; 0x36
    138a:	af ab       	std	Y+55, r26	; 0x37
    138c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    138e:	6d a9       	ldd	r22, Y+53	; 0x35
    1390:	7e a9       	ldd	r23, Y+54	; 0x36
    1392:	8f a9       	ldd	r24, Y+55	; 0x37
    1394:	98 ad       	ldd	r25, Y+56	; 0x38
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	4a ef       	ldi	r20, 0xFA	; 250
    139c:	54 e4       	ldi	r21, 0x44	; 68
    139e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	89 ab       	std	Y+49, r24	; 0x31
    13a8:	9a ab       	std	Y+50, r25	; 0x32
    13aa:	ab ab       	std	Y+51, r26	; 0x33
    13ac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    13ae:	69 a9       	ldd	r22, Y+49	; 0x31
    13b0:	7a a9       	ldd	r23, Y+50	; 0x32
    13b2:	8b a9       	ldd	r24, Y+51	; 0x33
    13b4:	9c a9       	ldd	r25, Y+52	; 0x34
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	40 e8       	ldi	r20, 0x80	; 128
    13bc:	5f e3       	ldi	r21, 0x3F	; 63
    13be:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    13c2:	88 23       	and	r24, r24
    13c4:	2c f4       	brge	.+10     	; 0x13d0 <CLCD_voidSendData+0xd2>
		__ticks = 1;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	98 ab       	std	Y+48, r25	; 0x30
    13cc:	8f a7       	std	Y+47, r24	; 0x2f
    13ce:	3f c0       	rjmp	.+126    	; 0x144e <CLCD_voidSendData+0x150>
	else if (__tmp > 65535)
    13d0:	69 a9       	ldd	r22, Y+49	; 0x31
    13d2:	7a a9       	ldd	r23, Y+50	; 0x32
    13d4:	8b a9       	ldd	r24, Y+51	; 0x33
    13d6:	9c a9       	ldd	r25, Y+52	; 0x34
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	3f ef       	ldi	r19, 0xFF	; 255
    13dc:	4f e7       	ldi	r20, 0x7F	; 127
    13de:	57 e4       	ldi	r21, 0x47	; 71
    13e0:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    13e4:	18 16       	cp	r1, r24
    13e6:	4c f5       	brge	.+82     	; 0x143a <CLCD_voidSendData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13e8:	6d a9       	ldd	r22, Y+53	; 0x35
    13ea:	7e a9       	ldd	r23, Y+54	; 0x36
    13ec:	8f a9       	ldd	r24, Y+55	; 0x37
    13ee:	98 ad       	ldd	r25, Y+56	; 0x38
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e2       	ldi	r20, 0x20	; 32
    13f6:	51 e4       	ldi	r21, 0x41	; 65
    13f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fc:	dc 01       	movw	r26, r24
    13fe:	cb 01       	movw	r24, r22
    1400:	bc 01       	movw	r22, r24
    1402:	cd 01       	movw	r24, r26
    1404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	98 ab       	std	Y+48, r25	; 0x30
    140e:	8f a7       	std	Y+47, r24	; 0x2f
    1410:	0f c0       	rjmp	.+30     	; 0x1430 <CLCD_voidSendData+0x132>
    1412:	88 ec       	ldi	r24, 0xC8	; 200
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	9e a7       	std	Y+46, r25	; 0x2e
    1418:	8d a7       	std	Y+45, r24	; 0x2d
    141a:	8d a5       	ldd	r24, Y+45	; 0x2d
    141c:	9e a5       	ldd	r25, Y+46	; 0x2e
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <CLCD_voidSendData+0x120>
    1422:	9e a7       	std	Y+46, r25	; 0x2e
    1424:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1426:	8f a5       	ldd	r24, Y+47	; 0x2f
    1428:	98 a9       	ldd	r25, Y+48	; 0x30
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	98 ab       	std	Y+48, r25	; 0x30
    142e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1430:	8f a5       	ldd	r24, Y+47	; 0x2f
    1432:	98 a9       	ldd	r25, Y+48	; 0x30
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	69 f7       	brne	.-38     	; 0x1412 <CLCD_voidSendData+0x114>
    1438:	14 c0       	rjmp	.+40     	; 0x1462 <CLCD_voidSendData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    143a:	69 a9       	ldd	r22, Y+49	; 0x31
    143c:	7a a9       	ldd	r23, Y+50	; 0x32
    143e:	8b a9       	ldd	r24, Y+51	; 0x33
    1440:	9c a9       	ldd	r25, Y+52	; 0x34
    1442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	98 ab       	std	Y+48, r25	; 0x30
    144c:	8f a7       	std	Y+47, r24	; 0x2f
    144e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1450:	98 a9       	ldd	r25, Y+48	; 0x30
    1452:	9c a7       	std	Y+44, r25	; 0x2c
    1454:	8b a7       	std	Y+43, r24	; 0x2b
    1456:	8b a5       	ldd	r24, Y+43	; 0x2b
    1458:	9c a5       	ldd	r25, Y+44	; 0x2c
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	f1 f7       	brne	.-4      	; 0x145a <CLCD_voidSendData+0x15c>
    145e:	9c a7       	std	Y+44, r25	; 0x2c
    1460:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	62 e0       	ldi	r22, 0x02	; 2
    1466:	40 e0       	ldi	r20, 0x00	; 0
    1468:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a0 e0       	ldi	r26, 0x00	; 0
    1472:	b0 e4       	ldi	r27, 0x40	; 64
    1474:	8f a3       	std	Y+39, r24	; 0x27
    1476:	98 a7       	std	Y+40, r25	; 0x28
    1478:	a9 a7       	std	Y+41, r26	; 0x29
    147a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    147c:	6f a1       	ldd	r22, Y+39	; 0x27
    147e:	78 a5       	ldd	r23, Y+40	; 0x28
    1480:	89 a5       	ldd	r24, Y+41	; 0x29
    1482:	9a a5       	ldd	r25, Y+42	; 0x2a
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	4a ef       	ldi	r20, 0xFA	; 250
    148a:	54 e4       	ldi	r21, 0x44	; 68
    148c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	8b a3       	std	Y+35, r24	; 0x23
    1496:	9c a3       	std	Y+36, r25	; 0x24
    1498:	ad a3       	std	Y+37, r26	; 0x25
    149a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    149c:	6b a1       	ldd	r22, Y+35	; 0x23
    149e:	7c a1       	ldd	r23, Y+36	; 0x24
    14a0:	8d a1       	ldd	r24, Y+37	; 0x25
    14a2:	9e a1       	ldd	r25, Y+38	; 0x26
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e8       	ldi	r20, 0x80	; 128
    14aa:	5f e3       	ldi	r21, 0x3F	; 63
    14ac:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    14b0:	88 23       	and	r24, r24
    14b2:	2c f4       	brge	.+10     	; 0x14be <CLCD_voidSendData+0x1c0>
		__ticks = 1;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	9a a3       	std	Y+34, r25	; 0x22
    14ba:	89 a3       	std	Y+33, r24	; 0x21
    14bc:	3f c0       	rjmp	.+126    	; 0x153c <CLCD_voidSendData+0x23e>
	else if (__tmp > 65535)
    14be:	6b a1       	ldd	r22, Y+35	; 0x23
    14c0:	7c a1       	ldd	r23, Y+36	; 0x24
    14c2:	8d a1       	ldd	r24, Y+37	; 0x25
    14c4:	9e a1       	ldd	r25, Y+38	; 0x26
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	3f ef       	ldi	r19, 0xFF	; 255
    14ca:	4f e7       	ldi	r20, 0x7F	; 127
    14cc:	57 e4       	ldi	r21, 0x47	; 71
    14ce:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    14d2:	18 16       	cp	r1, r24
    14d4:	4c f5       	brge	.+82     	; 0x1528 <CLCD_voidSendData+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d6:	6f a1       	ldd	r22, Y+39	; 0x27
    14d8:	78 a5       	ldd	r23, Y+40	; 0x28
    14da:	89 a5       	ldd	r24, Y+41	; 0x29
    14dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e2       	ldi	r20, 0x20	; 32
    14e4:	51 e4       	ldi	r21, 0x41	; 65
    14e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	bc 01       	movw	r22, r24
    14f0:	cd 01       	movw	r24, r26
    14f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	9a a3       	std	Y+34, r25	; 0x22
    14fc:	89 a3       	std	Y+33, r24	; 0x21
    14fe:	0f c0       	rjmp	.+30     	; 0x151e <CLCD_voidSendData+0x220>
    1500:	88 ec       	ldi	r24, 0xC8	; 200
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	98 a3       	std	Y+32, r25	; 0x20
    1506:	8f 8f       	std	Y+31, r24	; 0x1f
    1508:	8f 8d       	ldd	r24, Y+31	; 0x1f
    150a:	98 a1       	ldd	r25, Y+32	; 0x20
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	f1 f7       	brne	.-4      	; 0x150c <CLCD_voidSendData+0x20e>
    1510:	98 a3       	std	Y+32, r25	; 0x20
    1512:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1514:	89 a1       	ldd	r24, Y+33	; 0x21
    1516:	9a a1       	ldd	r25, Y+34	; 0x22
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	9a a3       	std	Y+34, r25	; 0x22
    151c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    151e:	89 a1       	ldd	r24, Y+33	; 0x21
    1520:	9a a1       	ldd	r25, Y+34	; 0x22
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	69 f7       	brne	.-38     	; 0x1500 <CLCD_voidSendData+0x202>
    1526:	14 c0       	rjmp	.+40     	; 0x1550 <CLCD_voidSendData+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1528:	6b a1       	ldd	r22, Y+35	; 0x23
    152a:	7c a1       	ldd	r23, Y+36	; 0x24
    152c:	8d a1       	ldd	r24, Y+37	; 0x25
    152e:	9e a1       	ldd	r25, Y+38	; 0x26
    1530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	9a a3       	std	Y+34, r25	; 0x22
    153a:	89 a3       	std	Y+33, r24	; 0x21
    153c:	89 a1       	ldd	r24, Y+33	; 0x21
    153e:	9a a1       	ldd	r25, Y+34	; 0x22
    1540:	9e 8f       	std	Y+30, r25	; 0x1e
    1542:	8d 8f       	std	Y+29, r24	; 0x1d
    1544:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1546:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	f1 f7       	brne	.-4      	; 0x1548 <CLCD_voidSendData+0x24a>
    154c:	9e 8f       	std	Y+30, r25	; 0x1e
    154e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	/*READING THE COMMAD FROM DATA PORT*/
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D4,GET_BIT(Copy_u8Data,0));
    1550:	89 ad       	ldd	r24, Y+57	; 0x39
    1552:	98 2f       	mov	r25, r24
    1554:	91 70       	andi	r25, 0x01	; 1
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	60 e0       	ldi	r22, 0x00	; 0
    155a:	49 2f       	mov	r20, r25
    155c:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D5,GET_BIT(Copy_u8Data,1));
    1560:	89 ad       	ldd	r24, Y+57	; 0x39
    1562:	86 95       	lsr	r24
    1564:	98 2f       	mov	r25, r24
    1566:	91 70       	andi	r25, 0x01	; 1
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	61 e0       	ldi	r22, 0x01	; 1
    156c:	49 2f       	mov	r20, r25
    156e:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D6,GET_BIT(Copy_u8Data,2));
    1572:	89 ad       	ldd	r24, Y+57	; 0x39
    1574:	86 95       	lsr	r24
    1576:	86 95       	lsr	r24
    1578:	98 2f       	mov	r25, r24
    157a:	91 70       	andi	r25, 0x01	; 1
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	62 e0       	ldi	r22, 0x02	; 2
    1580:	49 2f       	mov	r20, r25
    1582:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
	DIO_u8SetPinValue(CLCD_DATA_PORT,CLCD_D7,GET_BIT(Copy_u8Data,3));
    1586:	89 ad       	ldd	r24, Y+57	; 0x39
    1588:	86 95       	lsr	r24
    158a:	86 95       	lsr	r24
    158c:	86 95       	lsr	r24
    158e:	98 2f       	mov	r25, r24
    1590:	91 70       	andi	r25, 0x01	; 1
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	64 e0       	ldi	r22, 0x04	; 4
    1596:	49 2f       	mov	r20, r25
    1598:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>

	/*ENABLE PULSE*/
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_HIGH);
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	62 e0       	ldi	r22, 0x02	; 2
    15a0:	41 e0       	ldi	r20, 0x01	; 1
    15a2:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	a0 e0       	ldi	r26, 0x00	; 0
    15ac:	b0 e4       	ldi	r27, 0x40	; 64
    15ae:	89 8f       	std	Y+25, r24	; 0x19
    15b0:	9a 8f       	std	Y+26, r25	; 0x1a
    15b2:	ab 8f       	std	Y+27, r26	; 0x1b
    15b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b6:	69 8d       	ldd	r22, Y+25	; 0x19
    15b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	4a ef       	ldi	r20, 0xFA	; 250
    15c4:	54 e4       	ldi	r21, 0x44	; 68
    15c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ca:	dc 01       	movw	r26, r24
    15cc:	cb 01       	movw	r24, r22
    15ce:	8d 8b       	std	Y+21, r24	; 0x15
    15d0:	9e 8b       	std	Y+22, r25	; 0x16
    15d2:	af 8b       	std	Y+23, r26	; 0x17
    15d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15d6:	6d 89       	ldd	r22, Y+21	; 0x15
    15d8:	7e 89       	ldd	r23, Y+22	; 0x16
    15da:	8f 89       	ldd	r24, Y+23	; 0x17
    15dc:	98 8d       	ldd	r25, Y+24	; 0x18
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e8       	ldi	r20, 0x80	; 128
    15e4:	5f e3       	ldi	r21, 0x3F	; 63
    15e6:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    15ea:	88 23       	and	r24, r24
    15ec:	2c f4       	brge	.+10     	; 0x15f8 <CLCD_voidSendData+0x2fa>
		__ticks = 1;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	9c 8b       	std	Y+20, r25	; 0x14
    15f4:	8b 8b       	std	Y+19, r24	; 0x13
    15f6:	3f c0       	rjmp	.+126    	; 0x1676 <CLCD_voidSendData+0x378>
	else if (__tmp > 65535)
    15f8:	6d 89       	ldd	r22, Y+21	; 0x15
    15fa:	7e 89       	ldd	r23, Y+22	; 0x16
    15fc:	8f 89       	ldd	r24, Y+23	; 0x17
    15fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	3f ef       	ldi	r19, 0xFF	; 255
    1604:	4f e7       	ldi	r20, 0x7F	; 127
    1606:	57 e4       	ldi	r21, 0x47	; 71
    1608:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    160c:	18 16       	cp	r1, r24
    160e:	4c f5       	brge	.+82     	; 0x1662 <CLCD_voidSendData+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1610:	69 8d       	ldd	r22, Y+25	; 0x19
    1612:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1614:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1616:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	40 e2       	ldi	r20, 0x20	; 32
    161e:	51 e4       	ldi	r21, 0x41	; 65
    1620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	bc 01       	movw	r22, r24
    162a:	cd 01       	movw	r24, r26
    162c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1630:	dc 01       	movw	r26, r24
    1632:	cb 01       	movw	r24, r22
    1634:	9c 8b       	std	Y+20, r25	; 0x14
    1636:	8b 8b       	std	Y+19, r24	; 0x13
    1638:	0f c0       	rjmp	.+30     	; 0x1658 <CLCD_voidSendData+0x35a>
    163a:	88 ec       	ldi	r24, 0xC8	; 200
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	9a 8b       	std	Y+18, r25	; 0x12
    1640:	89 8b       	std	Y+17, r24	; 0x11
    1642:	89 89       	ldd	r24, Y+17	; 0x11
    1644:	9a 89       	ldd	r25, Y+18	; 0x12
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <CLCD_voidSendData+0x348>
    164a:	9a 8b       	std	Y+18, r25	; 0x12
    164c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    164e:	8b 89       	ldd	r24, Y+19	; 0x13
    1650:	9c 89       	ldd	r25, Y+20	; 0x14
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	9c 8b       	std	Y+20, r25	; 0x14
    1656:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1658:	8b 89       	ldd	r24, Y+19	; 0x13
    165a:	9c 89       	ldd	r25, Y+20	; 0x14
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	69 f7       	brne	.-38     	; 0x163a <CLCD_voidSendData+0x33c>
    1660:	14 c0       	rjmp	.+40     	; 0x168a <CLCD_voidSendData+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1662:	6d 89       	ldd	r22, Y+21	; 0x15
    1664:	7e 89       	ldd	r23, Y+22	; 0x16
    1666:	8f 89       	ldd	r24, Y+23	; 0x17
    1668:	98 8d       	ldd	r25, Y+24	; 0x18
    166a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    166e:	dc 01       	movw	r26, r24
    1670:	cb 01       	movw	r24, r22
    1672:	9c 8b       	std	Y+20, r25	; 0x14
    1674:	8b 8b       	std	Y+19, r24	; 0x13
    1676:	8b 89       	ldd	r24, Y+19	; 0x13
    1678:	9c 89       	ldd	r25, Y+20	; 0x14
    167a:	98 8b       	std	Y+16, r25	; 0x10
    167c:	8f 87       	std	Y+15, r24	; 0x0f
    167e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1680:	98 89       	ldd	r25, Y+16	; 0x10
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	f1 f7       	brne	.-4      	; 0x1682 <CLCD_voidSendData+0x384>
    1686:	98 8b       	std	Y+16, r25	; 0x10
    1688:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8SetPinValue(CLCD_CTRL_PORT,CLCD_E_PIN,DIO_u8PIN_LOW);
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	62 e0       	ldi	r22, 0x02	; 2
    168e:	40 e0       	ldi	r20, 0x00	; 0
    1690:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	a0 e0       	ldi	r26, 0x00	; 0
    169a:	b0 e4       	ldi	r27, 0x40	; 64
    169c:	8b 87       	std	Y+11, r24	; 0x0b
    169e:	9c 87       	std	Y+12, r25	; 0x0c
    16a0:	ad 87       	std	Y+13, r26	; 0x0d
    16a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	4a ef       	ldi	r20, 0xFA	; 250
    16b2:	54 e4       	ldi	r21, 0x44	; 68
    16b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	8f 83       	std	Y+7, r24	; 0x07
    16be:	98 87       	std	Y+8, r25	; 0x08
    16c0:	a9 87       	std	Y+9, r26	; 0x09
    16c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16c4:	6f 81       	ldd	r22, Y+7	; 0x07
    16c6:	78 85       	ldd	r23, Y+8	; 0x08
    16c8:	89 85       	ldd	r24, Y+9	; 0x09
    16ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e8       	ldi	r20, 0x80	; 128
    16d2:	5f e3       	ldi	r21, 0x3F	; 63
    16d4:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    16d8:	88 23       	and	r24, r24
    16da:	2c f4       	brge	.+10     	; 0x16e6 <CLCD_voidSendData+0x3e8>
		__ticks = 1;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	9e 83       	std	Y+6, r25	; 0x06
    16e2:	8d 83       	std	Y+5, r24	; 0x05
    16e4:	3f c0       	rjmp	.+126    	; 0x1764 <CLCD_voidSendData+0x466>
	else if (__tmp > 65535)
    16e6:	6f 81       	ldd	r22, Y+7	; 0x07
    16e8:	78 85       	ldd	r23, Y+8	; 0x08
    16ea:	89 85       	ldd	r24, Y+9	; 0x09
    16ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	3f ef       	ldi	r19, 0xFF	; 255
    16f2:	4f e7       	ldi	r20, 0x7F	; 127
    16f4:	57 e4       	ldi	r21, 0x47	; 71
    16f6:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    16fa:	18 16       	cp	r1, r24
    16fc:	4c f5       	brge	.+82     	; 0x1750 <CLCD_voidSendData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1700:	7c 85       	ldd	r23, Y+12	; 0x0c
    1702:	8d 85       	ldd	r24, Y+13	; 0x0d
    1704:	9e 85       	ldd	r25, Y+14	; 0x0e
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e2       	ldi	r20, 0x20	; 32
    170c:	51 e4       	ldi	r21, 0x41	; 65
    170e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	9e 83       	std	Y+6, r25	; 0x06
    1724:	8d 83       	std	Y+5, r24	; 0x05
    1726:	0f c0       	rjmp	.+30     	; 0x1746 <CLCD_voidSendData+0x448>
    1728:	88 ec       	ldi	r24, 0xC8	; 200
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9c 83       	std	Y+4, r25	; 0x04
    172e:	8b 83       	std	Y+3, r24	; 0x03
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <CLCD_voidSendData+0x436>
    1738:	9c 83       	std	Y+4, r25	; 0x04
    173a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
    173e:	9e 81       	ldd	r25, Y+6	; 0x06
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	9e 83       	std	Y+6, r25	; 0x06
    1744:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	69 f7       	brne	.-38     	; 0x1728 <CLCD_voidSendData+0x42a>
    174e:	14 c0       	rjmp	.+40     	; 0x1778 <CLCD_voidSendData+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1750:	6f 81       	ldd	r22, Y+7	; 0x07
    1752:	78 85       	ldd	r23, Y+8	; 0x08
    1754:	89 85       	ldd	r24, Y+9	; 0x09
    1756:	9a 85       	ldd	r25, Y+10	; 0x0a
    1758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	9e 83       	std	Y+6, r25	; 0x06
    1762:	8d 83       	std	Y+5, r24	; 0x05
    1764:	8d 81       	ldd	r24, Y+5	; 0x05
    1766:	9e 81       	ldd	r25, Y+6	; 0x06
    1768:	9a 83       	std	Y+2, r25	; 0x02
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	89 81       	ldd	r24, Y+1	; 0x01
    176e:	9a 81       	ldd	r25, Y+2	; 0x02
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <CLCD_voidSendData+0x472>
    1774:	9a 83       	std	Y+2, r25	; 0x02
    1776:	89 83       	std	Y+1, r24	; 0x01

	#else

	#endif

}
    1778:	e9 96       	adiw	r28, 0x39	; 57
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <CLCD_voidSendString>:


void CLCD_voidSendString(const char* Copy_PtrString)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <CLCD_voidSendString+0x6>
    1790:	0f 92       	push	r0
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
    1796:	9b 83       	std	Y+3, r25	; 0x03
    1798:	8a 83       	std	Y+2, r24	; 0x02
	for (u8 i = 0; Copy_PtrString[i] !='\0'; i++)
    179a:	19 82       	std	Y+1, r1	; 0x01
    179c:	0e c0       	rjmp	.+28     	; 0x17ba <CLCD_voidSendString+0x30>
	{
		CLCD_voidSendData(Copy_PtrString[i]);
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	9b 81       	ldd	r25, Y+3	; 0x03
    17a8:	fc 01       	movw	r30, r24
    17aa:	e2 0f       	add	r30, r18
    17ac:	f3 1f       	adc	r31, r19
    17ae:	80 81       	ld	r24, Z
    17b0:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSendData>
}


void CLCD_voidSendString(const char* Copy_PtrString)
{
	for (u8 i = 0; Copy_PtrString[i] !='\0'; i++)
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	8f 5f       	subi	r24, 0xFF	; 255
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	9b 81       	ldd	r25, Y+3	; 0x03
    17c4:	fc 01       	movw	r30, r24
    17c6:	e2 0f       	add	r30, r18
    17c8:	f3 1f       	adc	r31, r19
    17ca:	80 81       	ld	r24, Z
    17cc:	88 23       	and	r24, r24
    17ce:	39 f7       	brne	.-50     	; 0x179e <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(Copy_PtrString[i]);
	}
}
    17d0:	0f 90       	pop	r0
    17d2:	0f 90       	pop	r0
    17d4:	0f 90       	pop	r0
    17d6:	cf 91       	pop	r28
    17d8:	df 91       	pop	r29
    17da:	08 95       	ret

000017dc <CLCD_voidSendInteger>:



void CLCD_voidSendInteger(u16 Copy_Number)
{
    17dc:	df 93       	push	r29
    17de:	cf 93       	push	r28
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	2b 97       	sbiw	r28, 0x0b	; 11
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	9b 87       	std	Y+11, r25	; 0x0b
    17f2:	8a 87       	std	Y+10, r24	; 0x0a
	if (!Copy_Number)
    17f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    17f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	19 f4       	brne	.+6      	; 0x1802 <CLCD_voidSendInteger+0x26>
		CLCD_voidSendData('0');
    17fc:	80 e3       	ldi	r24, 0x30	; 48
    17fe:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSendData>
	//reversing number
	u16 Local_u16Number = Copy_Number;
    1802:	8a 85       	ldd	r24, Y+10	; 0x0a
    1804:	9b 85       	ldd	r25, Y+11	; 0x0b
    1806:	9c 83       	std	Y+4, r25	; 0x04
    1808:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Array[5];
	u8 Local_i1, Local_i2;
	for (Local_i1=0; Local_u16Number!=0; Local_i1++)
    180a:	1a 82       	std	Y+2, r1	; 0x02
    180c:	1d c0       	rjmp	.+58     	; 0x1848 <CLCD_voidSendInteger+0x6c>
	{
		Local_u8Array[Local_i1] = Local_u16Number % 10;
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	e8 2f       	mov	r30, r24
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	2a e0       	ldi	r18, 0x0A	; 10
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	b9 01       	movw	r22, r18
    181e:	0e 94 97 14 	call	0x292e	; 0x292e <__udivmodhi4>
    1822:	28 2f       	mov	r18, r24
    1824:	ce 01       	movw	r24, r28
    1826:	05 96       	adiw	r24, 0x05	; 5
    1828:	e8 0f       	add	r30, r24
    182a:	f9 1f       	adc	r31, r25
    182c:	20 83       	st	Z, r18
		Local_u16Number /=10;
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	9c 81       	ldd	r25, Y+4	; 0x04
    1832:	2a e0       	ldi	r18, 0x0A	; 10
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	b9 01       	movw	r22, r18
    1838:	0e 94 97 14 	call	0x292e	; 0x292e <__udivmodhi4>
    183c:	cb 01       	movw	r24, r22
    183e:	9c 83       	std	Y+4, r25	; 0x04
    1840:	8b 83       	std	Y+3, r24	; 0x03
		CLCD_voidSendData('0');
	//reversing number
	u16 Local_u16Number = Copy_Number;
	u8 Local_u8Array[5];
	u8 Local_i1, Local_i2;
	for (Local_i1=0; Local_u16Number!=0; Local_i1++)
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	8f 5f       	subi	r24, 0xFF	; 255
    1846:	8a 83       	std	Y+2, r24	; 0x02
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	9c 81       	ldd	r25, Y+4	; 0x04
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	f9 f6       	brne	.-66     	; 0x180e <CLCD_voidSendInteger+0x32>
	{
		Local_u8Array[Local_i1] = Local_u16Number % 10;
		Local_u16Number /=10;
	}
	for (Local_i2 = Local_i1; Local_i2!=0; Local_i2--)
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	89 83       	std	Y+1, r24	; 0x01
    1854:	12 c0       	rjmp	.+36     	; 0x187a <CLCD_voidSendInteger+0x9e>
	{
		CLCD_voidSendData(Local_u8Array[Local_i2-1]+'0');
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	88 2f       	mov	r24, r24
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	9c 01       	movw	r18, r24
    185e:	21 50       	subi	r18, 0x01	; 1
    1860:	30 40       	sbci	r19, 0x00	; 0
    1862:	ce 01       	movw	r24, r28
    1864:	05 96       	adiw	r24, 0x05	; 5
    1866:	fc 01       	movw	r30, r24
    1868:	e2 0f       	add	r30, r18
    186a:	f3 1f       	adc	r31, r19
    186c:	80 81       	ld	r24, Z
    186e:	80 5d       	subi	r24, 0xD0	; 208
    1870:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSendData>
	for (Local_i1=0; Local_u16Number!=0; Local_i1++)
	{
		Local_u8Array[Local_i1] = Local_u16Number % 10;
		Local_u16Number /=10;
	}
	for (Local_i2 = Local_i1; Local_i2!=0; Local_i2--)
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	81 50       	subi	r24, 0x01	; 1
    1878:	89 83       	std	Y+1, r24	; 0x01
    187a:	89 81       	ldd	r24, Y+1	; 0x01
    187c:	88 23       	and	r24, r24
    187e:	59 f7       	brne	.-42     	; 0x1856 <CLCD_voidSendInteger+0x7a>
	{
		CLCD_voidSendData(Local_u8Array[Local_i2-1]+'0');
	}

}
    1880:	2b 96       	adiw	r28, 0x0b	; 11
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	de bf       	out	0x3e, r29	; 62
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	cd bf       	out	0x3d, r28	; 61
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <CLCD_voidSendDecimalNumber>:

void CLCD_voidSendDecimalNumber(f32 Copy_Number)
{
    1892:	0f 93       	push	r16
    1894:	1f 93       	push	r17
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	6a 97       	sbiw	r28, 0x1a	; 26
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
    18aa:	6e 8b       	std	Y+22, r22	; 0x16
    18ac:	7f 8b       	std	Y+23, r23	; 0x17
    18ae:	88 8f       	std	Y+24, r24	; 0x18
    18b0:	99 8f       	std	Y+25, r25	; 0x19
	if (!Copy_Number)
    18b2:	1a 8e       	std	Y+26, r1	; 0x1a
    18b4:	6e 89       	ldd	r22, Y+22	; 0x16
    18b6:	7f 89       	ldd	r23, Y+23	; 0x17
    18b8:	88 8d       	ldd	r24, Y+24	; 0x18
    18ba:	99 8d       	ldd	r25, Y+25	; 0x19
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	0e 94 19 03 	call	0x632	; 0x632 <__nesf2>
    18c8:	88 23       	and	r24, r24
    18ca:	11 f0       	breq	.+4      	; 0x18d0 <CLCD_voidSendDecimalNumber+0x3e>
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	8a 8f       	std	Y+26, r24	; 0x1a
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18d4:	89 27       	eor	r24, r25
    18d6:	88 23       	and	r24, r24
    18d8:	19 f0       	breq	.+6      	; 0x18e0 <CLCD_voidSendDecimalNumber+0x4e>
		CLCD_voidSendData('0');
    18da:	80 e3       	ldi	r24, 0x30	; 48
    18dc:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSendData>
	//reversing number
	f32 Local_f32Number = Copy_Number;
    18e0:	8e 89       	ldd	r24, Y+22	; 0x16
    18e2:	9f 89       	ldd	r25, Y+23	; 0x17
    18e4:	a8 8d       	ldd	r26, Y+24	; 0x18
    18e6:	b9 8d       	ldd	r27, Y+25	; 0x19
    18e8:	88 87       	std	Y+8, r24	; 0x08
    18ea:	99 87       	std	Y+9, r25	; 0x09
    18ec:	aa 87       	std	Y+10, r26	; 0x0a
    18ee:	bb 87       	std	Y+11, r27	; 0x0b
	u8 Local_u8Array[10];
	u8 Local_i1, Local_i2;
	u8 Local_NumOfTens=0;
    18f0:	1d 82       	std	Y+5, r1	; 0x05
    18f2:	13 c0       	rjmp	.+38     	; 0x191a <CLCD_voidSendDecimalNumber+0x88>

	while (Local_f32Number-(u32)Local_f32Number)
	{
		Local_f32Number*=10;
    18f4:	68 85       	ldd	r22, Y+8	; 0x08
    18f6:	79 85       	ldd	r23, Y+9	; 0x09
    18f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    18fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e2       	ldi	r20, 0x20	; 32
    1902:	51 e4       	ldi	r21, 0x41	; 65
    1904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	88 87       	std	Y+8, r24	; 0x08
    190e:	99 87       	std	Y+9, r25	; 0x09
    1910:	aa 87       	std	Y+10, r26	; 0x0a
    1912:	bb 87       	std	Y+11, r27	; 0x0b
		Local_NumOfTens++;
    1914:	8d 81       	ldd	r24, Y+5	; 0x05
    1916:	8f 5f       	subi	r24, 0xFF	; 255
    1918:	8d 83       	std	Y+5, r24	; 0x05
	f32 Local_f32Number = Copy_Number;
	u8 Local_u8Array[10];
	u8 Local_i1, Local_i2;
	u8 Local_NumOfTens=0;

	while (Local_f32Number-(u32)Local_f32Number)
    191a:	68 85       	ldd	r22, Y+8	; 0x08
    191c:	79 85       	ldd	r23, Y+9	; 0x09
    191e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1920:	9b 85       	ldd	r25, Y+11	; 0x0b
    1922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	bc 01       	movw	r22, r24
    192c:	cd 01       	movw	r24, r26
    192e:	0e 94 2d 04 	call	0x85a	; 0x85a <__floatunsisf>
    1932:	9b 01       	movw	r18, r22
    1934:	ac 01       	movw	r20, r24
    1936:	68 85       	ldd	r22, Y+8	; 0x08
    1938:	79 85       	ldd	r23, Y+9	; 0x09
    193a:	8a 85       	ldd	r24, Y+10	; 0x0a
    193c:	9b 85       	ldd	r25, Y+11	; 0x0b
    193e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	bc 01       	movw	r22, r24
    1948:	cd 01       	movw	r24, r26
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	50 e0       	ldi	r21, 0x00	; 0
    1952:	0e 94 19 03 	call	0x632	; 0x632 <__nesf2>
    1956:	88 23       	and	r24, r24
    1958:	69 f6       	brne	.-102    	; 0x18f4 <CLCD_voidSendDecimalNumber+0x62>
		Local_f32Number*=10;
		Local_NumOfTens++;
	}

	//casting
	u32 Local_u32Number = Local_f32Number;
    195a:	68 85       	ldd	r22, Y+8	; 0x08
    195c:	79 85       	ldd	r23, Y+9	; 0x09
    195e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1960:	9b 85       	ldd	r25, Y+11	; 0x0b
    1962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	9a 83       	std	Y+2, r25	; 0x02
    196e:	ab 83       	std	Y+3, r26	; 0x03
    1970:	bc 83       	std	Y+4, r27	; 0x04

	for (Local_i1=0; Local_u32Number!=0; Local_i1++)
    1972:	1f 82       	std	Y+7, r1	; 0x07
    1974:	2d c0       	rjmp	.+90     	; 0x19d0 <CLCD_voidSendDecimalNumber+0x13e>
	{
		Local_u8Array[Local_i1] = Local_u32Number % 10;
    1976:	8f 81       	ldd	r24, Y+7	; 0x07
    1978:	08 2f       	mov	r16, r24
    197a:	10 e0       	ldi	r17, 0x00	; 0
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	9a 81       	ldd	r25, Y+2	; 0x02
    1980:	ab 81       	ldd	r26, Y+3	; 0x03
    1982:	bc 81       	ldd	r27, Y+4	; 0x04
    1984:	2a e0       	ldi	r18, 0x0A	; 10
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	bc 01       	movw	r22, r24
    198e:	cd 01       	movw	r24, r26
    1990:	0e 94 ab 14 	call	0x2956	; 0x2956 <__udivmodsi4>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	28 2f       	mov	r18, r24
    199a:	ce 01       	movw	r24, r28
    199c:	0c 96       	adiw	r24, 0x0c	; 12
    199e:	fc 01       	movw	r30, r24
    19a0:	e0 0f       	add	r30, r16
    19a2:	f1 1f       	adc	r31, r17
    19a4:	20 83       	st	Z, r18
		Local_u32Number /=10;
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	9a 81       	ldd	r25, Y+2	; 0x02
    19aa:	ab 81       	ldd	r26, Y+3	; 0x03
    19ac:	bc 81       	ldd	r27, Y+4	; 0x04
    19ae:	2a e0       	ldi	r18, 0x0A	; 10
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	40 e0       	ldi	r20, 0x00	; 0
    19b4:	50 e0       	ldi	r21, 0x00	; 0
    19b6:	bc 01       	movw	r22, r24
    19b8:	cd 01       	movw	r24, r26
    19ba:	0e 94 ab 14 	call	0x2956	; 0x2956 <__udivmodsi4>
    19be:	da 01       	movw	r26, r20
    19c0:	c9 01       	movw	r24, r18
    19c2:	89 83       	std	Y+1, r24	; 0x01
    19c4:	9a 83       	std	Y+2, r25	; 0x02
    19c6:	ab 83       	std	Y+3, r26	; 0x03
    19c8:	bc 83       	std	Y+4, r27	; 0x04
	}

	//casting
	u32 Local_u32Number = Local_f32Number;

	for (Local_i1=0; Local_u32Number!=0; Local_i1++)
    19ca:	8f 81       	ldd	r24, Y+7	; 0x07
    19cc:	8f 5f       	subi	r24, 0xFF	; 255
    19ce:	8f 83       	std	Y+7, r24	; 0x07
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
    19d2:	9a 81       	ldd	r25, Y+2	; 0x02
    19d4:	ab 81       	ldd	r26, Y+3	; 0x03
    19d6:	bc 81       	ldd	r27, Y+4	; 0x04
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	a1 05       	cpc	r26, r1
    19dc:	b1 05       	cpc	r27, r1
    19de:	59 f6       	brne	.-106    	; 0x1976 <CLCD_voidSendDecimalNumber+0xe4>
	{
		Local_u8Array[Local_i1] = Local_u32Number % 10;
		Local_u32Number /=10;
	}

	if (Local_i1 == Local_NumOfTens)
    19e0:	9f 81       	ldd	r25, Y+7	; 0x07
    19e2:	8d 81       	ldd	r24, Y+5	; 0x05
    19e4:	98 17       	cp	r25, r24
    19e6:	19 f4       	brne	.+6      	; 0x19ee <CLCD_voidSendDecimalNumber+0x15c>
		CLCD_voidSendData('0');
    19e8:	80 e3       	ldi	r24, 0x30	; 48
    19ea:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSendData>

	for (Local_i2 = Local_i1; Local_i2!=0; Local_i2--)
    19ee:	8f 81       	ldd	r24, Y+7	; 0x07
    19f0:	8e 83       	std	Y+6, r24	; 0x06
    19f2:	19 c0       	rjmp	.+50     	; 0x1a26 <CLCD_voidSendDecimalNumber+0x194>
	{
		if (Local_i2 == Local_NumOfTens)
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	8d 81       	ldd	r24, Y+5	; 0x05
    19f8:	98 17       	cp	r25, r24
    19fa:	19 f4       	brne	.+6      	; 0x1a02 <CLCD_voidSendDecimalNumber+0x170>
			CLCD_voidSendData('.');
    19fc:	8e e2       	ldi	r24, 0x2E	; 46
    19fe:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSendData>
		CLCD_voidSendData(Local_u8Array[Local_i2-1]+'0');
    1a02:	8e 81       	ldd	r24, Y+6	; 0x06
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	9c 01       	movw	r18, r24
    1a0a:	21 50       	subi	r18, 0x01	; 1
    1a0c:	30 40       	sbci	r19, 0x00	; 0
    1a0e:	ce 01       	movw	r24, r28
    1a10:	0c 96       	adiw	r24, 0x0c	; 12
    1a12:	fc 01       	movw	r30, r24
    1a14:	e2 0f       	add	r30, r18
    1a16:	f3 1f       	adc	r31, r19
    1a18:	80 81       	ld	r24, Z
    1a1a:	80 5d       	subi	r24, 0xD0	; 208
    1a1c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSendData>
	}

	if (Local_i1 == Local_NumOfTens)
		CLCD_voidSendData('0');

	for (Local_i2 = Local_i1; Local_i2!=0; Local_i2--)
    1a20:	8e 81       	ldd	r24, Y+6	; 0x06
    1a22:	81 50       	subi	r24, 0x01	; 1
    1a24:	8e 83       	std	Y+6, r24	; 0x06
    1a26:	8e 81       	ldd	r24, Y+6	; 0x06
    1a28:	88 23       	and	r24, r24
    1a2a:	21 f7       	brne	.-56     	; 0x19f4 <CLCD_voidSendDecimalNumber+0x162>
		if (Local_i2 == Local_NumOfTens)
			CLCD_voidSendData('.');
		CLCD_voidSendData(Local_u8Array[Local_i2-1]+'0');
	}

	if (Local_NumOfTens == 0)
    1a2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2e:	88 23       	and	r24, r24
    1a30:	31 f4       	brne	.+12     	; 0x1a3e <CLCD_voidSendDecimalNumber+0x1ac>
	{
		CLCD_voidSendData('.');
    1a32:	8e e2       	ldi	r24, 0x2E	; 46
    1a34:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSendData>
		CLCD_voidSendData('0');
    1a38:	80 e3       	ldi	r24, 0x30	; 48
    1a3a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSendData>
	}
}
    1a3e:	6a 96       	adiw	r28, 0x1a	; 26
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	1f 91       	pop	r17
    1a50:	0f 91       	pop	r16
    1a52:	08 95       	ret

00001a54 <CLCD_voidGoToRowColumn>:


void CLCD_voidGoToRowColumn(u8 Copy_u8xPosition, u8 Copy_u8yPosition)
{
    1a54:	df 93       	push	r29
    1a56:	cf 93       	push	r28
    1a58:	00 d0       	rcall	.+0      	; 0x1a5a <CLCD_voidGoToRowColumn+0x6>
    1a5a:	00 d0       	rcall	.+0      	; 0x1a5c <CLCD_voidGoToRowColumn+0x8>
    1a5c:	0f 92       	push	r0
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	8a 83       	std	Y+2, r24	; 0x02
    1a64:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Adress;
	switch(Copy_u8xPosition)
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	3d 83       	std	Y+5, r19	; 0x05
    1a6e:	2c 83       	std	Y+4, r18	; 0x04
    1a70:	8c 81       	ldd	r24, Y+4	; 0x04
    1a72:	9d 81       	ldd	r25, Y+5	; 0x05
    1a74:	81 30       	cpi	r24, 0x01	; 1
    1a76:	91 05       	cpc	r25, r1
    1a78:	c1 f0       	breq	.+48     	; 0x1aaa <CLCD_voidGoToRowColumn+0x56>
    1a7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a7e:	22 30       	cpi	r18, 0x02	; 2
    1a80:	31 05       	cpc	r19, r1
    1a82:	2c f4       	brge	.+10     	; 0x1a8e <CLCD_voidGoToRowColumn+0x3a>
    1a84:	8c 81       	ldd	r24, Y+4	; 0x04
    1a86:	9d 81       	ldd	r25, Y+5	; 0x05
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	61 f0       	breq	.+24     	; 0x1aa4 <CLCD_voidGoToRowColumn+0x50>
    1a8c:	19 c0       	rjmp	.+50     	; 0x1ac0 <CLCD_voidGoToRowColumn+0x6c>
    1a8e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a90:	3d 81       	ldd	r19, Y+5	; 0x05
    1a92:	22 30       	cpi	r18, 0x02	; 2
    1a94:	31 05       	cpc	r19, r1
    1a96:	69 f0       	breq	.+26     	; 0x1ab2 <CLCD_voidGoToRowColumn+0x5e>
    1a98:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9c:	83 30       	cpi	r24, 0x03	; 3
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	61 f0       	breq	.+24     	; 0x1aba <CLCD_voidGoToRowColumn+0x66>
    1aa2:	0e c0       	rjmp	.+28     	; 0x1ac0 <CLCD_voidGoToRowColumn+0x6c>
	{
		case 0:  Local_u8Adress = Copy_u8yPosition;  		break;
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	0b c0       	rjmp	.+22     	; 0x1ac0 <CLCD_voidGoToRowColumn+0x6c>
		case 1:  Local_u8Adress = Copy_u8yPosition + 0x40;  break;
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	80 5c       	subi	r24, 0xC0	; 192
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	07 c0       	rjmp	.+14     	; 0x1ac0 <CLCD_voidGoToRowColumn+0x6c>
		case 2:  Local_u8Adress = Copy_u8yPosition + 0x14;  break;
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	8c 5e       	subi	r24, 0xEC	; 236
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    1ab8:	03 c0       	rjmp	.+6      	; 0x1ac0 <CLCD_voidGoToRowColumn+0x6c>
		case 3:  Local_u8Adress = Copy_u8yPosition + 0x54;	break;
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	8c 5a       	subi	r24, 0xAC	; 172
    1abe:	89 83       	std	Y+1, r24	; 0x01
		default: break;
	}

	/* setting the last bit ,As the command is (1 bit[7] , Address counter bits[6:0])*/
	SET_BIT(Local_u8Adress,7);
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	80 68       	ori	r24, 0x80	; 128
    1ac4:	89 83       	std	Y+1, r24	; 0x01

	CLCD_voidSendCommand(Local_u8Adress);
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	0e 94 39 07 	call	0xe72	; 0xe72 <CLCD_voidSendCommand>
}
    1acc:	0f 90       	pop	r0
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <CLCD_voidSendSpecialCharacter>:



void CLCD_voidSendSpecialCharacter(const u8* Copy_u8Arr, u8 Copy_u8PatternNumber)
{
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <CLCD_voidSendSpecialCharacter+0x6>
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <CLCD_voidSendSpecialCharacter+0x8>
    1ae4:	0f 92       	push	r0
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	9c 83       	std	Y+4, r25	; 0x04
    1aec:	8b 83       	std	Y+3, r24	; 0x03
    1aee:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8CGRAMAddress = 0;
    1af0:	1a 82       	std	Y+2, r1	; 0x02
	Local_u8CGRAMAddress = Copy_u8PatternNumber*8;
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
    1af4:	88 2f       	mov	r24, r24
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(Local_u8CGRAMAddress,6);
    1b06:	8a 81       	ldd	r24, Y+2	; 0x02
    1b08:	80 64       	ori	r24, 0x40	; 64
    1b0a:	8a 83       	std	Y+2, r24	; 0x02

	/*moving to CGRAM to write the special character inside it*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress);
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	0e 94 39 07 	call	0xe72	; 0xe72 <CLCD_voidSendCommand>

	/* writing the special character*/
	for (u8 i = 0; i<8; i++)
    1b12:	19 82       	std	Y+1, r1	; 0x01
    1b14:	0e c0       	rjmp	.+28     	; 0x1b32 <CLCD_voidSendSpecialCharacter+0x56>
	{
		CLCD_voidSendData(Copy_u8Arr[i]);
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b20:	fc 01       	movw	r30, r24
    1b22:	e2 0f       	add	r30, r18
    1b24:	f3 1f       	adc	r31, r19
    1b26:	80 81       	ld	r24, Z
    1b28:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSendData>

	/*moving to CGRAM to write the special character inside it*/
	CLCD_voidSendCommand(Local_u8CGRAMAddress);

	/* writing the special character*/
	for (u8 i = 0; i<8; i++)
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	8f 5f       	subi	r24, 0xFF	; 255
    1b30:	89 83       	std	Y+1, r24	; 0x01
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	88 30       	cpi	r24, 0x08	; 8
    1b36:	78 f3       	brcs	.-34     	; 0x1b16 <CLCD_voidSendSpecialCharacter+0x3a>
	{
		CLCD_voidSendData(Copy_u8Arr[i]);
	}

	/* switching again to DDRAM */
	CLCD_voidGoToRowColumn (0,0);  // 0,0 can be changed
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	60 e0       	ldi	r22, 0x00	; 0
    1b3c:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <CLCD_voidGoToRowColumn>
}
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	08 95       	ret

00001b50 <CLCD_voidDisplaySpecialCharacter>:

void CLCD_voidDisplaySpecialCharacter(u8 Copy_u8PatternNumber,u8 Copy_u8XPosition,u8 Copy_u8YPosition)
{
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <CLCD_voidDisplaySpecialCharacter+0x6>
    1b56:	0f 92       	push	r0
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	89 83       	std	Y+1, r24	; 0x01
    1b5e:	6a 83       	std	Y+2, r22	; 0x02
    1b60:	4b 83       	std	Y+3, r20	; 0x03
	CLCD_voidGoToRowColumn (Copy_u8XPosition,Copy_u8YPosition);
    1b62:	8a 81       	ldd	r24, Y+2	; 0x02
    1b64:	6b 81       	ldd	r22, Y+3	; 0x03
    1b66:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <CLCD_voidGoToRowColumn>
	CLCD_voidSendData(Copy_u8PatternNumber);
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSendData>
}
    1b70:	0f 90       	pop	r0
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <DIO_voidInit>:
#include "DIO_interface.h"

/*****************************************************************************************/
#if DIO_CONFIG == 1
void DIO_voidInit()
{
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPortDirection(DIO_u8PORTA, CONC(A7,A6,A5,A4,A3,A2,A1,A0));
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	6c ef       	ldi	r22, 0xFC	; 252
    1b88:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(DIO_u8PORTB, CONC(B7,B6,B5,B4,B3,B2,B1,B0));
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	6f ef       	ldi	r22, 0xFF	; 255
    1b90:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(DIO_u8PORTC, CONC(C7,C6,C5,C4,C3,C2,C1,C0));
    1b94:	82 e0       	ldi	r24, 0x02	; 2
    1b96:	6f ef       	ldi	r22, 0xFF	; 255
    1b98:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <DIO_u8SetPortDirection>
	DIO_u8SetPortDirection(DIO_u8PORTD, CONC(D7,D6,D5,D4,D3,D2,D1,D0));
    1b9c:	83 e0       	ldi	r24, 0x03	; 3
    1b9e:	63 e1       	ldi	r22, 0x13	; 19
    1ba0:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <DIO_u8SetPortDirection>
}
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <DIO_u8SetPortDirection>:
#endif

/*****************************************************************************************/

u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	00 d0       	rcall	.+0      	; 0x1bb0 <DIO_u8SetPortDirection+0x6>
    1bb0:	00 d0       	rcall	.+0      	; 0x1bb2 <DIO_u8SetPortDirection+0x8>
    1bb2:	0f 92       	push	r0
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
    1bb8:	8a 83       	std	Y+2, r24	; 0x02
    1bba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    1bbc:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	3d 83       	std	Y+5, r19	; 0x05
    1bc6:	2c 83       	std	Y+4, r18	; 0x04
    1bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bca:	9d 81       	ldd	r25, Y+5	; 0x05
    1bcc:	81 30       	cpi	r24, 0x01	; 1
    1bce:	91 05       	cpc	r25, r1
    1bd0:	d1 f0       	breq	.+52     	; 0x1c06 <DIO_u8SetPortDirection+0x5c>
    1bd2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bd4:	3d 81       	ldd	r19, Y+5	; 0x05
    1bd6:	22 30       	cpi	r18, 0x02	; 2
    1bd8:	31 05       	cpc	r19, r1
    1bda:	2c f4       	brge	.+10     	; 0x1be6 <DIO_u8SetPortDirection+0x3c>
    1bdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bde:	9d 81       	ldd	r25, Y+5	; 0x05
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	61 f0       	breq	.+24     	; 0x1bfc <DIO_u8SetPortDirection+0x52>
    1be4:	1f c0       	rjmp	.+62     	; 0x1c24 <DIO_u8SetPortDirection+0x7a>
    1be6:	2c 81       	ldd	r18, Y+4	; 0x04
    1be8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bea:	22 30       	cpi	r18, 0x02	; 2
    1bec:	31 05       	cpc	r19, r1
    1bee:	81 f0       	breq	.+32     	; 0x1c10 <DIO_u8SetPortDirection+0x66>
    1bf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf4:	83 30       	cpi	r24, 0x03	; 3
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	81 f0       	breq	.+32     	; 0x1c1a <DIO_u8SetPortDirection+0x70>
    1bfa:	14 c0       	rjmp	.+40     	; 0x1c24 <DIO_u8SetPortDirection+0x7a>
	{ 
		case DIO_u8PORTA:	DDRA_REG = Copy_u8Direction; 	break;
    1bfc:	ea e3       	ldi	r30, 0x3A	; 58
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	8b 81       	ldd	r24, Y+3	; 0x03
    1c02:	80 83       	st	Z, r24
    1c04:	11 c0       	rjmp	.+34     	; 0x1c28 <DIO_u8SetPortDirection+0x7e>
		case DIO_u8PORTB:	DDRB_REG = Copy_u8Direction; 	break;
    1c06:	e7 e3       	ldi	r30, 0x37	; 55
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	80 83       	st	Z, r24
    1c0e:	0c c0       	rjmp	.+24     	; 0x1c28 <DIO_u8SetPortDirection+0x7e>
		case DIO_u8PORTC:	DDRC_REG = Copy_u8Direction; 	break;
    1c10:	e4 e3       	ldi	r30, 0x34	; 52
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	80 83       	st	Z, r24
    1c18:	07 c0       	rjmp	.+14     	; 0x1c28 <DIO_u8SetPortDirection+0x7e>
		case DIO_u8PORTD:	DDRD_REG = Copy_u8Direction; 	break;
    1c1a:	e1 e3       	ldi	r30, 0x31	; 49
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	80 83       	st	Z, r24
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <DIO_u8SetPortDirection+0x7e>
		default:			Local_u8ErrorState = 1; break;
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	0f 90       	pop	r0
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <DIO_u8GetPinValue>:

/*****************************************************************************************/
u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8* Copy_u8Value)

{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	27 97       	sbiw	r28, 0x07	; 7
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
    1c4e:	8a 83       	std	Y+2, r24	; 0x02
    1c50:	6b 83       	std	Y+3, r22	; 0x03
    1c52:	5d 83       	std	Y+5, r21	; 0x05
    1c54:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    1c56:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Pin <= 7) && (Copy_u8Value !=NULL))
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	88 30       	cpi	r24, 0x08	; 8
    1c5c:	08 f0       	brcs	.+2      	; 0x1c60 <DIO_u8GetPinValue+0x26>
    1c5e:	79 c0       	rjmp	.+242    	; 0x1d52 <DIO_u8GetPinValue+0x118>
    1c60:	8c 81       	ldd	r24, Y+4	; 0x04
    1c62:	9d 81       	ldd	r25, Y+5	; 0x05
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <DIO_u8GetPinValue+0x30>
    1c68:	74 c0       	rjmp	.+232    	; 0x1d52 <DIO_u8GetPinValue+0x118>
	{  
		switch(Copy_u8Port)
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	3f 83       	std	Y+7, r19	; 0x07
    1c72:	2e 83       	std	Y+6, r18	; 0x06
    1c74:	4e 81       	ldd	r20, Y+6	; 0x06
    1c76:	5f 81       	ldd	r21, Y+7	; 0x07
    1c78:	41 30       	cpi	r20, 0x01	; 1
    1c7a:	51 05       	cpc	r21, r1
    1c7c:	59 f1       	breq	.+86     	; 0x1cd4 <DIO_u8GetPinValue+0x9a>
    1c7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1c80:	9f 81       	ldd	r25, Y+7	; 0x07
    1c82:	82 30       	cpi	r24, 0x02	; 2
    1c84:	91 05       	cpc	r25, r1
    1c86:	34 f4       	brge	.+12     	; 0x1c94 <DIO_u8GetPinValue+0x5a>
    1c88:	2e 81       	ldd	r18, Y+6	; 0x06
    1c8a:	3f 81       	ldd	r19, Y+7	; 0x07
    1c8c:	21 15       	cp	r18, r1
    1c8e:	31 05       	cpc	r19, r1
    1c90:	69 f0       	breq	.+26     	; 0x1cac <DIO_u8GetPinValue+0x72>
    1c92:	5c c0       	rjmp	.+184    	; 0x1d4c <DIO_u8GetPinValue+0x112>
    1c94:	4e 81       	ldd	r20, Y+6	; 0x06
    1c96:	5f 81       	ldd	r21, Y+7	; 0x07
    1c98:	42 30       	cpi	r20, 0x02	; 2
    1c9a:	51 05       	cpc	r21, r1
    1c9c:	79 f1       	breq	.+94     	; 0x1cfc <DIO_u8GetPinValue+0xc2>
    1c9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ca2:	83 30       	cpi	r24, 0x03	; 3
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <DIO_u8GetPinValue+0x70>
    1ca8:	3d c0       	rjmp	.+122    	; 0x1d24 <DIO_u8GetPinValue+0xea>
    1caa:	50 c0       	rjmp	.+160    	; 0x1d4c <DIO_u8GetPinValue+0x112>
		{    
		  case DIO_u8PORTA:	*Copy_u8Value = GET_BIT(PINA_REG, Copy_u8Pin);	break;
    1cac:	e9 e3       	ldi	r30, 0x39	; 57
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	88 2f       	mov	r24, r24
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	a9 01       	movw	r20, r18
    1cbe:	02 c0       	rjmp	.+4      	; 0x1cc4 <DIO_u8GetPinValue+0x8a>
    1cc0:	55 95       	asr	r21
    1cc2:	47 95       	ror	r20
    1cc4:	8a 95       	dec	r24
    1cc6:	e2 f7       	brpl	.-8      	; 0x1cc0 <DIO_u8GetPinValue+0x86>
    1cc8:	ca 01       	movw	r24, r20
    1cca:	81 70       	andi	r24, 0x01	; 1
    1ccc:	ec 81       	ldd	r30, Y+4	; 0x04
    1cce:	fd 81       	ldd	r31, Y+5	; 0x05
    1cd0:	80 83       	st	Z, r24
    1cd2:	41 c0       	rjmp	.+130    	; 0x1d56 <DIO_u8GetPinValue+0x11c>
		  case DIO_u8PORTB:	*Copy_u8Value = GET_BIT(PINB_REG, Copy_u8Pin);	break;
    1cd4:	e6 e3       	ldi	r30, 0x36	; 54
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	88 2f       	mov	r24, r24
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	a9 01       	movw	r20, r18
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <DIO_u8GetPinValue+0xb2>
    1ce8:	55 95       	asr	r21
    1cea:	47 95       	ror	r20
    1cec:	8a 95       	dec	r24
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <DIO_u8GetPinValue+0xae>
    1cf0:	ca 01       	movw	r24, r20
    1cf2:	81 70       	andi	r24, 0x01	; 1
    1cf4:	ec 81       	ldd	r30, Y+4	; 0x04
    1cf6:	fd 81       	ldd	r31, Y+5	; 0x05
    1cf8:	80 83       	st	Z, r24
    1cfa:	2d c0       	rjmp	.+90     	; 0x1d56 <DIO_u8GetPinValue+0x11c>
		  case DIO_u8PORTC:	*Copy_u8Value = GET_BIT(PINC_REG, Copy_u8Pin);	break;
    1cfc:	e3 e3       	ldi	r30, 0x33	; 51
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	28 2f       	mov	r18, r24
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	88 2f       	mov	r24, r24
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	a9 01       	movw	r20, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <DIO_u8GetPinValue+0xda>
    1d10:	55 95       	asr	r21
    1d12:	47 95       	ror	r20
    1d14:	8a 95       	dec	r24
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <DIO_u8GetPinValue+0xd6>
    1d18:	ca 01       	movw	r24, r20
    1d1a:	81 70       	andi	r24, 0x01	; 1
    1d1c:	ec 81       	ldd	r30, Y+4	; 0x04
    1d1e:	fd 81       	ldd	r31, Y+5	; 0x05
    1d20:	80 83       	st	Z, r24
    1d22:	19 c0       	rjmp	.+50     	; 0x1d56 <DIO_u8GetPinValue+0x11c>
		  case DIO_u8PORTD:	*Copy_u8Value = GET_BIT(PIND_REG, Copy_u8Pin);	break;
    1d24:	e0 e3       	ldi	r30, 0x30	; 48
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	88 2f       	mov	r24, r24
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	a9 01       	movw	r20, r18
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <DIO_u8GetPinValue+0x102>
    1d38:	55 95       	asr	r21
    1d3a:	47 95       	ror	r20
    1d3c:	8a 95       	dec	r24
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <DIO_u8GetPinValue+0xfe>
    1d40:	ca 01       	movw	r24, r20
    1d42:	81 70       	andi	r24, 0x01	; 1
    1d44:	ec 81       	ldd	r30, Y+4	; 0x04
    1d46:	fd 81       	ldd	r31, Y+5	; 0x05
    1d48:	80 83       	st	Z, r24
    1d4a:	05 c0       	rjmp	.+10     	; 0x1d56 <DIO_u8GetPinValue+0x11c>
		  default:			Local_u8ErrorState = 1; break;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	89 83       	std	Y+1, r24	; 0x01
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d58:	27 96       	adiw	r28, 0x07	; 7
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	de bf       	out	0x3e, r29	; 62
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	cd bf       	out	0x3d, r28	; 61
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	08 95       	ret

00001d6a <DIO_u8SetPinValue>:


/*****************************************************************************************/

u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    1d72:	28 97       	sbiw	r28, 0x08	; 8
    1d74:	0f b6       	in	r0, 0x3f	; 63
    1d76:	f8 94       	cli
    1d78:	de bf       	out	0x3e, r29	; 62
    1d7a:	0f be       	out	0x3f, r0	; 63
    1d7c:	cd bf       	out	0x3d, r28	; 61
    1d7e:	8a 83       	std	Y+2, r24	; 0x02
    1d80:	6b 83       	std	Y+3, r22	; 0x03
    1d82:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = 0;
    1d84:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= 7)
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	88 30       	cpi	r24, 0x08	; 8
    1d8a:	08 f0       	brcs	.+2      	; 0x1d8e <DIO_u8SetPinValue+0x24>
    1d8c:	f4 c0       	rjmp	.+488    	; 0x1f76 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value == DIO_u8PIN_HIGH)
    1d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d90:	81 30       	cpi	r24, 0x01	; 1
    1d92:	09 f0       	breq	.+2      	; 0x1d96 <DIO_u8SetPinValue+0x2c>
    1d94:	72 c0       	rjmp	.+228    	; 0x1e7a <DIO_u8SetPinValue+0x110>
		{
			switch(Copy_u8Port)
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	28 2f       	mov	r18, r24
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	38 87       	std	Y+8, r19	; 0x08
    1d9e:	2f 83       	std	Y+7, r18	; 0x07
    1da0:	8f 81       	ldd	r24, Y+7	; 0x07
    1da2:	98 85       	ldd	r25, Y+8	; 0x08
    1da4:	81 30       	cpi	r24, 0x01	; 1
    1da6:	91 05       	cpc	r25, r1
    1da8:	49 f1       	breq	.+82     	; 0x1dfc <DIO_u8SetPinValue+0x92>
    1daa:	2f 81       	ldd	r18, Y+7	; 0x07
    1dac:	38 85       	ldd	r19, Y+8	; 0x08
    1dae:	22 30       	cpi	r18, 0x02	; 2
    1db0:	31 05       	cpc	r19, r1
    1db2:	2c f4       	brge	.+10     	; 0x1dbe <DIO_u8SetPinValue+0x54>
    1db4:	8f 81       	ldd	r24, Y+7	; 0x07
    1db6:	98 85       	ldd	r25, Y+8	; 0x08
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	61 f0       	breq	.+24     	; 0x1dd4 <DIO_u8SetPinValue+0x6a>
    1dbc:	5b c0       	rjmp	.+182    	; 0x1e74 <DIO_u8SetPinValue+0x10a>
    1dbe:	2f 81       	ldd	r18, Y+7	; 0x07
    1dc0:	38 85       	ldd	r19, Y+8	; 0x08
    1dc2:	22 30       	cpi	r18, 0x02	; 2
    1dc4:	31 05       	cpc	r19, r1
    1dc6:	71 f1       	breq	.+92     	; 0x1e24 <DIO_u8SetPinValue+0xba>
    1dc8:	8f 81       	ldd	r24, Y+7	; 0x07
    1dca:	98 85       	ldd	r25, Y+8	; 0x08
    1dcc:	83 30       	cpi	r24, 0x03	; 3
    1dce:	91 05       	cpc	r25, r1
    1dd0:	e9 f1       	breq	.+122    	; 0x1e4c <DIO_u8SetPinValue+0xe2>
    1dd2:	50 c0       	rjmp	.+160    	; 0x1e74 <DIO_u8SetPinValue+0x10a>
			{
				case DIO_u8PORTA:  SET_BIT(PORTA_REG,Copy_u8Pin);	break;
    1dd4:	ab e3       	ldi	r26, 0x3B	; 59
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	eb e3       	ldi	r30, 0x3B	; 59
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	48 2f       	mov	r20, r24
    1de0:	8b 81       	ldd	r24, Y+3	; 0x03
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	02 2e       	mov	r0, r18
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <DIO_u8SetPinValue+0x88>
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	0a 94       	dec	r0
    1df4:	e2 f7       	brpl	.-8      	; 0x1dee <DIO_u8SetPinValue+0x84>
    1df6:	84 2b       	or	r24, r20
    1df8:	8c 93       	st	X, r24
    1dfa:	bf c0       	rjmp	.+382    	; 0x1f7a <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB:  SET_BIT(PORTB_REG,Copy_u8Pin);	break;
    1dfc:	a8 e3       	ldi	r26, 0x38	; 56
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	e8 e3       	ldi	r30, 0x38	; 56
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	80 81       	ld	r24, Z
    1e06:	48 2f       	mov	r20, r24
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	28 2f       	mov	r18, r24
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	02 2e       	mov	r0, r18
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <DIO_u8SetPinValue+0xb0>
    1e16:	88 0f       	add	r24, r24
    1e18:	99 1f       	adc	r25, r25
    1e1a:	0a 94       	dec	r0
    1e1c:	e2 f7       	brpl	.-8      	; 0x1e16 <DIO_u8SetPinValue+0xac>
    1e1e:	84 2b       	or	r24, r20
    1e20:	8c 93       	st	X, r24
    1e22:	ab c0       	rjmp	.+342    	; 0x1f7a <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC:  SET_BIT(PORTC_REG,Copy_u8Pin);	break;
    1e24:	a5 e3       	ldi	r26, 0x35	; 53
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e5 e3       	ldi	r30, 0x35	; 53
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	48 2f       	mov	r20, r24
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	28 2f       	mov	r18, r24
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	02 2e       	mov	r0, r18
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <DIO_u8SetPinValue+0xd8>
    1e3e:	88 0f       	add	r24, r24
    1e40:	99 1f       	adc	r25, r25
    1e42:	0a 94       	dec	r0
    1e44:	e2 f7       	brpl	.-8      	; 0x1e3e <DIO_u8SetPinValue+0xd4>
    1e46:	84 2b       	or	r24, r20
    1e48:	8c 93       	st	X, r24
    1e4a:	97 c0       	rjmp	.+302    	; 0x1f7a <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD:  SET_BIT(PORTD_REG,Copy_u8Pin);	break;
    1e4c:	a2 e3       	ldi	r26, 0x32	; 50
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e2 e3       	ldi	r30, 0x32	; 50
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	48 2f       	mov	r20, r24
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	02 2e       	mov	r0, r18
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <DIO_u8SetPinValue+0x100>
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	0a 94       	dec	r0
    1e6c:	e2 f7       	brpl	.-8      	; 0x1e66 <DIO_u8SetPinValue+0xfc>
    1e6e:	84 2b       	or	r24, r20
    1e70:	8c 93       	st	X, r24
    1e72:	83 c0       	rjmp	.+262    	; 0x1f7a <DIO_u8SetPinValue+0x210>
				default:		   Local_u8ErrorState = 1; break;	
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	89 83       	std	Y+1, r24	; 0x01
    1e78:	80 c0       	rjmp	.+256    	; 0x1f7a <DIO_u8SetPinValue+0x210>
			}
		}
		else if (Copy_u8Value == DIO_u8PIN_LOW)
    1e7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7c:	88 23       	and	r24, r24
    1e7e:	09 f0       	breq	.+2      	; 0x1e82 <DIO_u8SetPinValue+0x118>
    1e80:	77 c0       	rjmp	.+238    	; 0x1f70 <DIO_u8SetPinValue+0x206>
		{
			switch(Copy_u8Port)
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	28 2f       	mov	r18, r24
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	3e 83       	std	Y+6, r19	; 0x06
    1e8a:	2d 83       	std	Y+5, r18	; 0x05
    1e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e90:	81 30       	cpi	r24, 0x01	; 1
    1e92:	91 05       	cpc	r25, r1
    1e94:	59 f1       	breq	.+86     	; 0x1eec <DIO_u8SetPinValue+0x182>
    1e96:	2d 81       	ldd	r18, Y+5	; 0x05
    1e98:	3e 81       	ldd	r19, Y+6	; 0x06
    1e9a:	22 30       	cpi	r18, 0x02	; 2
    1e9c:	31 05       	cpc	r19, r1
    1e9e:	2c f4       	brge	.+10     	; 0x1eaa <DIO_u8SetPinValue+0x140>
    1ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea4:	00 97       	sbiw	r24, 0x00	; 0
    1ea6:	69 f0       	breq	.+26     	; 0x1ec2 <DIO_u8SetPinValue+0x158>
    1ea8:	60 c0       	rjmp	.+192    	; 0x1f6a <DIO_u8SetPinValue+0x200>
    1eaa:	2d 81       	ldd	r18, Y+5	; 0x05
    1eac:	3e 81       	ldd	r19, Y+6	; 0x06
    1eae:	22 30       	cpi	r18, 0x02	; 2
    1eb0:	31 05       	cpc	r19, r1
    1eb2:	89 f1       	breq	.+98     	; 0x1f16 <DIO_u8SetPinValue+0x1ac>
    1eb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1eb8:	83 30       	cpi	r24, 0x03	; 3
    1eba:	91 05       	cpc	r25, r1
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <DIO_u8SetPinValue+0x156>
    1ebe:	40 c0       	rjmp	.+128    	; 0x1f40 <DIO_u8SetPinValue+0x1d6>
    1ec0:	54 c0       	rjmp	.+168    	; 0x1f6a <DIO_u8SetPinValue+0x200>
			{
				case DIO_u8PORTA:	CLR_BIT(PORTA_REG,Copy_u8Pin);  break;
    1ec2:	ab e3       	ldi	r26, 0x3B	; 59
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	eb e3       	ldi	r30, 0x3B	; 59
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	80 81       	ld	r24, Z
    1ecc:	48 2f       	mov	r20, r24
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	28 2f       	mov	r18, r24
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	02 2e       	mov	r0, r18
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <DIO_u8SetPinValue+0x176>
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	0a 94       	dec	r0
    1ee2:	e2 f7       	brpl	.-8      	; 0x1edc <DIO_u8SetPinValue+0x172>
    1ee4:	80 95       	com	r24
    1ee6:	84 23       	and	r24, r20
    1ee8:	8c 93       	st	X, r24
    1eea:	47 c0       	rjmp	.+142    	; 0x1f7a <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTB:	CLR_BIT(PORTB_REG,Copy_u8Pin);  break;
    1eec:	a8 e3       	ldi	r26, 0x38	; 56
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e8 e3       	ldi	r30, 0x38	; 56
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	48 2f       	mov	r20, r24
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	02 2e       	mov	r0, r18
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <DIO_u8SetPinValue+0x1a0>
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	0a 94       	dec	r0
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <DIO_u8SetPinValue+0x19c>
    1f0e:	80 95       	com	r24
    1f10:	84 23       	and	r24, r20
    1f12:	8c 93       	st	X, r24
    1f14:	32 c0       	rjmp	.+100    	; 0x1f7a <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTC:	CLR_BIT(PORTC_REG,Copy_u8Pin);  break;
    1f16:	a5 e3       	ldi	r26, 0x35	; 53
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e5 e3       	ldi	r30, 0x35	; 53
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	48 2f       	mov	r20, r24
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	02 2e       	mov	r0, r18
    1f2e:	02 c0       	rjmp	.+4      	; 0x1f34 <DIO_u8SetPinValue+0x1ca>
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	0a 94       	dec	r0
    1f36:	e2 f7       	brpl	.-8      	; 0x1f30 <DIO_u8SetPinValue+0x1c6>
    1f38:	80 95       	com	r24
    1f3a:	84 23       	and	r24, r20
    1f3c:	8c 93       	st	X, r24
    1f3e:	1d c0       	rjmp	.+58     	; 0x1f7a <DIO_u8SetPinValue+0x210>
				case DIO_u8PORTD:	CLR_BIT(PORTD_REG,Copy_u8Pin);  break;
    1f40:	a2 e3       	ldi	r26, 0x32	; 50
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e2 e3       	ldi	r30, 0x32	; 50
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	48 2f       	mov	r20, r24
    1f4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4e:	28 2f       	mov	r18, r24
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	02 2e       	mov	r0, r18
    1f58:	02 c0       	rjmp	.+4      	; 0x1f5e <DIO_u8SetPinValue+0x1f4>
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	0a 94       	dec	r0
    1f60:	e2 f7       	brpl	.-8      	; 0x1f5a <DIO_u8SetPinValue+0x1f0>
    1f62:	80 95       	com	r24
    1f64:	84 23       	and	r24, r20
    1f66:	8c 93       	st	X, r24
    1f68:	08 c0       	rjmp	.+16     	; 0x1f7a <DIO_u8SetPinValue+0x210>
				default : 			Local_u8ErrorState = 1; break;	
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	89 83       	std	Y+1, r24	; 0x01
    1f6e:	05 c0       	rjmp	.+10     	; 0x1f7a <DIO_u8SetPinValue+0x210>
			}
		}
		else
		{
			Local_u8ErrorState = 1;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	89 83       	std	Y+1, r24	; 0x01
    1f74:	02 c0       	rjmp	.+4      	; 0x1f7a <DIO_u8SetPinValue+0x210>
		}
		
	}
	else
	{
		Local_u8ErrorState = 1;
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1f7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f7c:	28 96       	adiw	r28, 0x08	; 8
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <DIO_u8SetPortValue>:

/*****************************************************************************************/

u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <DIO_u8SetPortValue+0x6>
    1f94:	00 d0       	rcall	.+0      	; 0x1f96 <DIO_u8SetPortValue+0x8>
    1f96:	0f 92       	push	r0
    1f98:	cd b7       	in	r28, 0x3d	; 61
    1f9a:	de b7       	in	r29, 0x3e	; 62
    1f9c:	8a 83       	std	Y+2, r24	; 0x02
    1f9e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    1fa0:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8Port)
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	3d 83       	std	Y+5, r19	; 0x05
    1faa:	2c 83       	std	Y+4, r18	; 0x04
    1fac:	8c 81       	ldd	r24, Y+4	; 0x04
    1fae:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb0:	81 30       	cpi	r24, 0x01	; 1
    1fb2:	91 05       	cpc	r25, r1
    1fb4:	d1 f0       	breq	.+52     	; 0x1fea <DIO_u8SetPortValue+0x5c>
    1fb6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fb8:	3d 81       	ldd	r19, Y+5	; 0x05
    1fba:	22 30       	cpi	r18, 0x02	; 2
    1fbc:	31 05       	cpc	r19, r1
    1fbe:	2c f4       	brge	.+10     	; 0x1fca <DIO_u8SetPortValue+0x3c>
    1fc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	61 f0       	breq	.+24     	; 0x1fe0 <DIO_u8SetPortValue+0x52>
    1fc8:	1f c0       	rjmp	.+62     	; 0x2008 <DIO_u8SetPortValue+0x7a>
    1fca:	2c 81       	ldd	r18, Y+4	; 0x04
    1fcc:	3d 81       	ldd	r19, Y+5	; 0x05
    1fce:	22 30       	cpi	r18, 0x02	; 2
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	81 f0       	breq	.+32     	; 0x1ff4 <DIO_u8SetPortValue+0x66>
    1fd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd8:	83 30       	cpi	r24, 0x03	; 3
    1fda:	91 05       	cpc	r25, r1
    1fdc:	81 f0       	breq	.+32     	; 0x1ffe <DIO_u8SetPortValue+0x70>
    1fde:	14 c0       	rjmp	.+40     	; 0x2008 <DIO_u8SetPortValue+0x7a>
	{
		case DIO_u8PORTA:  PORTA_REG = Copy_u8Value;	break;
    1fe0:	eb e3       	ldi	r30, 0x3B	; 59
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	80 83       	st	Z, r24
    1fe8:	11 c0       	rjmp	.+34     	; 0x200c <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTB:  PORTB_REG = Copy_u8Value;	break;
    1fea:	e8 e3       	ldi	r30, 0x38	; 56
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	80 83       	st	Z, r24
    1ff2:	0c c0       	rjmp	.+24     	; 0x200c <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTC:  PORTC_REG = Copy_u8Value;	break;
    1ff4:	e5 e3       	ldi	r30, 0x35	; 53
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	80 83       	st	Z, r24
    1ffc:	07 c0       	rjmp	.+14     	; 0x200c <DIO_u8SetPortValue+0x7e>
		case DIO_u8PORTD:  PORTD_REG = Copy_u8Value;	break;
    1ffe:	e2 e3       	ldi	r30, 0x32	; 50
    2000:	f0 e0       	ldi	r31, 0x00	; 0
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	80 83       	st	Z, r24
    2006:	02 c0       	rjmp	.+4      	; 0x200c <DIO_u8SetPortValue+0x7e>
		default:		   Local_u8ErrorState = 1; break;	
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    200c:	89 81       	ldd	r24, Y+1	; 0x01
}
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	cf 91       	pop	r28
    201a:	df 91       	pop	r29
    201c:	08 95       	ret

0000201e <DIO_u8TogglePin>:

/*****************************************************************************************/


u8 DIO_u8TogglePin(u8 Copy_u8Port, u8 Copy_u8Pin )
{
    201e:	df 93       	push	r29
    2020:	cf 93       	push	r28
    2022:	00 d0       	rcall	.+0      	; 0x2024 <DIO_u8TogglePin+0x6>
    2024:	00 d0       	rcall	.+0      	; 0x2026 <DIO_u8TogglePin+0x8>
    2026:	0f 92       	push	r0
    2028:	cd b7       	in	r28, 0x3d	; 61
    202a:	de b7       	in	r29, 0x3e	; 62
    202c:	8a 83       	std	Y+2, r24	; 0x02
    202e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = 0;
    2030:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <= 7)
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	88 30       	cpi	r24, 0x08	; 8
    2036:	08 f0       	brcs	.+2      	; 0x203a <DIO_u8TogglePin+0x1c>
    2038:	72 c0       	rjmp	.+228    	; 0x211e <DIO_u8TogglePin+0x100>
	{
		switch (Copy_u8Port)
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	3d 83       	std	Y+5, r19	; 0x05
    2042:	2c 83       	std	Y+4, r18	; 0x04
    2044:	8c 81       	ldd	r24, Y+4	; 0x04
    2046:	9d 81       	ldd	r25, Y+5	; 0x05
    2048:	81 30       	cpi	r24, 0x01	; 1
    204a:	91 05       	cpc	r25, r1
    204c:	49 f1       	breq	.+82     	; 0x20a0 <DIO_u8TogglePin+0x82>
    204e:	2c 81       	ldd	r18, Y+4	; 0x04
    2050:	3d 81       	ldd	r19, Y+5	; 0x05
    2052:	22 30       	cpi	r18, 0x02	; 2
    2054:	31 05       	cpc	r19, r1
    2056:	2c f4       	brge	.+10     	; 0x2062 <DIO_u8TogglePin+0x44>
    2058:	8c 81       	ldd	r24, Y+4	; 0x04
    205a:	9d 81       	ldd	r25, Y+5	; 0x05
    205c:	00 97       	sbiw	r24, 0x00	; 0
    205e:	61 f0       	breq	.+24     	; 0x2078 <DIO_u8TogglePin+0x5a>
    2060:	5b c0       	rjmp	.+182    	; 0x2118 <DIO_u8TogglePin+0xfa>
    2062:	2c 81       	ldd	r18, Y+4	; 0x04
    2064:	3d 81       	ldd	r19, Y+5	; 0x05
    2066:	22 30       	cpi	r18, 0x02	; 2
    2068:	31 05       	cpc	r19, r1
    206a:	71 f1       	breq	.+92     	; 0x20c8 <DIO_u8TogglePin+0xaa>
    206c:	8c 81       	ldd	r24, Y+4	; 0x04
    206e:	9d 81       	ldd	r25, Y+5	; 0x05
    2070:	83 30       	cpi	r24, 0x03	; 3
    2072:	91 05       	cpc	r25, r1
    2074:	e9 f1       	breq	.+122    	; 0x20f0 <DIO_u8TogglePin+0xd2>
    2076:	50 c0       	rjmp	.+160    	; 0x2118 <DIO_u8TogglePin+0xfa>
		{
			case DIO_u8PORTA: TOGGLE_BIT(PORTA_REG,Copy_u8Pin);  break;
    2078:	ab e3       	ldi	r26, 0x3B	; 59
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	eb e3       	ldi	r30, 0x3B	; 59
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	80 81       	ld	r24, Z
    2082:	48 2f       	mov	r20, r24
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	28 2f       	mov	r18, r24
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	02 2e       	mov	r0, r18
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <DIO_u8TogglePin+0x78>
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	0a 94       	dec	r0
    2098:	e2 f7       	brpl	.-8      	; 0x2092 <DIO_u8TogglePin+0x74>
    209a:	84 27       	eor	r24, r20
    209c:	8c 93       	st	X, r24
    209e:	41 c0       	rjmp	.+130    	; 0x2122 <DIO_u8TogglePin+0x104>
			case DIO_u8PORTB: TOGGLE_BIT(PORTB_REG,Copy_u8Pin);  break;
    20a0:	a8 e3       	ldi	r26, 0x38	; 56
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e8 e3       	ldi	r30, 0x38	; 56
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	80 81       	ld	r24, Z
    20aa:	48 2f       	mov	r20, r24
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	28 2f       	mov	r18, r24
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	02 2e       	mov	r0, r18
    20b8:	02 c0       	rjmp	.+4      	; 0x20be <DIO_u8TogglePin+0xa0>
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	0a 94       	dec	r0
    20c0:	e2 f7       	brpl	.-8      	; 0x20ba <DIO_u8TogglePin+0x9c>
    20c2:	84 27       	eor	r24, r20
    20c4:	8c 93       	st	X, r24
    20c6:	2d c0       	rjmp	.+90     	; 0x2122 <DIO_u8TogglePin+0x104>
			case DIO_u8PORTC: TOGGLE_BIT(PORTC_REG,Copy_u8Pin);  break;
    20c8:	a5 e3       	ldi	r26, 0x35	; 53
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e5 e3       	ldi	r30, 0x35	; 53
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	48 2f       	mov	r20, r24
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	28 2f       	mov	r18, r24
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	02 2e       	mov	r0, r18
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <DIO_u8TogglePin+0xc8>
    20e2:	88 0f       	add	r24, r24
    20e4:	99 1f       	adc	r25, r25
    20e6:	0a 94       	dec	r0
    20e8:	e2 f7       	brpl	.-8      	; 0x20e2 <DIO_u8TogglePin+0xc4>
    20ea:	84 27       	eor	r24, r20
    20ec:	8c 93       	st	X, r24
    20ee:	19 c0       	rjmp	.+50     	; 0x2122 <DIO_u8TogglePin+0x104>
			case DIO_u8PORTD: TOGGLE_BIT(PORTD_REG,Copy_u8Pin);  break;
    20f0:	a2 e3       	ldi	r26, 0x32	; 50
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e2 e3       	ldi	r30, 0x32	; 50
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	48 2f       	mov	r20, r24
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	28 2f       	mov	r18, r24
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	02 2e       	mov	r0, r18
    2108:	02 c0       	rjmp	.+4      	; 0x210e <DIO_u8TogglePin+0xf0>
    210a:	88 0f       	add	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	0a 94       	dec	r0
    2110:	e2 f7       	brpl	.-8      	; 0x210a <DIO_u8TogglePin+0xec>
    2112:	84 27       	eor	r24, r20
    2114:	8c 93       	st	X, r24
    2116:	05 c0       	rjmp	.+10     	; 0x2122 <DIO_u8TogglePin+0x104>
			default: 	      Local_u8ErrorState = 1;
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	89 83       	std	Y+1, r24	; 0x01
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <DIO_u8TogglePin+0x104>
		}
	}
	else
	{
		Local_u8ErrorState = 1;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2122:	89 81       	ldd	r24, Y+1	; 0x01
}
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <EXTI_voidInit>:
#include "EXTI_private.h"
#include "EXTI_interface.h"


void EXTI_voidInit(void)
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,ISC01);
#elif  EXTI0_SENSING_MODE == ANY_LOGIC
	SET_BIT(MCUCR,ISC00);
	CLR_BIT(MCUCR,ISC01);
#elif  EXTI0_SENSING_MODE == FALLING_EDGE
	CLR_BIT(MCUCR,ISC00);
    213c:	a5 e5       	ldi	r26, 0x55	; 85
    213e:	b0 e0       	ldi	r27, 0x00	; 0
    2140:	e5 e5       	ldi	r30, 0x55	; 85
    2142:	f0 e0       	ldi	r31, 0x00	; 0
    2144:	80 81       	ld	r24, Z
    2146:	8e 7f       	andi	r24, 0xFE	; 254
    2148:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC01);
    214a:	a5 e5       	ldi	r26, 0x55	; 85
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	e5 e5       	ldi	r30, 0x55	; 85
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	82 60       	ori	r24, 0x02	; 2
    2156:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,ISC11);
#elif  EXTI1_SENSING_MODE == ANY_LOGIC
	SET_BIT(MCUCR,ISC10);
	CLR_BIT(MCUCR,ISC11);
#elif  EXTI1_SENSING_MODE == FALLING_EDGE
	CLR_BIT(MCUCR,ISC10);
    2158:	a5 e5       	ldi	r26, 0x55	; 85
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e5 e5       	ldi	r30, 0x55	; 85
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	8b 7f       	andi	r24, 0xFB	; 251
    2164:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC11);
    2166:	a5 e5       	ldi	r26, 0x55	; 85
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e5 e5       	ldi	r30, 0x55	; 85
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	88 60       	ori	r24, 0x08	; 8
    2172:	8c 93       	st	X, r24
	SET_BIT(MCUCR,ISC11);
#endif

	//EXTI 0 SENSING  MODE
#if EXTI2_SENSING_MODE == FALLING_EDGE
	CLR_BIT(MCUCSR,ISC2);
    2174:	a4 e5       	ldi	r26, 0x54	; 84
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	e4 e5       	ldi	r30, 0x54	; 84
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	8f 7b       	andi	r24, 0xBF	; 191
    2180:	8c 93       	st	X, r24
#elif  EXTI2_SENSING_MODE == RISING_EDGE
	SET_BIT(MCUCSR,ISC2);
#endif

}
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <EXTI0_voidEnable>:


void EXTI0_voidEnable(void)
{
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,EXTI0_EN);
    2190:	ab e5       	ldi	r26, 0x5B	; 91
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	eb e5       	ldi	r30, 0x5B	; 91
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	80 64       	ori	r24, 0x40	; 64
    219c:	8c 93       	st	X, r24
}
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <EXTI0_voidDisable>:

void EXTI0_voidDisable(void)
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	cd b7       	in	r28, 0x3d	; 61
    21aa:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,EXTI0_EN);
    21ac:	ab e5       	ldi	r26, 0x5B	; 91
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	eb e5       	ldi	r30, 0x5B	; 91
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	8f 7b       	andi	r24, 0xBF	; 191
    21b8:	8c 93       	st	X, r24
}
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <EXTI1_voidEnable>:

void EXTI1_voidEnable(void)
{
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,EXTI1_EN);
    21c8:	ab e5       	ldi	r26, 0x5B	; 91
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	eb e5       	ldi	r30, 0x5B	; 91
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	80 68       	ori	r24, 0x80	; 128
    21d4:	8c 93       	st	X, r24
}
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <EXTI1_voidDisable>:

void EXTI1_voidDisable(void)
{
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,EXTI1_EN);
    21e4:	ab e5       	ldi	r26, 0x5B	; 91
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	eb e5       	ldi	r30, 0x5B	; 91
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	8f 77       	andi	r24, 0x7F	; 127
    21f0:	8c 93       	st	X, r24
}
    21f2:	cf 91       	pop	r28
    21f4:	df 91       	pop	r29
    21f6:	08 95       	ret

000021f8 <EXTI2_voidEnable>:

void EXTI2_voidEnable(void)
{
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR,EXTI2_EN);
    2200:	ab e5       	ldi	r26, 0x5B	; 91
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	eb e5       	ldi	r30, 0x5B	; 91
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	80 62       	ori	r24, 0x20	; 32
    220c:	8c 93       	st	X, r24
}
    220e:	cf 91       	pop	r28
    2210:	df 91       	pop	r29
    2212:	08 95       	ret

00002214 <EXTI2_voidDisable>:

void EXTI2_voidDisable(void)
{
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GICR,EXTI2_EN);
    221c:	ab e5       	ldi	r26, 0x5B	; 91
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	eb e5       	ldi	r30, 0x5B	; 91
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	8f 7d       	andi	r24, 0xDF	; 223
    2228:	8c 93       	st	X, r24
}
    222a:	cf 91       	pop	r28
    222c:	df 91       	pop	r29
    222e:	08 95       	ret

00002230 <EXTI0_CallBack>:


void (*EXTI0_Ptr)(void);

void EXTI0_CallBack(void(*Ptr)(void))
{
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	00 d0       	rcall	.+0      	; 0x2236 <EXTI0_CallBack+0x6>
    2236:	cd b7       	in	r28, 0x3d	; 61
    2238:	de b7       	in	r29, 0x3e	; 62
    223a:	9a 83       	std	Y+2, r25	; 0x02
    223c:	89 83       	std	Y+1, r24	; 0x01
	EXTI0_Ptr = Ptr;
    223e:	89 81       	ldd	r24, Y+1	; 0x01
    2240:	9a 81       	ldd	r25, Y+2	; 0x02
    2242:	90 93 b7 01 	sts	0x01B7, r25
    2246:	80 93 b6 01 	sts	0x01B6, r24
}
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	08 95       	ret

00002254 <__vector_1>:

void __vector_1(void) __attribute__((signal,used,externally_visible));  //to avoid optimization
void __vector_1(void)
{
    2254:	1f 92       	push	r1
    2256:	0f 92       	push	r0
    2258:	0f b6       	in	r0, 0x3f	; 63
    225a:	0f 92       	push	r0
    225c:	11 24       	eor	r1, r1
    225e:	2f 93       	push	r18
    2260:	3f 93       	push	r19
    2262:	4f 93       	push	r20
    2264:	5f 93       	push	r21
    2266:	6f 93       	push	r22
    2268:	7f 93       	push	r23
    226a:	8f 93       	push	r24
    226c:	9f 93       	push	r25
    226e:	af 93       	push	r26
    2270:	bf 93       	push	r27
    2272:	ef 93       	push	r30
    2274:	ff 93       	push	r31
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_Ptr!= NULL)
    227e:	80 91 b6 01 	lds	r24, 0x01B6
    2282:	90 91 b7 01 	lds	r25, 0x01B7
    2286:	00 97       	sbiw	r24, 0x00	; 0
    2288:	29 f0       	breq	.+10     	; 0x2294 <__vector_1+0x40>
		EXTI0_Ptr();
    228a:	e0 91 b6 01 	lds	r30, 0x01B6
    228e:	f0 91 b7 01 	lds	r31, 0x01B7
    2292:	09 95       	icall
}
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	ff 91       	pop	r31
    229a:	ef 91       	pop	r30
    229c:	bf 91       	pop	r27
    229e:	af 91       	pop	r26
    22a0:	9f 91       	pop	r25
    22a2:	8f 91       	pop	r24
    22a4:	7f 91       	pop	r23
    22a6:	6f 91       	pop	r22
    22a8:	5f 91       	pop	r21
    22aa:	4f 91       	pop	r20
    22ac:	3f 91       	pop	r19
    22ae:	2f 91       	pop	r18
    22b0:	0f 90       	pop	r0
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	0f 90       	pop	r0
    22b6:	1f 90       	pop	r1
    22b8:	18 95       	reti

000022ba <EXTI1_CallBack>:


void (*EXTI1_Ptr)(void);

void EXTI1_CallBack(void(*Ptr)(void))
{
    22ba:	df 93       	push	r29
    22bc:	cf 93       	push	r28
    22be:	00 d0       	rcall	.+0      	; 0x22c0 <EXTI1_CallBack+0x6>
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	9a 83       	std	Y+2, r25	; 0x02
    22c6:	89 83       	std	Y+1, r24	; 0x01
	EXTI1_Ptr = Ptr;
    22c8:	89 81       	ldd	r24, Y+1	; 0x01
    22ca:	9a 81       	ldd	r25, Y+2	; 0x02
    22cc:	90 93 b5 01 	sts	0x01B5, r25
    22d0:	80 93 b4 01 	sts	0x01B4, r24
}
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <__vector_2>:

void __vector_2(void) __attribute__((signal,used,externally_visible));  //to avoid optimization
void __vector_2(void)
{
    22de:	1f 92       	push	r1
    22e0:	0f 92       	push	r0
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	0f 92       	push	r0
    22e6:	11 24       	eor	r1, r1
    22e8:	2f 93       	push	r18
    22ea:	3f 93       	push	r19
    22ec:	4f 93       	push	r20
    22ee:	5f 93       	push	r21
    22f0:	6f 93       	push	r22
    22f2:	7f 93       	push	r23
    22f4:	8f 93       	push	r24
    22f6:	9f 93       	push	r25
    22f8:	af 93       	push	r26
    22fa:	bf 93       	push	r27
    22fc:	ef 93       	push	r30
    22fe:	ff 93       	push	r31
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
	if(EXTI1_Ptr!= NULL)
    2308:	80 91 b4 01 	lds	r24, 0x01B4
    230c:	90 91 b5 01 	lds	r25, 0x01B5
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	29 f0       	breq	.+10     	; 0x231e <__vector_2+0x40>
		EXTI1_Ptr();
    2314:	e0 91 b4 01 	lds	r30, 0x01B4
    2318:	f0 91 b5 01 	lds	r31, 0x01B5
    231c:	09 95       	icall
}
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	ff 91       	pop	r31
    2324:	ef 91       	pop	r30
    2326:	bf 91       	pop	r27
    2328:	af 91       	pop	r26
    232a:	9f 91       	pop	r25
    232c:	8f 91       	pop	r24
    232e:	7f 91       	pop	r23
    2330:	6f 91       	pop	r22
    2332:	5f 91       	pop	r21
    2334:	4f 91       	pop	r20
    2336:	3f 91       	pop	r19
    2338:	2f 91       	pop	r18
    233a:	0f 90       	pop	r0
    233c:	0f be       	out	0x3f, r0	; 63
    233e:	0f 90       	pop	r0
    2340:	1f 90       	pop	r1
    2342:	18 95       	reti

00002344 <EXTI2_CallBack>:


void (*EXTI2_Ptr)(void) = NULL;

void EXTI2_CallBack(void(*Ptr)(void))
{
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	00 d0       	rcall	.+0      	; 0x234a <EXTI2_CallBack+0x6>
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    234e:	9a 83       	std	Y+2, r25	; 0x02
    2350:	89 83       	std	Y+1, r24	; 0x01
	EXTI2_Ptr = Ptr;
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	9a 81       	ldd	r25, Y+2	; 0x02
    2356:	90 93 b3 01 	sts	0x01B3, r25
    235a:	80 93 b2 01 	sts	0x01B2, r24
}
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	cf 91       	pop	r28
    2364:	df 91       	pop	r29
    2366:	08 95       	ret

00002368 <__vector_3>:

void __vector_3(void) __attribute__((signal,used,externally_visible));  //to avoid optimization
void __vector_3(void)
{
    2368:	1f 92       	push	r1
    236a:	0f 92       	push	r0
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	0f 92       	push	r0
    2370:	11 24       	eor	r1, r1
    2372:	2f 93       	push	r18
    2374:	3f 93       	push	r19
    2376:	4f 93       	push	r20
    2378:	5f 93       	push	r21
    237a:	6f 93       	push	r22
    237c:	7f 93       	push	r23
    237e:	8f 93       	push	r24
    2380:	9f 93       	push	r25
    2382:	af 93       	push	r26
    2384:	bf 93       	push	r27
    2386:	ef 93       	push	r30
    2388:	ff 93       	push	r31
    238a:	df 93       	push	r29
    238c:	cf 93       	push	r28
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
	if(EXTI2_Ptr!= NULL)
    2392:	80 91 b2 01 	lds	r24, 0x01B2
    2396:	90 91 b3 01 	lds	r25, 0x01B3
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	29 f0       	breq	.+10     	; 0x23a8 <__vector_3+0x40>
		EXTI2_Ptr();
    239e:	e0 91 b2 01 	lds	r30, 0x01B2
    23a2:	f0 91 b3 01 	lds	r31, 0x01B3
    23a6:	09 95       	icall
}
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	ff 91       	pop	r31
    23ae:	ef 91       	pop	r30
    23b0:	bf 91       	pop	r27
    23b2:	af 91       	pop	r26
    23b4:	9f 91       	pop	r25
    23b6:	8f 91       	pop	r24
    23b8:	7f 91       	pop	r23
    23ba:	6f 91       	pop	r22
    23bc:	5f 91       	pop	r21
    23be:	4f 91       	pop	r20
    23c0:	3f 91       	pop	r19
    23c2:	2f 91       	pop	r18
    23c4:	0f 90       	pop	r0
    23c6:	0f be       	out	0x3f, r0	; 63
    23c8:	0f 90       	pop	r0
    23ca:	1f 90       	pop	r1
    23cc:	18 95       	reti

000023ce <GIE_voidEable>:
#include "GIE_interface.h"



void GIE_voidEable(void)
{
    23ce:	df 93       	push	r29
    23d0:	cf 93       	push	r28
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
  SET_BIT (SREG,7);
    23d6:	af e5       	ldi	r26, 0x5F	; 95
    23d8:	b0 e0       	ldi	r27, 0x00	; 0
    23da:	ef e5       	ldi	r30, 0x5F	; 95
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	80 81       	ld	r24, Z
    23e0:	80 68       	ori	r24, 0x80	; 128
    23e2:	8c 93       	st	X, r24
}
    23e4:	cf 91       	pop	r28
    23e6:	df 91       	pop	r29
    23e8:	08 95       	ret

000023ea <GIE_voidDisable>:

void GIE_voidDisable(void)
{
    23ea:	df 93       	push	r29
    23ec:	cf 93       	push	r28
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
  CLR_BIT (SREG,7);
    23f2:	af e5       	ldi	r26, 0x5F	; 95
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	ef e5       	ldi	r30, 0x5F	; 95
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	80 81       	ld	r24, Z
    23fc:	8f 77       	andi	r24, 0x7F	; 127
    23fe:	8c 93       	st	X, r24
}
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <main>:

void EXTI0_ISR(); //UP
void EXTI1_ISR(); //DOWN

void main (void)
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	c8 54       	subi	r28, 0x48	; 72
    2410:	d0 40       	sbci	r29, 0x00	; 0
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    241c:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <DIO_voidInit>
	CLCD_voidInit();
    2420:	0e 94 a5 06 	call	0xd4a	; 0xd4a <CLCD_voidInit>

	GIE_voidEable();
    2424:	0e 94 e7 11 	call	0x23ce	; 0x23ce <GIE_voidEable>
	EXTI0_voidEnable();
    2428:	0e 94 c4 10 	call	0x2188	; 0x2188 <EXTI0_voidEnable>
	EXTI1_voidEnable();
    242c:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <EXTI1_voidEnable>

	EXTI0_CallBack(EXTI0_ISR);
    2430:	89 e4       	ldi	r24, 0x49	; 73
    2432:	94 e1       	ldi	r25, 0x14	; 20
    2434:	0e 94 18 11 	call	0x2230	; 0x2230 <EXTI0_CallBack>
	EXTI1_CallBack(EXTI1_ISR);
    2438:	80 e7       	ldi	r24, 0x70	; 112
    243a:	94 e1       	ldi	r25, 0x14	; 20
    243c:	0e 94 5d 11 	call	0x22ba	; 0x22ba <EXTI1_CallBack>

	u8 Car[8]     ={0b00000000,0b00000000,0b00010100,0b00011110,0b00010100,0b00000000,0b00000000};
    2440:	88 e0       	ldi	r24, 0x08	; 8
    2442:	fe 01       	movw	r30, r28
    2444:	b1 96       	adiw	r30, 0x21	; 33
    2446:	df 01       	movw	r26, r30
    2448:	98 2f       	mov	r25, r24
    244a:	1d 92       	st	X+, r1
    244c:	9a 95       	dec	r25
    244e:	e9 f7       	brne	.-6      	; 0x244a <main+0x44>
    2450:	84 e1       	ldi	r24, 0x14	; 20
    2452:	8b a3       	std	Y+35, r24	; 0x23
    2454:	8e e1       	ldi	r24, 0x1E	; 30
    2456:	8c a3       	std	Y+36, r24	; 0x24
    2458:	84 e1       	ldi	r24, 0x14	; 20
    245a:	8d a3       	std	Y+37, r24	; 0x25
	u8 Obstacle[8]={0b00000000,0b00000000,0b00001110,0b00001110,0b00001110,0b00000000,0b00000000};
    245c:	88 e0       	ldi	r24, 0x08	; 8
    245e:	fe 01       	movw	r30, r28
    2460:	b9 96       	adiw	r30, 0x29	; 41
    2462:	df 01       	movw	r26, r30
    2464:	98 2f       	mov	r25, r24
    2466:	1d 92       	st	X+, r1
    2468:	9a 95       	dec	r25
    246a:	e9 f7       	brne	.-6      	; 0x2466 <main+0x60>
    246c:	8e e0       	ldi	r24, 0x0E	; 14
    246e:	8b a7       	std	Y+43, r24	; 0x2b
    2470:	8e e0       	ldi	r24, 0x0E	; 14
    2472:	8c a7       	std	Y+44, r24	; 0x2c
    2474:	8e e0       	ldi	r24, 0x0E	; 14
    2476:	8d a7       	std	Y+45, r24	; 0x2d
	u8 NoObstacle[8]={0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000};
    2478:	88 e0       	ldi	r24, 0x08	; 8
    247a:	fe 01       	movw	r30, r28
    247c:	f1 96       	adiw	r30, 0x31	; 49
    247e:	df 01       	movw	r26, r30
    2480:	98 2f       	mov	r25, r24
    2482:	1d 92       	st	X+, r1
    2484:	9a 95       	dec	r25
    2486:	e9 f7       	brne	.-6      	; 0x2482 <main+0x7c>
	u8 Wall[8]= {0b00000000,0b00000000,0b00011111,0b00011111,0b00011111,0b00000000,0b00000000};
    2488:	88 e0       	ldi	r24, 0x08	; 8
    248a:	fe 01       	movw	r30, r28
    248c:	f9 96       	adiw	r30, 0x39	; 57
    248e:	df 01       	movw	r26, r30
    2490:	98 2f       	mov	r25, r24
    2492:	1d 92       	st	X+, r1
    2494:	9a 95       	dec	r25
    2496:	e9 f7       	brne	.-6      	; 0x2492 <main+0x8c>
    2498:	8f e1       	ldi	r24, 0x1F	; 31
    249a:	8b af       	std	Y+59, r24	; 0x3b
    249c:	8f e1       	ldi	r24, 0x1F	; 31
    249e:	8c af       	std	Y+60, r24	; 0x3c
    24a0:	8f e1       	ldi	r24, 0x1F	; 31
    24a2:	8d af       	std	Y+61, r24	; 0x3d
	u8 Dead[8]    ={0b00011111,0b00011111,0b00011111,0b00011111,0b00011111,0b00011111,0b00011111};
    24a4:	88 e0       	ldi	r24, 0x08	; 8
    24a6:	fe 01       	movw	r30, r28
    24a8:	ef 5b       	subi	r30, 0xBF	; 191
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	df 01       	movw	r26, r30
    24ae:	98 2f       	mov	r25, r24
    24b0:	1d 92       	st	X+, r1
    24b2:	9a 95       	dec	r25
    24b4:	e9 f7       	brne	.-6      	; 0x24b0 <main+0xaa>
    24b6:	fe 01       	movw	r30, r28
    24b8:	ef 5b       	subi	r30, 0xBF	; 191
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	8f e1       	ldi	r24, 0x1F	; 31
    24be:	80 83       	st	Z, r24
    24c0:	fe 01       	movw	r30, r28
    24c2:	ee 5b       	subi	r30, 0xBE	; 190
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	8f e1       	ldi	r24, 0x1F	; 31
    24c8:	80 83       	st	Z, r24
    24ca:	fe 01       	movw	r30, r28
    24cc:	ed 5b       	subi	r30, 0xBD	; 189
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	8f e1       	ldi	r24, 0x1F	; 31
    24d2:	80 83       	st	Z, r24
    24d4:	fe 01       	movw	r30, r28
    24d6:	ec 5b       	subi	r30, 0xBC	; 188
    24d8:	ff 4f       	sbci	r31, 0xFF	; 255
    24da:	8f e1       	ldi	r24, 0x1F	; 31
    24dc:	80 83       	st	Z, r24
    24de:	fe 01       	movw	r30, r28
    24e0:	eb 5b       	subi	r30, 0xBB	; 187
    24e2:	ff 4f       	sbci	r31, 0xFF	; 255
    24e4:	8f e1       	ldi	r24, 0x1F	; 31
    24e6:	80 83       	st	Z, r24
    24e8:	fe 01       	movw	r30, r28
    24ea:	ea 5b       	subi	r30, 0xBA	; 186
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	8f e1       	ldi	r24, 0x1F	; 31
    24f0:	80 83       	st	Z, r24
    24f2:	fe 01       	movw	r30, r28
    24f4:	e9 5b       	subi	r30, 0xB9	; 185
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	8f e1       	ldi	r24, 0x1F	; 31
    24fa:	80 83       	st	Z, r24

	CLCD_voidSendSpecialCharacter(Car,0);
    24fc:	ce 01       	movw	r24, r28
    24fe:	81 96       	adiw	r24, 0x21	; 33
    2500:	60 e0       	ldi	r22, 0x00	; 0
    2502:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <CLCD_voidSendSpecialCharacter>
	CLCD_voidSendSpecialCharacter(Obstacle,1);
    2506:	ce 01       	movw	r24, r28
    2508:	89 96       	adiw	r24, 0x29	; 41
    250a:	61 e0       	ldi	r22, 0x01	; 1
    250c:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <CLCD_voidSendSpecialCharacter>
	CLCD_voidSendSpecialCharacter(NoObstacle,2);
    2510:	ce 01       	movw	r24, r28
    2512:	c1 96       	adiw	r24, 0x31	; 49
    2514:	62 e0       	ldi	r22, 0x02	; 2
    2516:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <CLCD_voidSendSpecialCharacter>
	CLCD_voidSendSpecialCharacter(Wall,3);
    251a:	ce 01       	movw	r24, r28
    251c:	c9 96       	adiw	r24, 0x39	; 57
    251e:	63 e0       	ldi	r22, 0x03	; 3
    2520:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <CLCD_voidSendSpecialCharacter>
	CLCD_voidSendSpecialCharacter(Dead,4);
    2524:	ce 01       	movw	r24, r28
    2526:	8f 5b       	subi	r24, 0xBF	; 191
    2528:	9f 4f       	sbci	r25, 0xFF	; 255
    252a:	64 e0       	ldi	r22, 0x04	; 4
    252c:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <CLCD_voidSendSpecialCharacter>


	CLCD_voidDisplaySpecialCharacter(0,CarRowPosition,CarColPosition);
    2530:	90 91 86 01 	lds	r25, 0x0186
    2534:	20 91 87 01 	lds	r18, 0x0187
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	69 2f       	mov	r22, r25
    253c:	42 2f       	mov	r20, r18
    253e:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <CLCD_voidDisplaySpecialCharacter>

	//THE WALL
	for(u8 i =0; i<20; i++)
    2542:	18 a2       	std	Y+32, r1	; 0x20
    2544:	0d c0       	rjmp	.+26     	; 0x2560 <main+0x15a>
	{
		CLCD_voidDisplaySpecialCharacter(3,0,i);
    2546:	83 e0       	ldi	r24, 0x03	; 3
    2548:	60 e0       	ldi	r22, 0x00	; 0
    254a:	48 a1       	ldd	r20, Y+32	; 0x20
    254c:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <CLCD_voidDisplaySpecialCharacter>
		CLCD_voidDisplaySpecialCharacter(3,3,i);
    2550:	83 e0       	ldi	r24, 0x03	; 3
    2552:	63 e0       	ldi	r22, 0x03	; 3
    2554:	48 a1       	ldd	r20, Y+32	; 0x20
    2556:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <CLCD_voidDisplaySpecialCharacter>


	CLCD_voidDisplaySpecialCharacter(0,CarRowPosition,CarColPosition);

	//THE WALL
	for(u8 i =0; i<20; i++)
    255a:	88 a1       	ldd	r24, Y+32	; 0x20
    255c:	8f 5f       	subi	r24, 0xFF	; 255
    255e:	88 a3       	std	Y+32, r24	; 0x20
    2560:	88 a1       	ldd	r24, Y+32	; 0x20
    2562:	84 31       	cpi	r24, 0x14	; 20
    2564:	80 f3       	brcs	.-32     	; 0x2546 <main+0x140>
	{
		CLCD_voidDisplaySpecialCharacter(3,0,i);
		CLCD_voidDisplaySpecialCharacter(3,3,i);
	}

	CLCD_voidDisplaySpecialCharacter(0,CarRowPosition,CarColPosition);
    2566:	90 91 86 01 	lds	r25, 0x0186
    256a:	20 91 87 01 	lds	r18, 0x0187
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	69 2f       	mov	r22, r25
    2572:	42 2f       	mov	r20, r18
    2574:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <CLCD_voidDisplaySpecialCharacter>

	while (1) //gameover condition
	{

		// PULL UP
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN2,DIO_u8PIN_HIGH);
    2578:	82 e0       	ldi	r24, 0x02	; 2
    257a:	62 e0       	ldi	r22, 0x02	; 2
    257c:	41 e0       	ldi	r20, 0x01	; 1
    257e:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>
		DIO_u8SetPinValue(DIO_u8PORTC,DIO_u8PIN3,DIO_u8PIN_HIGH);
    2582:	82 e0       	ldi	r24, 0x02	; 2
    2584:	63 e0       	ldi	r22, 0x03	; 3
    2586:	41 e0       	ldi	r20, 0x01	; 1
    2588:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <DIO_u8SetPinValue>


		GIE_voidDisable();
    258c:	0e 94 f5 11 	call	0x23ea	; 0x23ea <GIE_voidDisable>

		CLCD_voidGoToRowColumn(1,0);
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	60 e0       	ldi	r22, 0x00	; 0
    2594:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <CLCD_voidGoToRowColumn>
		CLCD_voidSendString("                   ");
    2598:	80 e6       	ldi	r24, 0x60	; 96
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	0e 94 c5 0b 	call	0x178a	; 0x178a <CLCD_voidSendString>
		CLCD_voidGoToRowColumn(2,0);
    25a0:	82 e0       	ldi	r24, 0x02	; 2
    25a2:	60 e0       	ldi	r22, 0x00	; 0
    25a4:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <CLCD_voidGoToRowColumn>
		CLCD_voidSendString("                   ");
    25a8:	80 e6       	ldi	r24, 0x60	; 96
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	0e 94 c5 0b 	call	0x178a	; 0x178a <CLCD_voidSendString>
		CLCD_voidDisplaySpecialCharacter(0,CarRowPosition,CarColPosition);
    25b0:	90 91 86 01 	lds	r25, 0x0186
    25b4:	20 91 87 01 	lds	r18, 0x0187
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	69 2f       	mov	r22, r25
    25bc:	42 2f       	mov	r20, r18
    25be:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <CLCD_voidDisplaySpecialCharacter>
		CLCD_voidGoToRowColumn(1,0);
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	60 e0       	ldi	r22, 0x00	; 0
    25c6:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <CLCD_voidGoToRowColumn>
		CLCD_voidSendString(ObstcaleArray1);
    25ca:	88 e8       	ldi	r24, 0x88	; 136
    25cc:	91 e0       	ldi	r25, 0x01	; 1
    25ce:	0e 94 c5 0b 	call	0x178a	; 0x178a <CLCD_voidSendString>
		CLCD_voidGoToRowColumn(2,0);
    25d2:	82 e0       	ldi	r24, 0x02	; 2
    25d4:	60 e0       	ldi	r22, 0x00	; 0
    25d6:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <CLCD_voidGoToRowColumn>
		CLCD_voidSendString(ObstcaleArray2);
    25da:	8d e9       	ldi	r24, 0x9D	; 157
    25dc:	91 e0       	ldi	r25, 0x01	; 1
    25de:	0e 94 c5 0b 	call	0x178a	; 0x178a <CLCD_voidSendString>
		CLCD_voidDisplaySpecialCharacter(0,CarRowPosition,CarColPosition);
    25e2:	90 91 86 01 	lds	r25, 0x0186
    25e6:	20 91 87 01 	lds	r18, 0x0187
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	69 2f       	mov	r22, r25
    25ee:	42 2f       	mov	r20, r18
    25f0:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <CLCD_voidDisplaySpecialCharacter>

		GIE_voidEable();
    25f4:	0e 94 e7 11 	call	0x23ce	; 0x23ce <GIE_voidEable>
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	aa ef       	ldi	r26, 0xFA	; 250
    25fe:	b3 e4       	ldi	r27, 0x43	; 67
    2600:	89 8f       	std	Y+25, r24	; 0x19
    2602:	9a 8f       	std	Y+26, r25	; 0x1a
    2604:	ab 8f       	std	Y+27, r26	; 0x1b
    2606:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2608:	69 8d       	ldd	r22, Y+25	; 0x19
    260a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    260c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    260e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	4a ef       	ldi	r20, 0xFA	; 250
    2616:	54 e4       	ldi	r21, 0x44	; 68
    2618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	8d 8b       	std	Y+21, r24	; 0x15
    2622:	9e 8b       	std	Y+22, r25	; 0x16
    2624:	af 8b       	std	Y+23, r26	; 0x17
    2626:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2628:	6d 89       	ldd	r22, Y+21	; 0x15
    262a:	7e 89       	ldd	r23, Y+22	; 0x16
    262c:	8f 89       	ldd	r24, Y+23	; 0x17
    262e:	98 8d       	ldd	r25, Y+24	; 0x18
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e8       	ldi	r20, 0x80	; 128
    2636:	5f e3       	ldi	r21, 0x3F	; 63
    2638:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    263c:	88 23       	and	r24, r24
    263e:	2c f4       	brge	.+10     	; 0x264a <main+0x244>
		__ticks = 1;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	9c 8b       	std	Y+20, r25	; 0x14
    2646:	8b 8b       	std	Y+19, r24	; 0x13
    2648:	3f c0       	rjmp	.+126    	; 0x26c8 <main+0x2c2>
	else if (__tmp > 65535)
    264a:	6d 89       	ldd	r22, Y+21	; 0x15
    264c:	7e 89       	ldd	r23, Y+22	; 0x16
    264e:	8f 89       	ldd	r24, Y+23	; 0x17
    2650:	98 8d       	ldd	r25, Y+24	; 0x18
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	3f ef       	ldi	r19, 0xFF	; 255
    2656:	4f e7       	ldi	r20, 0x7F	; 127
    2658:	57 e4       	ldi	r21, 0x47	; 71
    265a:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    265e:	18 16       	cp	r1, r24
    2660:	4c f5       	brge	.+82     	; 0x26b4 <main+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2662:	69 8d       	ldd	r22, Y+25	; 0x19
    2664:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2666:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2668:	9c 8d       	ldd	r25, Y+28	; 0x1c
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e2       	ldi	r20, 0x20	; 32
    2670:	51 e4       	ldi	r21, 0x41	; 65
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	bc 01       	movw	r22, r24
    267c:	cd 01       	movw	r24, r26
    267e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	9c 8b       	std	Y+20, r25	; 0x14
    2688:	8b 8b       	std	Y+19, r24	; 0x13
    268a:	0f c0       	rjmp	.+30     	; 0x26aa <main+0x2a4>
    268c:	88 ec       	ldi	r24, 0xC8	; 200
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	9a 8b       	std	Y+18, r25	; 0x12
    2692:	89 8b       	std	Y+17, r24	; 0x11
    2694:	89 89       	ldd	r24, Y+17	; 0x11
    2696:	9a 89       	ldd	r25, Y+18	; 0x12
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <main+0x292>
    269c:	9a 8b       	std	Y+18, r25	; 0x12
    269e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a0:	8b 89       	ldd	r24, Y+19	; 0x13
    26a2:	9c 89       	ldd	r25, Y+20	; 0x14
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	9c 8b       	std	Y+20, r25	; 0x14
    26a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26aa:	8b 89       	ldd	r24, Y+19	; 0x13
    26ac:	9c 89       	ldd	r25, Y+20	; 0x14
    26ae:	00 97       	sbiw	r24, 0x00	; 0
    26b0:	69 f7       	brne	.-38     	; 0x268c <main+0x286>
    26b2:	14 c0       	rjmp	.+40     	; 0x26dc <main+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b4:	6d 89       	ldd	r22, Y+21	; 0x15
    26b6:	7e 89       	ldd	r23, Y+22	; 0x16
    26b8:	8f 89       	ldd	r24, Y+23	; 0x17
    26ba:	98 8d       	ldd	r25, Y+24	; 0x18
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9c 8b       	std	Y+20, r25	; 0x14
    26c6:	8b 8b       	std	Y+19, r24	; 0x13
    26c8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ca:	9c 89       	ldd	r25, Y+20	; 0x14
    26cc:	98 8b       	std	Y+16, r25	; 0x10
    26ce:	8f 87       	std	Y+15, r24	; 0x0f
    26d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26d2:	98 89       	ldd	r25, Y+16	; 0x10
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <main+0x2ce>
    26d8:	98 8b       	std	Y+16, r25	; 0x10
    26da:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(500);


		GIE_voidDisable();
    26dc:	0e 94 f5 11 	call	0x23ea	; 0x23ea <GIE_voidDisable>
		if((CarRowPosition==1 && ObstcaleArray1[6]=='|')||(CarRowPosition==2 && ObstcaleArray2[6]=='|'))
    26e0:	80 91 86 01 	lds	r24, 0x0186
    26e4:	81 30       	cpi	r24, 0x01	; 1
    26e6:	21 f4       	brne	.+8      	; 0x26f0 <main+0x2ea>
    26e8:	80 91 8e 01 	lds	r24, 0x018E
    26ec:	8c 37       	cpi	r24, 0x7C	; 124
    26ee:	51 f0       	breq	.+20     	; 0x2704 <main+0x2fe>
    26f0:	80 91 86 01 	lds	r24, 0x0186
    26f4:	82 30       	cpi	r24, 0x02	; 2
    26f6:	09 f0       	breq	.+2      	; 0x26fa <main+0x2f4>
    26f8:	89 c0       	rjmp	.+274    	; 0x280c <main+0x406>
    26fa:	80 91 a3 01 	lds	r24, 0x01A3
    26fe:	8c 37       	cpi	r24, 0x7C	; 124
    2700:	09 f0       	breq	.+2      	; 0x2704 <main+0x2fe>
    2702:	84 c0       	rjmp	.+264    	; 0x280c <main+0x406>
		{
			CLCD_voidDisplaySpecialCharacter(4,CarRowPosition,CarColPosition);
    2704:	90 91 86 01 	lds	r25, 0x0186
    2708:	20 91 87 01 	lds	r18, 0x0187
    270c:	84 e0       	ldi	r24, 0x04	; 4
    270e:	69 2f       	mov	r22, r25
    2710:	42 2f       	mov	r20, r18
    2712:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <CLCD_voidDisplaySpecialCharacter>
			CLCD_voidGoToRowColumn(3,5);
    2716:	83 e0       	ldi	r24, 0x03	; 3
    2718:	65 e0       	ldi	r22, 0x05	; 5
    271a:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <CLCD_voidGoToRowColumn>
			CLCD_voidSendString("Game Over");
    271e:	84 e7       	ldi	r24, 0x74	; 116
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	0e 94 c5 0b 	call	0x178a	; 0x178a <CLCD_voidSendString>
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	aa e7       	ldi	r26, 0x7A	; 122
    272c:	b4 e4       	ldi	r27, 0x44	; 68
    272e:	8b 87       	std	Y+11, r24	; 0x0b
    2730:	9c 87       	std	Y+12, r25	; 0x0c
    2732:	ad 87       	std	Y+13, r26	; 0x0d
    2734:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2736:	6b 85       	ldd	r22, Y+11	; 0x0b
    2738:	7c 85       	ldd	r23, Y+12	; 0x0c
    273a:	8d 85       	ldd	r24, Y+13	; 0x0d
    273c:	9e 85       	ldd	r25, Y+14	; 0x0e
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	4a ef       	ldi	r20, 0xFA	; 250
    2744:	54 e4       	ldi	r21, 0x44	; 68
    2746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	8f 83       	std	Y+7, r24	; 0x07
    2750:	98 87       	std	Y+8, r25	; 0x08
    2752:	a9 87       	std	Y+9, r26	; 0x09
    2754:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2756:	6f 81       	ldd	r22, Y+7	; 0x07
    2758:	78 85       	ldd	r23, Y+8	; 0x08
    275a:	89 85       	ldd	r24, Y+9	; 0x09
    275c:	9a 85       	ldd	r25, Y+10	; 0x0a
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e8       	ldi	r20, 0x80	; 128
    2764:	5f e3       	ldi	r21, 0x3F	; 63
    2766:	0e 94 a9 03 	call	0x752	; 0x752 <__ltsf2>
    276a:	88 23       	and	r24, r24
    276c:	2c f4       	brge	.+10     	; 0x2778 <main+0x372>
		__ticks = 1;
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	9e 83       	std	Y+6, r25	; 0x06
    2774:	8d 83       	std	Y+5, r24	; 0x05
    2776:	3f c0       	rjmp	.+126    	; 0x27f6 <main+0x3f0>
	else if (__tmp > 65535)
    2778:	6f 81       	ldd	r22, Y+7	; 0x07
    277a:	78 85       	ldd	r23, Y+8	; 0x08
    277c:	89 85       	ldd	r24, Y+9	; 0x09
    277e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	3f ef       	ldi	r19, 0xFF	; 255
    2784:	4f e7       	ldi	r20, 0x7F	; 127
    2786:	57 e4       	ldi	r21, 0x47	; 71
    2788:	0e 94 49 03 	call	0x692	; 0x692 <__gtsf2>
    278c:	18 16       	cp	r1, r24
    278e:	4c f5       	brge	.+82     	; 0x27e2 <main+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2790:	6b 85       	ldd	r22, Y+11	; 0x0b
    2792:	7c 85       	ldd	r23, Y+12	; 0x0c
    2794:	8d 85       	ldd	r24, Y+13	; 0x0d
    2796:	9e 85       	ldd	r25, Y+14	; 0x0e
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e2       	ldi	r20, 0x20	; 32
    279e:	51 e4       	ldi	r21, 0x41	; 65
    27a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a4:	dc 01       	movw	r26, r24
    27a6:	cb 01       	movw	r24, r22
    27a8:	bc 01       	movw	r22, r24
    27aa:	cd 01       	movw	r24, r26
    27ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	9e 83       	std	Y+6, r25	; 0x06
    27b6:	8d 83       	std	Y+5, r24	; 0x05
    27b8:	0f c0       	rjmp	.+30     	; 0x27d8 <main+0x3d2>
    27ba:	88 ec       	ldi	r24, 0xC8	; 200
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	9c 83       	std	Y+4, r25	; 0x04
    27c0:	8b 83       	std	Y+3, r24	; 0x03
    27c2:	8b 81       	ldd	r24, Y+3	; 0x03
    27c4:	9c 81       	ldd	r25, Y+4	; 0x04
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <main+0x3c0>
    27ca:	9c 83       	std	Y+4, r25	; 0x04
    27cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ce:	8d 81       	ldd	r24, Y+5	; 0x05
    27d0:	9e 81       	ldd	r25, Y+6	; 0x06
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	9e 83       	std	Y+6, r25	; 0x06
    27d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27d8:	8d 81       	ldd	r24, Y+5	; 0x05
    27da:	9e 81       	ldd	r25, Y+6	; 0x06
    27dc:	00 97       	sbiw	r24, 0x00	; 0
    27de:	69 f7       	brne	.-38     	; 0x27ba <main+0x3b4>
    27e0:	4e c0       	rjmp	.+156    	; 0x287e <main+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27e2:	6f 81       	ldd	r22, Y+7	; 0x07
    27e4:	78 85       	ldd	r23, Y+8	; 0x08
    27e6:	89 85       	ldd	r24, Y+9	; 0x09
    27e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	9e 83       	std	Y+6, r25	; 0x06
    27f4:	8d 83       	std	Y+5, r24	; 0x05
    27f6:	8d 81       	ldd	r24, Y+5	; 0x05
    27f8:	9e 81       	ldd	r25, Y+6	; 0x06
    27fa:	9a 83       	std	Y+2, r25	; 0x02
    27fc:	89 83       	std	Y+1, r24	; 0x01
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	9a 81       	ldd	r25, Y+2	; 0x02
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <main+0x3fc>
    2806:	9a 83       	std	Y+2, r25	; 0x02
    2808:	89 83       	std	Y+1, r24	; 0x01
    280a:	39 c0       	rjmp	.+114    	; 0x287e <main+0x478>
			_delay_ms(1000);
			break;
		}

		SHIFT();
    280c:	80 91 88 01 	lds	r24, 0x0188
    2810:	8f 8f       	std	Y+31, r24	; 0x1f
    2812:	80 91 9d 01 	lds	r24, 0x019D
    2816:	8e 8f       	std	Y+30, r24	; 0x1e
    2818:	1d 8e       	std	Y+29, r1	; 0x1d
    281a:	21 c0       	rjmp	.+66     	; 0x285e <main+0x458>
    281c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    281e:	28 2f       	mov	r18, r24
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2824:	88 2f       	mov	r24, r24
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	01 96       	adiw	r24, 0x01	; 1
    282a:	fc 01       	movw	r30, r24
    282c:	e8 57       	subi	r30, 0x78	; 120
    282e:	fe 4f       	sbci	r31, 0xFE	; 254
    2830:	80 81       	ld	r24, Z
    2832:	f9 01       	movw	r30, r18
    2834:	e8 57       	subi	r30, 0x78	; 120
    2836:	fe 4f       	sbci	r31, 0xFE	; 254
    2838:	80 83       	st	Z, r24
    283a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    283c:	28 2f       	mov	r18, r24
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2842:	88 2f       	mov	r24, r24
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	01 96       	adiw	r24, 0x01	; 1
    2848:	fc 01       	movw	r30, r24
    284a:	e3 56       	subi	r30, 0x63	; 99
    284c:	fe 4f       	sbci	r31, 0xFE	; 254
    284e:	80 81       	ld	r24, Z
    2850:	f9 01       	movw	r30, r18
    2852:	e3 56       	subi	r30, 0x63	; 99
    2854:	fe 4f       	sbci	r31, 0xFE	; 254
    2856:	80 83       	st	Z, r24
    2858:	8d 8d       	ldd	r24, Y+29	; 0x1d
    285a:	8f 5f       	subi	r24, 0xFF	; 255
    285c:	8d 8f       	std	Y+29, r24	; 0x1d
    285e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2860:	83 31       	cpi	r24, 0x13	; 19
    2862:	e0 f2       	brcs	.-72     	; 0x281c <main+0x416>
    2864:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2866:	80 93 9b 01 	sts	0x019B, r24
    286a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    286c:	80 93 b0 01 	sts	0x01B0, r24
    2870:	10 92 9c 01 	sts	0x019C, r1
    2874:	10 92 b1 01 	sts	0x01B1, r1
		GIE_voidEable();
    2878:	0e 94 e7 11 	call	0x23ce	; 0x23ce <GIE_voidEable>
    287c:	7d ce       	rjmp	.-774    	; 0x2578 <main+0x172>
	}

}
    287e:	c8 5b       	subi	r28, 0xB8	; 184
    2880:	df 4f       	sbci	r29, 0xFF	; 255
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	de bf       	out	0x3e, r29	; 62
    2888:	0f be       	out	0x3f, r0	; 63
    288a:	cd bf       	out	0x3d, r28	; 61
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	08 95       	ret

00002892 <EXTI0_ISR>:

void EXTI0_ISR()
{
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
	if (ObstcaleArray2[CarColPosition] != '|')
    289a:	80 91 87 01 	lds	r24, 0x0187
    289e:	88 2f       	mov	r24, r24
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	fc 01       	movw	r30, r24
    28a4:	e3 56       	subi	r30, 0x63	; 99
    28a6:	fe 4f       	sbci	r31, 0xFE	; 254
    28a8:	80 81       	ld	r24, Z
    28aa:	8c 37       	cpi	r24, 0x7C	; 124
    28ac:	51 f0       	breq	.+20     	; 0x28c2 <EXTI0_ISR+0x30>
	{
		CLCD_voidGoToRowColumn(CarRowPosition,CarColPosition);
    28ae:	80 91 86 01 	lds	r24, 0x0186
    28b2:	90 91 87 01 	lds	r25, 0x0187
    28b6:	69 2f       	mov	r22, r25
    28b8:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <CLCD_voidGoToRowColumn>
		CLCD_voidSendData(' ');
    28bc:	80 e2       	ldi	r24, 0x20	; 32
    28be:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSendData>
	}
	CarRowPosition = 1;
    28c2:	81 e0       	ldi	r24, 0x01	; 1
    28c4:	80 93 86 01 	sts	0x0186, r24
	CLCD_voidDisplaySpecialCharacter(0,CarRowPosition,CarColPosition);
    28c8:	90 91 86 01 	lds	r25, 0x0186
    28cc:	20 91 87 01 	lds	r18, 0x0187
    28d0:	80 e0       	ldi	r24, 0x00	; 0
    28d2:	69 2f       	mov	r22, r25
    28d4:	42 2f       	mov	r20, r18
    28d6:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <CLCD_voidDisplaySpecialCharacter>
}
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	08 95       	ret

000028e0 <EXTI1_ISR>:

void EXTI1_ISR()
{
    28e0:	df 93       	push	r29
    28e2:	cf 93       	push	r28
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62
	if (ObstcaleArray1[CarColPosition] != '|')
    28e8:	80 91 87 01 	lds	r24, 0x0187
    28ec:	88 2f       	mov	r24, r24
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	fc 01       	movw	r30, r24
    28f2:	e8 57       	subi	r30, 0x78	; 120
    28f4:	fe 4f       	sbci	r31, 0xFE	; 254
    28f6:	80 81       	ld	r24, Z
    28f8:	8c 37       	cpi	r24, 0x7C	; 124
    28fa:	51 f0       	breq	.+20     	; 0x2910 <EXTI1_ISR+0x30>
	{
		CLCD_voidGoToRowColumn(CarRowPosition,CarColPosition);
    28fc:	80 91 86 01 	lds	r24, 0x0186
    2900:	90 91 87 01 	lds	r25, 0x0187
    2904:	69 2f       	mov	r22, r25
    2906:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <CLCD_voidGoToRowColumn>
		CLCD_voidSendData(' ');
    290a:	80 e2       	ldi	r24, 0x20	; 32
    290c:	0e 94 7f 09 	call	0x12fe	; 0x12fe <CLCD_voidSendData>
	}
	CarRowPosition = 2;
    2910:	82 e0       	ldi	r24, 0x02	; 2
    2912:	80 93 86 01 	sts	0x0186, r24
	CLCD_voidDisplaySpecialCharacter(0,CarRowPosition,CarColPosition);
    2916:	90 91 86 01 	lds	r25, 0x0186
    291a:	20 91 87 01 	lds	r18, 0x0187
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	69 2f       	mov	r22, r25
    2922:	42 2f       	mov	r20, r18
    2924:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <CLCD_voidDisplaySpecialCharacter>
}
    2928:	cf 91       	pop	r28
    292a:	df 91       	pop	r29
    292c:	08 95       	ret

0000292e <__udivmodhi4>:
    292e:	aa 1b       	sub	r26, r26
    2930:	bb 1b       	sub	r27, r27
    2932:	51 e1       	ldi	r21, 0x11	; 17
    2934:	07 c0       	rjmp	.+14     	; 0x2944 <__udivmodhi4_ep>

00002936 <__udivmodhi4_loop>:
    2936:	aa 1f       	adc	r26, r26
    2938:	bb 1f       	adc	r27, r27
    293a:	a6 17       	cp	r26, r22
    293c:	b7 07       	cpc	r27, r23
    293e:	10 f0       	brcs	.+4      	; 0x2944 <__udivmodhi4_ep>
    2940:	a6 1b       	sub	r26, r22
    2942:	b7 0b       	sbc	r27, r23

00002944 <__udivmodhi4_ep>:
    2944:	88 1f       	adc	r24, r24
    2946:	99 1f       	adc	r25, r25
    2948:	5a 95       	dec	r21
    294a:	a9 f7       	brne	.-22     	; 0x2936 <__udivmodhi4_loop>
    294c:	80 95       	com	r24
    294e:	90 95       	com	r25
    2950:	bc 01       	movw	r22, r24
    2952:	cd 01       	movw	r24, r26
    2954:	08 95       	ret

00002956 <__udivmodsi4>:
    2956:	a1 e2       	ldi	r26, 0x21	; 33
    2958:	1a 2e       	mov	r1, r26
    295a:	aa 1b       	sub	r26, r26
    295c:	bb 1b       	sub	r27, r27
    295e:	fd 01       	movw	r30, r26
    2960:	0d c0       	rjmp	.+26     	; 0x297c <__udivmodsi4_ep>

00002962 <__udivmodsi4_loop>:
    2962:	aa 1f       	adc	r26, r26
    2964:	bb 1f       	adc	r27, r27
    2966:	ee 1f       	adc	r30, r30
    2968:	ff 1f       	adc	r31, r31
    296a:	a2 17       	cp	r26, r18
    296c:	b3 07       	cpc	r27, r19
    296e:	e4 07       	cpc	r30, r20
    2970:	f5 07       	cpc	r31, r21
    2972:	20 f0       	brcs	.+8      	; 0x297c <__udivmodsi4_ep>
    2974:	a2 1b       	sub	r26, r18
    2976:	b3 0b       	sbc	r27, r19
    2978:	e4 0b       	sbc	r30, r20
    297a:	f5 0b       	sbc	r31, r21

0000297c <__udivmodsi4_ep>:
    297c:	66 1f       	adc	r22, r22
    297e:	77 1f       	adc	r23, r23
    2980:	88 1f       	adc	r24, r24
    2982:	99 1f       	adc	r25, r25
    2984:	1a 94       	dec	r1
    2986:	69 f7       	brne	.-38     	; 0x2962 <__udivmodsi4_loop>
    2988:	60 95       	com	r22
    298a:	70 95       	com	r23
    298c:	80 95       	com	r24
    298e:	90 95       	com	r25
    2990:	9b 01       	movw	r18, r22
    2992:	ac 01       	movw	r20, r24
    2994:	bd 01       	movw	r22, r26
    2996:	cf 01       	movw	r24, r30
    2998:	08 95       	ret

0000299a <__prologue_saves__>:
    299a:	2f 92       	push	r2
    299c:	3f 92       	push	r3
    299e:	4f 92       	push	r4
    29a0:	5f 92       	push	r5
    29a2:	6f 92       	push	r6
    29a4:	7f 92       	push	r7
    29a6:	8f 92       	push	r8
    29a8:	9f 92       	push	r9
    29aa:	af 92       	push	r10
    29ac:	bf 92       	push	r11
    29ae:	cf 92       	push	r12
    29b0:	df 92       	push	r13
    29b2:	ef 92       	push	r14
    29b4:	ff 92       	push	r15
    29b6:	0f 93       	push	r16
    29b8:	1f 93       	push	r17
    29ba:	cf 93       	push	r28
    29bc:	df 93       	push	r29
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	ca 1b       	sub	r28, r26
    29c4:	db 0b       	sbc	r29, r27
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	de bf       	out	0x3e, r29	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	09 94       	ijmp

000029d2 <__epilogue_restores__>:
    29d2:	2a 88       	ldd	r2, Y+18	; 0x12
    29d4:	39 88       	ldd	r3, Y+17	; 0x11
    29d6:	48 88       	ldd	r4, Y+16	; 0x10
    29d8:	5f 84       	ldd	r5, Y+15	; 0x0f
    29da:	6e 84       	ldd	r6, Y+14	; 0x0e
    29dc:	7d 84       	ldd	r7, Y+13	; 0x0d
    29de:	8c 84       	ldd	r8, Y+12	; 0x0c
    29e0:	9b 84       	ldd	r9, Y+11	; 0x0b
    29e2:	aa 84       	ldd	r10, Y+10	; 0x0a
    29e4:	b9 84       	ldd	r11, Y+9	; 0x09
    29e6:	c8 84       	ldd	r12, Y+8	; 0x08
    29e8:	df 80       	ldd	r13, Y+7	; 0x07
    29ea:	ee 80       	ldd	r14, Y+6	; 0x06
    29ec:	fd 80       	ldd	r15, Y+5	; 0x05
    29ee:	0c 81       	ldd	r16, Y+4	; 0x04
    29f0:	1b 81       	ldd	r17, Y+3	; 0x03
    29f2:	aa 81       	ldd	r26, Y+2	; 0x02
    29f4:	b9 81       	ldd	r27, Y+1	; 0x01
    29f6:	ce 0f       	add	r28, r30
    29f8:	d1 1d       	adc	r29, r1
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	de bf       	out	0x3e, r29	; 62
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	cd bf       	out	0x3d, r28	; 61
    2a04:	ed 01       	movw	r28, r26
    2a06:	08 95       	ret

00002a08 <_exit>:
    2a08:	f8 94       	cli

00002a0a <__stop_program>:
    2a0a:	ff cf       	rjmp	.-2      	; 0x2a0a <__stop_program>
